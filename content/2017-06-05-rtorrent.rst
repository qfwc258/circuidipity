==========================================
Command line torrent server using rTorrent
==========================================

:date: 2017-06-05 21:40:00
:slug: rtorrent
:tags: rtorrent, shell, network, debian, linux
:modified: 2017-06-18 11:24:00

`PROJECT: Home Server #10 .: <http://www.circuidipity.com/home-server.html>`_ A text-based **BitTorrent client** that - combined with `tmux <http://www.circuidipity.com/tmux.html>`_ - makes a cool lightweight torrent server.

Let's go!
=========

I can ``ssh`` into my home server, start a tmux session and create multiple windows, run **rTorrent** in a window to start seeding a Linux ``iso``, detach from session and server, and return later to find everything in place and the ``iso`` uploading.

0. Install
----------

.. code-block:: bash

    $ sudo apt install rtorrent
    $ mkdir -p ~/rtorrent/config.d

1. Start and config
-------------------

Create an rTorrent executable startup script ``~/rtorrent/start`` with the `details provided in the rTorrent cookbook. <https://rtorrent-docs.readthedocs.io/en/latest/cookbook.html#the-rtorrent-command-line>`_

Download and save the `default configuration template <https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template>`_ to ``~/.rtorrentrc``. Open the file and comment out (deactivate) the `dht <https://en.wikipedia.org/wiki/Distributed_hash_table>`_ and **watch directory** settings ...

.. code-block:: bash

    [...]
    #dht.mode.set = disable
    #protocol.pex.set = no
    #trackers.use_udp.set = no
    [...]
    #schedule2 = watch_start, 10, 10, ((load.start, (cat, (cfg.watch), "start/*.torrent")))
    #schedule2 = watch_load, 11, 10, ((load.normal, (cat, (cfg.watch), "load/*.torrent")))

Remember to configure **port forwarding** on the `home router firewall <http://www.circuidipity.com/20141006.html>`_  for ports ``network.port_range.set`` (default ``50000``) and ``dht.port.set`` (configured below).

2. Config fragments
-------------------

Customize the config by creating some `drop in config fragments <https://rtorrent-docs.readthedocs.io/en/latest/use-cases.html#load-drop-in-config-fragments>`_ in ``~/rtorrent/config.d``. For my setup I create fragments to establish bandwidth quotas, enable dht and require encrypted traffic, and set a directory that rTorrent watches for new torrent files ...

* bandwidth.rc

.. code-block:: bash

    print="Global bandwidth .: download_rate = 100 / upload_rate = 20"
    throttle.global_down.max_rate.set_kb = 100
    throttle.global_up.max_rate.set_kb = 20

* dht.rc

.. code-block:: bash

    print="DHT support = auto"
    dht.mode.set = auto
    dht.port.set = 6881
    protocol.pex.set = yes
    trackers.use_udp.set = yes

* encryption.rc

.. code-block:: bash

    print="Encryption = required"
    encryption = require,require_RC4,allow_incoming,try_outgoing

* watch.rc

.. code-block:: bash

	print="Watch directory enabled."
	schedule2 = watch_directory,5,5, ((load.start, (cat, (cfg.watch), "*.torrent")))
	schedule2 = untied_directory,5,5,stop_untied=
	schedule2 = tied_directory,5,5,start_tied=

3. Run
------

Launch ``~/rtorrent/start`` and a basic rTorrent setup is now up and running. Check out the `cheatsheet <http://getos.org/rtorrent_ref.pdf>`_ for navigating around the interface and the `rTorrent docs <https://rtorrent-docs.readthedocs.io/en/latest/overview.html#>`_ and the torrent client's `entry on the Arch Wiki <https://wiki.archlinux.org/index.php/RTorrent>`_ for details and ideas for more advanced configs.

Happy hacking!
