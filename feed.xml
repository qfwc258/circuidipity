<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Circuidipity</title><link href="http://www.circuidipity.com/" rel="alternate"></link><link href="http://www.circuidipity.com/feed.xml" rel="self"></link><id>http://www.circuidipity.com/</id><updated>2014-02-06T00:00:00-05:00</updated><entry><title>Build a blog using the Pelican static site generator</title><link href="http://www.circuidipity.com/pelican.html" rel="alternate"></link><updated>2014-02-06T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-02-06:pelican.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; is a Python-powered &lt;em&gt;static site generator&lt;/em&gt;. I design the look and layout of this site using CSS and &lt;a class="reference external" href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt; templates and write my posts as plaintext files using &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; and Pelican &lt;em&gt;compiles&lt;/em&gt; the contents into HTML output suitable for a blog.&lt;/p&gt;
&lt;p&gt;I like the idea of creating a static website. Some of the advantages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no database required ... plaintext is easy to edit, backup and move around&lt;/li&gt;
&lt;li&gt;plaintext allows your choice of editor ... I am learning &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;cheap and easy to host practically anywhere ... one option: &lt;a class="reference external" href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is a free service for hosting static HTML content&lt;/li&gt;
&lt;li&gt;no database or excutable code makes a website easy to secure, maintain and scale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The traditional disadvantage to using static pages for a blog has been the lack of dynamic elements - hosting feeds, user comments - but JavaScript for things like a Twitter widget to provide real-time updates and out-sourced services like Disqus for commenting are possible alternatives to work around static limitations.&lt;/p&gt;
&lt;p&gt;This is how I built &lt;em&gt;Circuidipity&lt;/em&gt; using Pelican.&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;I install Pelican and extra tools by creating a &lt;em&gt;virtual environment&lt;/em&gt; using &lt;a class="reference external" href="/python2-and-python3.html"&gt;virtualenv&lt;/a&gt; and &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;. This allows me to create a sandboxed work area specific to my blog and user separate from my default Python installation (an alternative method in Debian would be to install the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-pelican&lt;/span&gt;&lt;/tt&gt; package).&lt;/p&gt;
&lt;p&gt;With &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; installed and using my blog as an example ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv ~/virtualenvs/circuidipity
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/virtualenvs/circuidipity/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To later upgrade to newer versions simply run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pelican&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Next I create a directory to hold my blog contents and run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; to create a default site layout and configuration. I add my blog details and mostly accept the default choices provided (except for &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/settings.html#pagination"&gt;pagination&lt;/a&gt;) ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/circuidipity
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/circuidipity
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
Welcome to pelican-quickstart v3.3.0.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do &lt;/span&gt;you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? Circuidipity
&amp;gt; Who will be the author of this web site? Daniel Wayne Armstrong
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://www.circuidipity.com
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
Done. Your new project is available at /home/dwa/circuidipity
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the layout generated by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── content
├── develop_server.sh
├── fabfile.py
├── Makefile
├── output
├── pelicanconf.py
└── publishconf.py

2 directories, 5 files
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="first-post"&gt;
&lt;h2&gt;First post&lt;/h2&gt;
&lt;p&gt;Posts go into &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; and I create a &lt;tt class="docutils literal"&gt;images&lt;/tt&gt; subdirectory for screenshots and artwork and a &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; subdirectory to hold things like an &lt;tt class="docutils literal"&gt;about&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;contact&lt;/tt&gt; page ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir content/&lt;span class="o"&gt;{&lt;/span&gt;images,pages&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; create your first post &lt;tt class="docutils literal"&gt;hello_world.rst&lt;/tt&gt; using reStructuredText ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;===========&lt;/span&gt;
&lt;span class="gh"&gt;Hello World&lt;/span&gt;
&lt;span class="gh"&gt;===========&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2014-02-06 23:24&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;pelican, web&lt;/span&gt;
&lt;span class="nc"&gt;:slug:&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;

My &lt;span class="ge"&gt;*first*&lt;/span&gt; post using &lt;span class="s"&gt;`Pelican &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://docs.getpelican.com/en/3.3.0/getting_started.html&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Items like &lt;tt class="docutils literal"&gt;:date&lt;/tt&gt; &lt;tt class="docutils literal"&gt;:tags:&lt;/tt&gt; &lt;tt class="docutils literal"&gt;:slug:&lt;/tt&gt; are &lt;em&gt;metadata&lt;/em&gt; that can be used in the generated HTML output. These and a few others are included in Pelican and users can create their own to use in &lt;a class="reference external" href="http://docs.getpelican.com/en/3.1.1/themes.html#theming-pelican"&gt;templates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Save the file and test the new blog by running the Pelican built-in development server. This will take all the &lt;tt class="docutils literal"&gt;*.rst&lt;/tt&gt; files and generate HTML formatted files in &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; and serve up the results for inspection in a browser at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server will continue to run in the background and re-generate any updated content for viewing. Stop the server by running &lt;tt class="docutils literal"&gt;./develop_server.sh stop&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settings"&gt;
&lt;h2&gt;Settings&lt;/h2&gt;
&lt;p&gt;Running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; creates 2 configuration files: &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Primary settings are configured in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;. Settings can be used as &lt;em&gt;variables&lt;/em&gt; in posts, pages, and templates. This is how mine looks ... some of the settings such as &lt;tt class="docutils literal"&gt;AUTHOR&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SITENAME&lt;/tt&gt; were generated by Pelican and some like &lt;tt class="docutils literal"&gt;WHOAMI_URL&lt;/tt&gt; were created by myself ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Daniel Wayne Armstrong&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Circuidipity&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;America/Toronto&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%A &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %B %Y&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Static paths will be copied without parsing their contents&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Shift the installed location of a file&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Extract post date from filename&lt;/span&gt;
&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Sole author and don&amp;#39;t use categories ... disable these features&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;AUTHORS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# URL settings&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tag-{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tag-{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAGS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tags.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAGS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tags.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;archives.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;archives.html&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Contact&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;daniel at circuidipity dot com&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Plugins&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-plugins&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;neighbors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Theme&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-themes/chungking-condo&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WHOAMI_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/theme/images/whoami.jpg&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GREETING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Howdy!&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;BY-NC-SA&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_URL_IMG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;JINJA_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jinja2.ext.loopcontrols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Social&lt;/span&gt;
&lt;span class="n"&gt;TWITTER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://twitter.com/circuidipity&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/vonbrownie&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Tag cloud&lt;/span&gt;
&lt;span class="n"&gt;TAG_CLOUD_STEPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few of the settings like &lt;tt class="docutils literal"&gt;RELATIVE_URLS = True&lt;/tt&gt; and turning off &lt;tt class="docutils literal"&gt;ATOM&lt;/tt&gt; feeds are appropriate for a &lt;em&gt;test&lt;/em&gt; environment but are probably things that need to be modified when its time for deployment. The second &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; configuration file contains priority settings for &lt;em&gt;publishing&lt;/em&gt; content ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.circuidipity.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;FEED_MAX_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/plugins.html"&gt;Plugins&lt;/a&gt; are available to extend the functionality of Pelican. I use a plugin called &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors"&gt;neighbors&lt;/a&gt; that makes it easy for me to add links near the bottom to &lt;tt class="docutils literal"&gt;Newer&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Older&lt;/tt&gt; articles in relation to the current page.&lt;/p&gt;
&lt;p&gt;Enable plugins in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-plugins&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;neighbors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can then make use of the plugin's &lt;tt class="docutils literal"&gt;next_article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;prev_article&lt;/tt&gt; variables in a Jinja2-formatted template to add those navigation links:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_article&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prevpost&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fa fa-arrow-left&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Older&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.prev_article.url}}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_article&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nextpost&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Newer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fa fa-arrow-right&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.next_article.url}}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;p&gt;Pelican includes a default theme to get you started and there is a collection of &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;user-created themes&lt;/a&gt; to choose from or &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/themes.html"&gt;create your own&lt;/a&gt;. I chose to start from scratch and explore CSS, Jinja2 templating, &lt;a class="reference external" href="http://pygments.org/faq/"&gt;pygments&lt;/a&gt; and &lt;a class="reference external" href="http://fortawesome.github.io/Font-Awesome/"&gt;Font Awesome icons&lt;/a&gt; to create my own &lt;a class="reference external" href="https://github.com/vonbrownie/circuidipity/tree/gh-pages/theme"&gt;Chungking Condo&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;To use a theme set the location of its contents in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-themes/chungking-condo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;p&gt;When ready to generate for deployment run ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All blog contents are placed in &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; ready to be uploaded to a hosting service. Since everything is static content there are many options available. Previously I used &lt;a class="reference external" href="http://www.circuidipity.com/host-website-on-amazon-s3.html"&gt;Amazon S3&lt;/a&gt; and have now switched to a free &lt;a class="reference external" href="https://github.com/vonbrownie/circuidipity"&gt;project repository hosted on GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go forth &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;post&lt;/em&gt; and make merry!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="web"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Vimeo and FlashBlock not playing nice on Iceweasel/Firefox</title><link href="http://www.circuidipity.com/flashblock.html" rel="alternate"></link><updated>2014-01-07T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-07:flashblock.html</id><summary type="html">&lt;p&gt;Vimeo videos actually are not playing &lt;em&gt;at all&lt;/em&gt; ... neither embedded or on the site itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fix:&lt;/strong&gt; Add 3 entries to the FlashBlock &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Preferences-&amp;gt;Whitelist&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;vimeo.com&lt;/div&gt;
&lt;div class="line"&gt;vimeocdn.com&lt;/div&gt;
&lt;div class="line"&gt;player.vimeo.com&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Works on &lt;tt class="docutils literal"&gt;Iceweasel 24.2.0&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;Flashblock 1.5.17&lt;/tt&gt; .&lt;/p&gt;
</summary><category term="firefox"></category><category term="web"></category><category term="linux"></category></entry><entry><title>Add ascii logo to login prompt</title><link href="http://www.circuidipity.com/ascii-logo.html" rel="alternate"></link><updated>2014-01-06T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-06:ascii-logo.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.deater.net/weave/vmwprod/linux_logo/"&gt;Linuxlogo&lt;/a&gt; provides Tux, the Debian swirl, and other distro logos that can be displayed - along with system information - at the console login prompt ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install linuxlogo
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp /etc/issue /etc/issue.bak
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sh -c &lt;span class="s1"&gt;&amp;#39;linux_logo -L debian -F &amp;quot;.: Greetings, Carbon-Based Biped :.\n\n#O Version #V\nCompiled #C\n#H \\l&amp;quot; &amp;gt; /etc/issue&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="linux"></category><category term="debian"></category></entry><entry><title>Convert video file(s) to MP3 audio</title><link href="http://www.circuidipity.com/convert-video-to-audio.html" rel="alternate"></link><updated>2014-01-01T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-01:convert-video-to-audio.html</id><summary type="html">&lt;p&gt;A simple shell script I made to convert downloaded YouTube videos to MP3s ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Convert video file to audio&lt;/span&gt;

&lt;span class="nv"&gt;MP3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-acodec libmp3lame -aq 0 -ac 2 -ar 44100&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;f in &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;ffmpeg -i &lt;span class="s2"&gt;&amp;quot;$f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$MP3&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$(echo $f | sed &amp;#39;s/....$/.mp3/&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Requires &lt;tt class="docutils literal"&gt;ffmpeg&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;libmp3lame0&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="programming"></category><category term="shell"></category><category term="linux"></category></entry><entry><title>Multiple instances of nm-applet in Openbox</title><link href="http://www.circuidipity.com/nm-applet-openbox.html" rel="alternate"></link><updated>2013-12-23T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-12-23:nm-applet-openbox.html</id><summary type="html">&lt;p&gt;I had commented out my entry for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/openbox/autostart&lt;/span&gt;&lt;/tt&gt; and system was loading &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/xdg/autostart/nm-applet.desktop&lt;/span&gt;&lt;/tt&gt;. Problem: After updating Openbox there were &lt;em&gt;two&lt;/em&gt; instances of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; being loaded.&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/usr/lib/x86_64-linux-gnu/openbox-autostart&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;GLOBALAUTOSTART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/xdg/openbox/autostart&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;AUTOSTART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${XDG_CONFIG_HOME:-&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.config&lt;span class="s2"&gt;&amp;quot;}/openbox/autostart&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fix:&lt;/strong&gt; Edited &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/xdg/autostart/nm-applet.desktop&lt;/span&gt;&lt;/tt&gt; to read ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;NotShowIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;KDE;GNOME;OPENBOX;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and &lt;em&gt;no&lt;/em&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; appears when Openbox is loaded. Re-enabled &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;autostart&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;sleep 3 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/nm-applet --sm-disable&lt;span class="o"&gt;)&lt;/span&gt; &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... re-started Openbox and now only the desired &lt;em&gt;single&lt;/em&gt; instance of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; is loaded.&lt;/p&gt;
</summary><category term="openbox"></category><category term="linux"></category></entry><entry><title>Python2 and Python3 co-existing in harmony using Virtualenv</title><link href="http://www.circuidipity.com/python2-and-python3.html" rel="alternate"></link><updated>2013-11-22T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-11-22:python2-and-python3.html</id><summary type="html">&lt;p&gt;On my laptop Python is pre-installed ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -V
Python 2.7.5+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://inventwithpython.com/hacking/index.html"&gt;Hacking Secret Ciphers with Python&lt;/a&gt; looks to be a good resource for beginners to get started with Python programming. This free book uses Python3 but Debian defaults to Python2. No problem. Multiple versions of Python can co-exist on the same computer thanks to &lt;em&gt;virtual isolated python environments&lt;/em&gt; created using &lt;a class="reference external" href="https://pypi.python.org/pypi/virtualenv"&gt;Virtualenv&lt;/a&gt;. That allows me to use Python3 for certain projects - like the exercises in &lt;em&gt;Ciphers&lt;/em&gt; - but continue using Python2 as the system default.&lt;/p&gt;
&lt;p&gt;Install the Debian package for &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; and create a directory to hold multiple virtual environments ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-virtualenv
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/virtualenvs
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/virtualenvs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create and activate a new sandboxed Python3 environment ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3 --no-site-packages secret_ciphers
Running virtualenv with interpreter /usr/bin/python3
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr&amp;#39;&lt;/span&gt;
New python executable in secret_ciphers/bin/python3
Also creating executable in secret_ciphers/bin/python
Installing Setuptools........done.
Installing Pip...............done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the newly-created sandbox with &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; and install additional Python package using &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;secret_ciphers/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;secret_ciphers&lt;span class="o"&gt;)[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -V
Python 3.3.3
&lt;span class="o"&gt;(&lt;/span&gt;secret_ciphers&lt;span class="o"&gt;)[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install PACKAGENAME
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;tt class="docutils literal"&gt;deativate&lt;/tt&gt; to exit the sandbox and return to the default system Python. Delete an inactive sandbox with a simple &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; SANDBOX&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="virtual environments"></category><category term="programming"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Install Debian Wheezy Screenshot Tour</title><link href="http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html" rel="alternate"></link><updated>2013-10-11T00:00:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-10-11:install-debian-wheezy-screenshot-tour.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.debian.org"&gt;Debian GNU/Linux&lt;/a&gt; is an operating system created by volunteers of one of the largest and longest-running free software projects in the world. More than a hundred other Linux distributions like Ubuntu build their edifices on solid Debian &lt;em&gt;awesomesauce&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 &lt;em&gt;release branches&lt;/em&gt; - &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testing&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;unstable&lt;/tt&gt; - and the current stable branch goes by the name &lt;tt class="docutils literal"&gt;wheezy&lt;/tt&gt;. Below is a visual walk-through of a Debian installation that features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;separate root, encrypted home and swap partitions&lt;/li&gt;
&lt;li&gt;a minimal foundation for any type of Linux configuration (server, desktop, &lt;a class="reference external" href="http://wiki.debian.org/DebianUnstable"&gt;rolling release&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="step-0-installer"&gt;
&lt;h2&gt;Step 0 - Installer&lt;/h2&gt;
&lt;p&gt;Download a &lt;a class="reference external" href="http://ftp.nl.debian.org/debian/dists/testing/main/installer-amd64/current/images/netboot/mini.iso"&gt;64-bit&lt;/a&gt;  (or &lt;a class="reference external" href="http://ftp.nl.debian.org/debian/dists/testing/main/installer-i386/current/images/netboot/mini.iso"&gt;32-bit&lt;/a&gt; for older machines) Debian mini installer and burn the image to a CD or &lt;a class="reference external" href="multi-boot-usb.html"&gt;prepare a USB boot device&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-go"&gt;
&lt;h2&gt;Step 1 - Go!&lt;/h2&gt;
&lt;img alt="Install" class="align-center" src="images/wheezyInstall/011.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select Language" class="align-center" src="images/wheezyInstall/02.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select Location" class="align-center" src="images/wheezyInstall/03.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure Keyboard" class="align-center" src="images/wheezyInstall/04.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Hostname" class="align-center" src="images/wheezyInstall/05.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Domain" class="align-center" src="images/wheezyInstall/06.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror Country" class="align-center" src="images/wheezyInstall/07.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror archive" class="align-center" src="images/wheezyInstall/08.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror Directory" class="align-center" src="images/wheezyInstall/09.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Proxy" class="align-center" src="images/wheezyInstall/10.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Root password" class="align-center" src="images/wheezyInstall/11.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify password" class="align-center" src="images/wheezyInstall/12.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Full Name" class="align-center" src="images/wheezyInstall/13.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Username" class="align-center" src="images/wheezyInstall/14.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="User password" class="align-center" src="images/wheezyInstall/15.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify password" class="align-center" src="images/wheezyInstall/16.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select time zone" class="align-center" src="images/wheezyInstall/17.png" style="width: 800px; height: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-partitions"&gt;
&lt;h2&gt;Step 2 - Partitions&lt;/h2&gt;
&lt;p&gt;In the example below we create 3 partitions on the disk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sda1 is a 20GB &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; partition&lt;/li&gt;
&lt;li&gt;sda2 is a 1GB &lt;tt class="docutils literal"&gt;swap&lt;/tt&gt; partition &lt;em&gt;encrypted&lt;/em&gt; with a &lt;em&gt;random key&lt;/em&gt; (double the RAM &amp;lt;= 2GB is a good rule of thumb for sizing swap)&lt;/li&gt;
&lt;li&gt;sda3 uses the remaining space as a &lt;tt class="docutils literal"&gt;home&lt;/tt&gt; partition &lt;em&gt;encrypted&lt;/em&gt; with a &lt;em&gt;passphrase&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Partitioning method" class="align-center" src="images/wheezyInstall/18.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition disks" class="align-center" src="images/wheezyInstall/19.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition table" class="align-center" src="images/wheezyInstall/20.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/wheezyInstall/21.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New Partition" class="align-center" src="images/wheezyInstall/22.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/wheezyInstall/23.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/wheezyInstall/24.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Beginning" class="align-center" src="images/wheezyInstall/25.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Setting &lt;em&gt;Mount options&lt;/em&gt; to &lt;em&gt;noatime&lt;/em&gt; decreases write operations and boosts drive speed.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Partition settings" class="align-center" src="images/wheezyInstall/26.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/wheezyInstall/27.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New partition" class="align-center" src="images/wheezyInstall/28.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/wheezyInstall/29.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/wheezyInstall/30.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Beginning" class="align-center" src="images/wheezyInstall/31.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encrypt volume" class="align-center" src="images/wheezyInstall/32.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If the hard disk has not been securely wiped prior to installing Debian (using a utility like &lt;a class="reference external" href="multi-boot-usb.html"&gt;DBAN&lt;/a&gt;) you may want to configure &lt;em&gt;Erase data&lt;/em&gt; as &lt;em&gt;yes&lt;/em&gt;. Note, however, that depending on the size of the disk this operation can last several hours.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Random key" class="align-center" src="images/wheezyInstall/33.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/wheezyInstall/34.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New partition" class="align-center" src="images/wheezyInstall/35.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/wheezyInstall/36.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/wheezyInstall/37.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encrypt volume" class="align-center" src="images/wheezyInstall/38.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Passphrase" class="align-center" src="images/wheezyInstall/39.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure encrypted volumes" class="align-center" src="images/wheezyInstall/40.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Write changes to disk" class="align-center" src="images/wheezyInstall/41.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Create encrypted volumes" class="align-center" src="images/wheezyInstall/42.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Devices to encrypt" class="align-center" src="images/wheezyInstall/43.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish encrypt" class="align-center" src="images/wheezyInstall/44.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encryption passphrase" class="align-center" src="images/wheezyInstall/45.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify passphrase" class="align-center" src="images/wheezyInstall/46.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure encrypted volume" class="align-center" src="images/wheezyInstall/47.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition settings" class="align-center" src="images/wheezyInstall/48.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish partitioning" class="align-center" src="images/wheezyInstall/49.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Write changes to disk" class="align-center" src="images/wheezyInstall/50.png" style="width: 800px; height: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-packages-and-finish-up"&gt;
&lt;h2&gt;Step 3 - Install packages and finish up&lt;/h2&gt;
&lt;img alt="Popularity-contest" class="align-center" src="images/wheezyInstall/51.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Select only [*] &lt;em&gt;Standard system utilities&lt;/em&gt; if you want to start with a minimal foundation (no desktop) to build your own post-install custom Debian configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Software selection" class="align-center" src="images/wheezyInstall/52.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="GRUB" class="align-center" src="images/wheezyInstall/53.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish install" class="align-center" src="images/wheezyInstall/54.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="GRUB menu" class="align-center" src="images/wheezyInstall/544.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If an encrypted &lt;em&gt;home&lt;/em&gt; partition was created in Step 2 the system will display a passphrase prompt to unlock the partition.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Enter encrypt passphrase" class="align-center" src="images/wheezyInstall/55.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Login" class="align-center" src="images/wheezyInstall/56.png" style="width: 800px; height: 600px;" /&gt;
&lt;p&gt;Enjoy your fresh Debian!&lt;/p&gt;
&lt;p&gt;Add extra packages, stick with &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt; or move to &lt;tt class="docutils literal"&gt;testing&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;unstable&lt;/tt&gt; or maybe setup a &lt;a class="reference external" href="linux-home-server.html"&gt;home server&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
</summary><category term="debian"></category><category term="linux"></category></entry><entry><title>Install Arduino on Debian</title><link href="http://www.circuidipity.com/install-arduino-debian.html" rel="alternate"></link><updated>2013-10-04T00:00:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-10-04:install-arduino-debian.html</id><summary type="html">&lt;p&gt;I have been exploring the &lt;em&gt;Arduino Uno&lt;/em&gt; microcontroller board this week and it is proving a fun entry point to hardware hacking and programming.&lt;/p&gt;
&lt;p&gt;Installing the &lt;a class="reference external" href="http://playground.arduino.cc/Learning/Linux"&gt;Arduino development environment&lt;/a&gt; on Debian or Ubuntu involves ... 0) adding my USER to the &lt;tt class="docutils literal"&gt;dialout&lt;/tt&gt; group (and logging out and back in again for the change to take effect); 1) install package dependencies and; 2) download the Debian packages for Arduino for manual installation ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo adduser USER dialout
$ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install openjdk-7-jre avr-libc avrdude binutils-avr extra-xdg-menus gcc-avr libftdi1 libjna-java librxtx-java
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Versions of the Arduino software packaged for official Ubuntu and Debian releases are often outdated. Download the latest packages for &lt;a class="reference external" href="http://packages.debian.org/sid/arduino-core"&gt;arduino-core&lt;/a&gt; and &lt;a class="reference external" href="http://packages.debian.org/sid/arduino"&gt;arduino&lt;/a&gt; from Debian's &lt;tt class="docutils literal"&gt;unstable&lt;/tt&gt; branch and install manually ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dpkg -i arduino-core_VERSION_all.deb
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dpkg -i arduino_VERSION_all.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Connect the Uno to a computer via USB, open the Arduino IDE and confirm that the port setting is properly set to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Tools-&amp;gt;Serial&lt;/span&gt; &lt;span class="pre"&gt;Port-&amp;gt;/dev/ttyACM0&lt;/span&gt;&lt;/tt&gt;. Ready to go!&lt;/p&gt;
</summary><category term="arduino"></category><category term="electronics"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Device Tree and BeagleBone Black</title><link href="http://www.circuidipity.com/bbb-dt.html" rel="alternate"></link><updated>2013-09-08T00:00:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-09-08:bbb-dt.html</id><summary type="html">&lt;p&gt;In the world of x86 hardware a Linux distribution can ship a generic kernel and expect that it will load necessary drivers and run on a wide range of hardware. ARM embedded devices are a very different experience. Much of the hardware is not detected at boot and this has required creating a customized kernel for each device. &lt;em&gt;Device Tree&lt;/em&gt; is designed to address this shortcoming and the &lt;a class="reference external" href="getting-started-with-beaglebone-black.html"&gt;BeagleBone Black&lt;/a&gt; with its 3.8 kernel is one of the first ARM devices to embrace the new way of doing things.&lt;/p&gt;
&lt;div class="section" id="device-tree-and-arm"&gt;
&lt;h2&gt;Device Tree and ARM&lt;/h2&gt;
&lt;p&gt;Device Tree (DT) support for ARM arrived in the 3.7 kernel (it has existed for years in the PowerPC and SPARC worlds). Basically it is a method for describing the underlying hardware to the Linux kernel so that the required drivers will be loaded.&lt;/p&gt;
&lt;p&gt;On the BeagleBone Black a &lt;em&gt;device tree source&lt;/em&gt; (dts) file is written that describes a piece of hardware and a &lt;em&gt;device tree compiler&lt;/em&gt; (dtc) transforms the instructions into a &lt;em&gt;device tree blob&lt;/em&gt; (dtb) binary that can be used by the kernel. On the BBB there is a bunch of dtb binaries located in &lt;tt class="docutils literal"&gt;/boot&lt;/tt&gt; that describe the device to the kernel at boot time ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ls /boot/*.dtb&lt;/span&gt;
/boot/am335x-bone.dtb           /boot/am335x-tester.dtb    /boot/omap3-evm.dtb       /boot/omap4-panda.dtb
/boot/am335x-boneblack.dtb  /boot/omap2420-h4.dtb      /boot/omap3-tobi.dtb  /boot/omap4-sdp.dtb
/boot/am335x-evm.dtb            /boot/omap3-beagle-xm.dtb  /boot/omap4-panda-a4.dtb  /boot/omap4-var-som.dtb
/boot/am335x-evmsk.dtb          /boot/omap3-beagle.dtb     /boot/omap4-panda-es.dtb  /boot/omap5-evm.dtb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By implementing DT on the BeagleBone Black the device can receive and contribute back all the benefits of upstream kernel development and avoid the hassle of maintaining a custom kernel. Developers of expansion boards (known as &lt;em&gt;capes&lt;/em&gt; in BBB lingo) also benefit as Jason Kridner - co-founder of Beagleboard.org - &lt;a class="reference external" href="http://linuxgizmos.com/introducing-the-new-beaglebone-black-kernel/"&gt;points out&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
Where this [Device Tree implementation] pays off for us, is in the development of capes. By standardizing all of the logic in the kernel and providing the device tree information as data files, it becomes rather easy for a new cape developer to simply create a device tree description of their board and provide it to end users without them ever needing to recompile the kernel! As all of this gets documented, cape development is being greatly simplified and few cape developers should ever have to touch a line of code and end-users should rarely need to change their kernel binary itself based on simply using new capes.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="overlays"&gt;
&lt;h2&gt;Overlays&lt;/h2&gt;
&lt;p&gt;BBB also introduced the idea of &lt;em&gt;Device Tree Overlays&lt;/em&gt;. Overlays allow the device tree that was accessed by the kernel at boot to be modified afterwards in userspace. If a new piece of hardware like a cape is added to BBB or the onboard header pins are initialized/re-configured an overlay can enable the modifications without having to reboot. On the default &lt;em&gt;Angstrom&lt;/em&gt; Linux that ships with BBB there is a bunch of DT overlays already created and available for use in &lt;tt class="docutils literal"&gt;/lib/firmware&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;cape manager&lt;/em&gt; has been implemented to load and (in theory) unload overlays and &lt;em&gt;slots&lt;/em&gt; is its interface and can show us what is currently loaded ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat /sys/devices/bone_capemgr.8/slots
0: 54:PF---
1: 55:PF---
2: 56:PF---
3: 57:PF---
4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G
5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default the onboard storage and HDMI interface are loaded as &lt;em&gt;virtual capes&lt;/em&gt; and there are free slots for adding up to 4 additional physical capes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analog-inputs"&gt;
&lt;h2&gt;Analog Inputs&lt;/h2&gt;
&lt;p&gt;An example of overlays in action is loading the BeagleBone Black's analog inputs and making the pins available for use. We use the SLOTS interface a lot so export the location to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.profile&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# export SLOTS=/sys/devices/bone_capemgr.*/slots&lt;/span&gt;
&lt;span class="c"&gt;# echo &amp;#39;export SLOTS=/sys/devices/bone_capemgr.*/slots&amp;#39; &amp;gt;&amp;gt; ~/.profile&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BBB has a pre-configured DT overlay &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;BB-ADC-00A0.dtbo&lt;/span&gt;&lt;/tt&gt; for analog pins. Load the overlay (omitting the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-00A0.dtbo&lt;/span&gt;&lt;/tt&gt; bit) and see that $SLOTS registers a new cape and the kernel detects new hardware ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# echo BB-ADC &amp;gt; $SLOTS&lt;/span&gt;
&lt;span class="c"&gt;# cat $SLOTS&lt;/span&gt;
0: 54:PF---
1: 55:PF---
2: 56:PF---
3: 57:PF---
4: ff:P-O-L Bone-LT-eMMC-2G,00A0,Texas Instrument,BB-BONE-EMMC-2G
5: ff:P-O-L Bone-Black-HDMI,00A0,Texas Instrument,BB-BONELT-HDMI
7: ff:P-O-L Override Board Name,00A0,Override Manuf,BB-ADC
&lt;span class="c"&gt;# dmesg&lt;/span&gt;
...
&lt;span class="o"&gt;[&lt;/span&gt;37166.391913&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: part_number &lt;span class="s1"&gt;&amp;#39;BB-ADC&amp;#39;&lt;/span&gt;, version &lt;span class="s1"&gt;&amp;#39;N/A&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.392100&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: generic override&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.392151&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: bone: Using override eeprom data at slot 7
&lt;span class="o"&gt;[&lt;/span&gt;37166.392204&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: &amp;#39;Override Board Name,00A0,Override Manuf,BB-ADC&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.392478&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: Requesting part number/version based &amp;#39;BB-ADC-00A0.dtbo&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.392536&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: Requesting firmware &amp;#39;BB-ADC-00A0.dtbo&amp;#39; for board-name &amp;#39;Override Board Name&amp;#39;, version &amp;#39;00A0&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.392605&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: dtbo &amp;#39;BB-ADC-00A0.dtbo&amp;#39; loaded; converting to live tree&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.400854&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: #1 overlays&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;37166.423565&lt;span class="o"&gt;]&lt;/span&gt; bone-iio-helper helper.14: ready
&lt;span class="o"&gt;[&lt;/span&gt;37166.426252&lt;span class="o"&gt;]&lt;/span&gt; bone-capemgr bone_capemgr.8: slot &lt;span class="c"&gt;#7: Applied #1 overlays.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The analog input pins are now available for use.&lt;/p&gt;
&lt;p&gt;Example: If you connect a photoresistor to BBB's &lt;tt class="docutils literal"&gt;P9_32(1.8V)&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;P9_34(AGND)&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;P9_36(AIN5)&lt;/tt&gt; pins you can measure light levels in &lt;tt class="docutils literal"&gt;/sys/devices/ocp.2/helper.14/AIN5&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/sys/devices/ocp.2/44e0d000.tscadc/tiadc/iio\:device0/in_voltage5_raw&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Our BB-ADC dtbo above resides in slot 7. To unload we would run &lt;tt class="docutils literal"&gt;echo &lt;span class="pre"&gt;-7&lt;/span&gt; &amp;gt; $SLOTS&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;Unloading from $SLOTS is currently very unstable and can induce kernel panics. Much safer to simply reboot.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;To have this overlay load at boot time we add the option &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;capemgr.enable_partno=BB-ADC&lt;/span&gt;&lt;/tt&gt; to the &lt;tt class="docutils literal"&gt;uEnv.txt&lt;/tt&gt; file located on the &lt;tt class="docutils literal"&gt;/dev/mmcblk0p1&lt;/tt&gt; partition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="helpful-resources"&gt;
&lt;h2&gt;Helpful Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://devicetree.org/Device_Tree_Usage"&gt;Device Tree Usage&lt;/a&gt; and &lt;a class="reference external" href="https://lkml.org/lkml/2012/11/5/615"&gt;Device Tree Overlays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adafruit's introduction to the &lt;a class="reference external" href="http://learn.adafruit.com/introduction-to-the-beaglebone-black-device-tree?view=all"&gt;BBB Device Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://elinux.org/BeagleBone_and_the_3.8_Kernel"&gt;BeagleBone and the 3.8 Kernel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://derekmolloy.ie/tag/beaglebone-black/"&gt;Derek Molloy's&lt;/a&gt; tables for the &lt;a class="reference external" href="https://github.com/derekmolloy/boneDeviceTree/blob/master/docs/BeagleboneBlackP8HeaderTable.pdf?raw=true"&gt;P8&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/derekmolloy/boneDeviceTree/blob/master/docs/BeagleboneBlackP8HeaderTable.pdf?raw=true"&gt;P9&lt;/a&gt; header pins&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://derekmolloy.ie/gpios-on-the-beaglebone-black-using-device-tree-overlays/"&gt;GPIOs on the BBB using Device Tree Overlays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jadonk/validation-scripts/tree/master/test-capemgr"&gt;Capemgr and Device Tree Overlays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://beagleboard-gsoc13.blogspot.ca/2013/07/sampling-analogue-signals-using-adc-on.html"&gt;Sampling analog signals using the ADC&lt;/a&gt; on BBB&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="beaglebone"></category><category term="electronics"></category><category term="angstrom"></category><category term="linux"></category></entry><entry><title>BeagleBone Black: 'Say Hello to My Little LEDs'</title><link href="http://www.circuidipity.com/bbb-led.html" rel="alternate"></link><updated>2013-09-06T00:00:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-09-06:bbb-led.html</id><summary type="html">&lt;p&gt;Blinking an LED is the 'Hello World' of hardware. &lt;a class="reference external" href="getting-started-with-beaglebone-black.html"&gt;BeagleBone Black's&lt;/a&gt; LEDs can be controlled by the user and the device can be connected with external LEDs.&lt;/p&gt;
&lt;div class="section" id="built-in-leds"&gt;
&lt;h2&gt;Built-in LEDs&lt;/h2&gt;
&lt;p&gt;BBB has 4 onboard LEDs that serve as indicators for various bits of the hardware and their interfaces can be accessed under &lt;tt class="docutils literal"&gt;/sys/class/leds&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls /sys/class/leds/
beaglebone:green:usr0  beaglebone:green:usr1  beaglebone:green:usr2  beaglebone:green:usr3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The blinking 'heartbeat' LED that indicates BBB is alive and well is &lt;tt class="docutils literal"&gt;beaglebone:green:usr0&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## &amp;#39;trigger&amp;#39; determines what event is monitored&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;ls /sys/class/leds/beaglebone&lt;span class="se"&gt;\:&lt;/span&gt;green&lt;span class="se"&gt;\:&lt;/span&gt;usr0/
brightness  device  max_brightness  power  subsystem  trigger  uevent
&lt;span class="nv"&gt;$ &lt;/span&gt;cat /sys/class/leds/beaglebone&lt;span class="se"&gt;\:&lt;/span&gt;green&lt;span class="se"&gt;\:&lt;/span&gt;usr0/trigger
none nand-disk mmc0 mmc1 timer oneshot &lt;span class="o"&gt;[&lt;/span&gt;heartbeat&lt;span class="o"&gt;]&lt;/span&gt; backlight gpio cpu0 default-on transient

&lt;span class="c"&gt;## stop the heart&lt;/span&gt;
&lt;span class="c"&gt;# echo none &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/trigger&lt;/span&gt;

&lt;span class="c"&gt;## turn LED on (no blinking)&lt;/span&gt;
&lt;span class="c"&gt;# echo none &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/trigger&lt;/span&gt;
&lt;span class="c"&gt;# echo 1 &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/brightness&lt;/span&gt;

&lt;span class="c"&gt;## strobe LED (get BeagleBone&amp;#39;s heart racing at 20 &amp;#39;beats&amp;#39; per second)&lt;/span&gt;
&lt;span class="c"&gt;# echo timer &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/trigger&lt;/span&gt;
&lt;span class="c"&gt;# echo 25 &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/delay_off&lt;/span&gt;
&lt;span class="c"&gt;# echo 25 &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/delay_on&lt;/span&gt;

&lt;span class="c"&gt;## *whew* ... restore default heartbeat&lt;/span&gt;
&lt;span class="c"&gt;# echo heartbeat &amp;gt; /sys/class/leds/beaglebone\:green\:usr0/trigger&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-to-use-the-gpio-pins"&gt;
&lt;h2&gt;How to Use the GPIO Pins&lt;/h2&gt;
&lt;p&gt;BeagleBone Black has 65 &lt;em&gt;General Purpose Input/Output (GPIO)&lt;/em&gt; pins distributed on the board's P8 and P9 headers. These software-controlled pins can be configured to work with external hardware and are accessed through the Linux kernel's GPIO interfaces under &lt;tt class="docutils literal"&gt;/sys/class/gpio&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ls /sys/class/gpio/
&lt;span class="nb"&gt;export      &lt;/span&gt;gpiochip0  gpiochip32  gpiochip64  gpiochip96  unexport
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What can be confusing at first glance is that a pin's number on the BeagleBone header and its GPIO number are different. Each &lt;tt class="docutils literal"&gt;gpiochipX&lt;/tt&gt; controls 32 pins and is used to calculate the GPIO address of a pin (some of the GPIO pins are dedicated to BBB's onboard hardware and unavailable by default).&lt;/p&gt;
&lt;p&gt;Example: Pin &lt;tt class="docutils literal"&gt;P8_12&lt;/tt&gt; is controlled by &lt;tt class="docutils literal"&gt;gpio1[12]&lt;/tt&gt; which translates as pin 12 on the second controller (starting from zero) ... (32 * 1) + 12 = 44. To &lt;em&gt;add&lt;/em&gt; a pin for use I map GPIO_44 into the filesystem by echoing its pin number to the GPIO &lt;tt class="docutils literal"&gt;export&lt;/tt&gt; file ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# echo 44 &amp;gt; /sys/class/gpio/export&lt;/span&gt;
&lt;span class="c"&gt;# ls /sys/class/gpio/&lt;/span&gt;
&lt;span class="nb"&gt;export      &lt;/span&gt;gpio44  gpiochip0  gpiochip32  gpiochip64  gpiochip96  unexport
&lt;span class="c"&gt;# ls /sys/class/gpio/gpio44/&lt;/span&gt;
active_low  direction  edge  power  subsystem  uevent  value
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and a new &lt;tt class="docutils literal"&gt;gpio44&lt;/tt&gt; directory is created and the pin is available for work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="breadboard-blinking-led"&gt;
&lt;h2&gt;Breadboard Blinking LED&lt;/h2&gt;
&lt;img alt="BBB and Breadboard" src="images/bbb-ledzilla.jpg" /&gt;
&lt;p&gt;For my external LED experiment I use:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;red LED&lt;/li&gt;
&lt;li&gt;breadboard&lt;/li&gt;
&lt;li&gt;470 ohm resistor&lt;/li&gt;
&lt;li&gt;2 jumper wires&lt;/li&gt;
&lt;li&gt;penguin (optional)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Header pins &lt;tt class="docutils literal"&gt;P8_1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;P8_2&lt;/tt&gt; are both &lt;tt class="docutils literal"&gt;GND&lt;/tt&gt;. Connect &lt;tt class="docutils literal"&gt;P8_2&lt;/tt&gt; to the LED cathode and our newly-enabled &lt;tt class="docutils literal"&gt;GPIO_44&lt;/tt&gt; pin (&lt;tt class="docutils literal"&gt;P8_12&lt;/tt&gt;) to the LED anode.&lt;/p&gt;
&lt;p&gt;To turn the LED on and off I input settings HIGH and LOW ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;## ON&lt;/span&gt;
&lt;span class="c"&gt;# echo high &amp;gt; /sys/class/gpio/gpio44/direction&lt;/span&gt;
&lt;span class="c"&gt;## OFF&lt;/span&gt;
&lt;span class="c"&gt;# echo low &amp;gt; /sys/class/gpio/gpio44/direction&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I created a tiny shell script to blink the LED ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;
&lt;span class="c"&gt;# Blink an LED on breadboard&lt;/span&gt;

&lt;span class="nv"&gt;PIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;44&amp;quot;&lt;/span&gt; &lt;span class="c"&gt;# P8_12 is gpio1[12] = (32 * 1) + 12 = 44&lt;/span&gt;
&lt;span class="nv"&gt;GPIOPIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/sys/class/gpio/gpio$PIN&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;$GPIOPIN&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Blinking LED connected to Pin $PIN ...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$PIN&lt;/span&gt; &amp;gt; /sys/class/gpio/export
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Blinking LED connected to Pin $PIN ...&amp;quot;&lt;/span&gt;
    sleep 1
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;; &lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo &lt;/span&gt;high &amp;gt; &lt;span class="nv"&gt;$GPIOPIN&lt;/span&gt;/direction
    sleep 2
    &lt;span class="nb"&gt;echo &lt;/span&gt;low &amp;gt; &lt;span class="nv"&gt;$GPIOPIN&lt;/span&gt;/direction
    sleep 2
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-C&lt;/span&gt;&lt;/tt&gt; to kill the script.&lt;/p&gt;
&lt;p&gt;To &lt;em&gt;remove&lt;/em&gt; a GPIO pin from use simply &lt;tt class="docutils literal"&gt;unexport&lt;/tt&gt; the pin ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# echo 44 &amp;gt; /sys/class/gpio/unexport&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="helpful-resources"&gt;
&lt;h2&gt;Helpful Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Linux Kernel &lt;a class="reference external" href="https://www.kernel.org/doc/Documentation/gpio.txt"&gt;GPIO Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adafruit's &lt;a class="reference external" href="http://learn.adafruit.com/blinking-an-led-with-beaglebone-black/overview"&gt;Blinking an LED with BBB&lt;/a&gt; tutorial using Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://derekmolloy.ie/tag/beaglebone-black/"&gt;Derek Molloy's&lt;/a&gt; tables for the &lt;a class="reference external" href="https://github.com/derekmolloy/boneDeviceTree/blob/master/docs/BeagleboneBlackP8HeaderTable.pdf?raw=true"&gt;P8&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/derekmolloy/boneDeviceTree/blob/master/docs/BeagleboneBlackP8HeaderTable.pdf?raw=true"&gt;P9&lt;/a&gt; header pins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="beaglebone"></category><category term="electronics"></category><category term="angstrom"></category><category term="linux"></category></entry></feed>