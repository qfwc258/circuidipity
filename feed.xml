<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Circuidipity</title><link href="http://www.circuidipity.com/" rel="alternate"></link><link href="http://www.circuidipity.com/feed.xml" rel="self"></link><id>http://www.circuidipity.com/</id><updated>2015-02-03T00:10:00-05:00</updated><entry><title>Backup /home</title><link href="http://www.circuidipity.com/backup-home.html" rel="alternate"></link><updated>2015-02-03T00:10:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-02-03:backup-home.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi Home Server Hack #3 &amp;gt;&amp;gt;&lt;/a&gt; Make automatic backups of &lt;tt class="docutils literal"&gt;/home&lt;/tt&gt; using a dash of shell scripting + rsync + SSH + cron!&lt;/p&gt;
&lt;p&gt;One of the advantages of setting up a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Linux home server&lt;/a&gt; is providing an always-available location to store backups of important files. A little peace of mind can be gained in a few steps as I describe the simple backup solution I use to automatically mirror my Chromebook's home directory on the local area network (LAN) server.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;0. SSH&lt;/h3&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;Raspberry Pi Home Server Hack #1 -- Secure remote access using SSH keys&lt;/a&gt; to configure SSH for encrypted connections between (Pi) server and (Chromebook) client. &lt;tt class="docutils literal"&gt;Keychain&lt;/tt&gt; + &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-agent&lt;/span&gt;&lt;/tt&gt;  make it easy to use a passphrase-protected &lt;strong&gt;encryption key&lt;/strong&gt; in automated scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="script"&gt;
&lt;h3&gt;1. Script&lt;/h3&gt;
&lt;div class="section" id="on-the-server"&gt;
&lt;h4&gt;On the server:&lt;/h4&gt;
&lt;p&gt;Create a backup directory to hold the contents of &lt;tt class="docutils literal"&gt;$HOME&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/backup-home
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-client"&gt;
&lt;h4&gt;On the client:&lt;/h4&gt;
&lt;p&gt;Create a backup script that uses the &lt;tt class="docutils literal"&gt;rsync&lt;/tt&gt; file-copy tool. A sample &lt;tt class="docutils literal"&gt;myRsync&lt;/tt&gt; script to backup &lt;tt class="docutils literal"&gt;$HOME&lt;/tt&gt; includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;load the details of the SSH key stored in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.keychain/$HOSTNAME-sh&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;mirror &lt;tt class="docutils literal"&gt;$HOME/&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SERVER_ADDR:~/backup-home/&lt;/span&gt;&lt;/tt&gt; using options &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--archive&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--delete&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;exclude certain items from the backup like &lt;tt class="docutils literal"&gt;cache&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;trash&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class="warning"&gt;WARNING!&lt;/span&gt; Take care nothing important is wiped out using &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--delete&lt;/span&gt;&lt;/tt&gt;. First run &lt;tt class="docutils literal"&gt;rsync&lt;/tt&gt; in a console with option &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--dry-run&lt;/span&gt;&lt;/tt&gt; to test settings (example SERVER_ADDR &lt;tt class="docutils literal"&gt;pi&amp;#64;192.168.1.88&lt;/tt&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;rsync --verbose --archive --delete --dry-run &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/ pi@192.168.1.88:~/backup-home/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sample script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# ~/bin/myRsync&lt;/span&gt;
&lt;span class="nv"&gt;ssh_agent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${HOME}/.keychain/$HOSTNAME-sh&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;rsync_options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--verbose --archive --delete&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;rsync_exclude&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--exclude=*[Cc]ache* --exclude=*[Tt]rash*&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;rsync_src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${HOME}/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;rsync_dest&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pi@192.168.1.88:~/backup_home/&amp;quot;&lt;/span&gt;

. &lt;span class="nv"&gt;$ssh_agent&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;date&lt;span class="k"&gt;)&lt;/span&gt;
rsync &lt;span class="nv"&gt;$rsync_options&lt;/span&gt; &lt;span class="nv"&gt;$rsync_exclude&lt;/span&gt; &lt;span class="nv"&gt;$rsync_src&lt;/span&gt; &lt;span class="nv"&gt;$rsync_dest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Place the script in &lt;tt class="docutils literal"&gt;$HOME/bin&lt;/tt&gt; and make it executable. Run manually at least once to test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod 744 ~/bin/myRsync
&lt;span class="nv"&gt;$ &lt;/span&gt;~/bin/myRsync
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="automate"&gt;
&lt;h3&gt;2. Automate&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cron&lt;/strong&gt; is a daemon that runs programs at specified times. Use the command &lt;tt class="docutils literal"&gt;crontab &lt;span class="pre"&gt;-e&lt;/span&gt;&lt;/tt&gt; to setup &lt;tt class="docutils literal"&gt;myRsync&lt;/tt&gt; to auto-run with the following parameters:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;perform a daily backup at &lt;tt class="docutils literal"&gt;23:55&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;log program activity by redirecting output to &lt;tt class="docutils literal"&gt;/home/my_username/cron.log&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# To define the time you can provide concrete values for&lt;/span&gt;
&lt;span class="c"&gt;# minute (m), hour (h), day of month (dom), month (mon),&lt;/span&gt;
&lt;span class="c"&gt;# and day of week (dow) or use &amp;#39;*&amp;#39; in these fields (for &amp;#39;any&amp;#39;).#&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# Output of the crontab jobs (including errors) is sent through&lt;/span&gt;
&lt;span class="c"&gt;# email to the user the crontab file belongs to (unless redirected).&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# For more information see the manual pages of crontab(5) and cron(8)&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# m h  dom mon dow   command&lt;/span&gt;

&lt;span class="c"&gt;# Daily backup of $HOME to the netbook server&lt;/span&gt;
55 23 * * * /home/my_username/bin/myRsync &amp;gt;&amp;gt; /home/my_username/cron.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I stashed a more complete &lt;tt class="docutils literal"&gt;myRsync&lt;/tt&gt; &lt;a class="reference external" href="https://github.com/vonbrownie/linux-home-bin/blob/master/myRsync"&gt;script on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="networks"></category><category term="linux"></category><category term="shell"></category><category term="programming"></category><category term="github"></category></entry><entry><title>Secure remote access using SSH keys</title><link href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html" rel="alternate"></link><updated>2015-02-02T00:05:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-02-02:secure-remote-access-using-ssh-keys.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi Home Server Hack #1 &amp;gt;&amp;gt;&lt;/a&gt; Create cryptographic keys and disable password logins to make remote machines more secure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;OpenSSH&lt;/strong&gt; is a toolkit for securing communication with Unix-like remote machines and services and supports authenticating users with a public and private &lt;strong&gt;key pair&lt;/strong&gt;. Michael Lucas, author of &lt;a class="reference external" href="https://www.michaelwlucas.com/nonfiction/ssh-mastery"&gt;OpenSSH Mastery&lt;/a&gt;, describes the risk of passwords in SSH:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For the last few years, a network of compromised machines dubbed the &amp;quot;Hail Mary Cloud&amp;quot; has scanned the Internet for SSH servers. When a member of this cloud finds an SSH server, it lets the other machines in the network know about it. The cloud then methodically tries possible usernames and passwords. One host on the network tries a few times, then another, then another. Blocking individual IP addresses is not a useful defense, because each address is used only a few times.&lt;/p&gt;
&lt;p&gt;Any one attempt has low odds of guessing successfully. The attempts are constant. They never end. Eventually [some automated attacker] will get lucky and break into your server. It might be tomorrow, or next year, but it _will_ happen. To stop these types of attacks, you can either use packet filtering to block public access to your SSH server, or you can eliminate passwords on your servers. User keys let you eliminate passwords.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="section" id="to-configure-ssh-key-authentication-between-a-home-server-and-client"&gt;
&lt;h2&gt;To configure SSH key authentication between a home server and client:&lt;/h2&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;0. Install&lt;/h3&gt;
&lt;p&gt;Home server is a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi running Raspbian&lt;/a&gt; and client is a &lt;a class="reference external" href="http://www.circuidipity.com/c720-lubuntubook.html"&gt;Chromebook running Lubuntu 14.04&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="on-the-server"&gt;
&lt;h4&gt;On the server:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;openssh-server&lt;/span&gt;&lt;/tt&gt; (pre-installed in Raspbian) and create an SSH configuration in the home directory of users who requires access to the system:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install openssh-server
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 700 ~/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch ~/.ssh/authorized_keys &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 600 ~/.ssh/authorized_keys
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;collect key fingerprints from the server:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -lf /etc/ssh/ssh_host_dsa_key.pub &amp;gt;&amp;gt; ~/.ssh/keys.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -lf /etc/ssh/ssh_host_ecdsa_key.pub &amp;gt;&amp;gt; ~/.ssh/keys.txt
&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub &amp;gt;&amp;gt; ~/.ssh/keys.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and give &lt;tt class="docutils literal"&gt;keys.txt&lt;/tt&gt; to users to compare signature when connecting for the first time&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;optional:&lt;/strong&gt; edit &lt;tt class="docutils literal"&gt;/etc/ssh/sshd_config&lt;/tt&gt; adding specific users to be granted system access (&lt;strong&gt;disabling&lt;/strong&gt; all others by default):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;AllowUsers USERNAME1 USERNAME2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and restart SSH with the new config by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo /etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-client"&gt;
&lt;h4&gt;On the client:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;openssh-client&lt;/span&gt;&lt;/tt&gt; and create the SSH folder in the user home directory:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install openssh-client
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/.ssh &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod 700 ~/.ssh
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;optional:&lt;/strong&gt; create an entry in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.ssh/config&lt;/span&gt;&lt;/tt&gt; with the login options for a server - for example:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Host raspberry
HostName 192.168.1.88
Port 22
User pi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="generate-keys"&gt;
&lt;h3&gt;1. Generate keys&lt;/h3&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;On the client:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;generate keys by running:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-keygen -t rsa -C &lt;span class="s2"&gt;&amp;quot;$(whoami)@$(hostname)-$(date -I)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;upload the public key to the server and append it to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.ssh/authorized_keys&lt;/span&gt;&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cat ~/.ssh/id_rsa.pub | ssh SERVER &lt;span class="s2"&gt;&amp;quot;cat &amp;gt;&amp;gt; ~/.ssh/authorized_keys&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="test"&gt;
&lt;h3&gt;2. Test&lt;/h3&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;On the client:&lt;/h4&gt;
&lt;p&gt;Graphical display managers like &lt;tt class="docutils literal"&gt;gdm&lt;/tt&gt; will automatically check a user account for SSH keys upon login. A pop-up box will prompt for the passphrase and the key will be added to the desktop session.&lt;/p&gt;
&lt;p&gt;If logging into a console, tell SSH that you have keys by running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-add&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh-add
&lt;span class="nv"&gt;$ &lt;/span&gt;Enter passphrase &lt;span class="k"&gt;for&lt;/span&gt; /home/gaff/.ssh/id_rsa:
Identity added: /home/gaff/.ssh/id_rsa &lt;span class="o"&gt;(&lt;/span&gt;/home/gaff/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All SSH sessions launched from this console will access this user key stored in memory. Make sure to test the connection before disabling password logins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh 192.168.1.88
Last login: Thu Sep 11 23:46:28 2014 from kambei.lan
&lt;span class="nv"&gt;$ &lt;/span&gt;uname -n
pi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No request to enter a passphrase indicates SSH key authentication is properly configured.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="disable-password-logins"&gt;
&lt;h3&gt;3. Disable password logins&lt;/h3&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;On the server:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;edit &lt;tt class="docutils literal"&gt;/etc/ssh/sshd_config&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PubkeyAuthentication yes
ChallengeResponseAuthentication no
PasswordAuthentication no
UsePAM no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and restart the SSH server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo /etc/init.d/ssh restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="key-management"&gt;
&lt;h3&gt;4. Key management&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.funtoo.org/Keychain"&gt;Keychain&lt;/a&gt; is an OpenSSH key manager. From the package description:&lt;/p&gt;
&lt;blockquote&gt;
When keychain is run, it checks for a running ssh-agent, otherwise it starts one. It saves the ssh-agent environment variables to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.keychain/$HOSTNAME-sh&lt;/span&gt;&lt;/tt&gt;, so that subsequent logins and non-interactive shells such as cron jobs can source the file and make passwordless ssh connections.  In addition, when keychain runs, it verifies that the key files specified on the command-line are known to ssh-agent, otherwise it loads them, prompting you for a password if necessary.&lt;/blockquote&gt;
&lt;div class="section" id="id4"&gt;
&lt;h4&gt;On the client:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;install:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install keychain
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;configure &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# setup keychain - ssh-agent management&lt;/span&gt;
keychain ~/.ssh/id_rsa
. ~/.keychain/&lt;span class="nv"&gt;$HOSTNAME&lt;/span&gt;-sh
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;flush all cached keys from memory with:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;keychain --clear
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;if using &lt;a class="reference external" href="http://www.circuidipity.com/tmux.html"&gt;tmux&lt;/a&gt; enable persistent SSH key management across sessions by editing &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.tmux.conf&lt;/span&gt;&lt;/tt&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;set&lt;/span&gt;-option -g update-environment &lt;span class="s2"&gt;&amp;quot;DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="networks"></category><category term="linux"></category></entry><entry><title>There's no place like [a Raspberry Pi] Home [Server]</title><link href="http://www.circuidipity.com/raspberry-pi-home-server.html" rel="alternate"></link><updated>2015-02-03T00:02:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-02-01:raspberry-pi-home-server.html</id><summary type="html">&lt;img alt="Raspberry Pi Home Server" class="align-right" src="images/raspberry-pi-home-server.png" style="width: 300px; height: 300px;" /&gt;
&lt;p&gt;&lt;em&gt;Work-in-progress&lt;/em&gt;: Running your own Linux-powered &lt;strong&gt;home server&lt;/strong&gt; is a fun learning experience about how networks work and using a &lt;a class="reference external" href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; is a cheap and cheerful way to get the job done!&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;ol class="arabic simple" start="0"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.circuidipity.com/run-a-raspberry-pi-from-external-usb-storage.html"&gt;Move the root filesystem to external USB storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;Secure remote access using SSH keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.circuidipity.com/tmux.html"&gt;Multiple terminal windows using tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.circuidipity.com/backup-home.html"&gt;Backup /home&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="raspberry pi"></category><category term="networks"></category></entry><entry><title>Run a Raspberry Pi from external USB storage</title><link href="http://www.circuidipity.com/run-a-raspberry-pi-from-external-usb-storage.html" rel="alternate"></link><updated>2015-01-31T22:41:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-01-29:run-a-raspberry-pi-from-external-usb-storage.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi Home Server Hack #0 &amp;gt;&amp;gt;&lt;/a&gt; I am exploring the use of my Raspberry Pi as a 24/7 uptime &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;home server&lt;/a&gt;, and one of the hacks I wish to add is using Pi as a cheap and cheerful &lt;strong&gt;network attached storage&lt;/strong&gt; (NAS) device. Hmmm... How about using that USB hard drive I connect for NAS and move over the Pi root filesystem and run it from there as well? I imagine an always-on Pi would enjoy more robust performance from a hard drive than an SD card.&lt;/p&gt;
&lt;p&gt;Thanks to all the contributors &lt;a class="reference external" href="http://www.raspberrypi.org/forums/viewtopic.php?f=29&amp;amp;t=44177"&gt;on this discussion thread&lt;/a&gt; I put my plan in motion using:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raspberry Pi Model B&lt;/li&gt;
&lt;li&gt;5V 1A microUSB power adapter&lt;/li&gt;
&lt;li&gt;ethernet cable&lt;/li&gt;
&lt;li&gt;Raspbian Linux&lt;/li&gt;
&lt;li&gt;SD card (for /boot)&lt;/li&gt;
&lt;li&gt;1TB powered USB hard drive&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;div class="section" id="raspbian-linux"&gt;
&lt;h3&gt;0. Raspbian Linux&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://downloads.raspberrypi.org/raspbian_latest"&gt;Download&lt;/a&gt; and unpack Raspbian and write the image to a spare 4GB+ SD card:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo dd &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1M &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YYYY-MM-DD-wheezy-raspbian.img &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sdX
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sync
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sources: &lt;a class="reference external" href="http://www.raspberrypi.org/downloads/"&gt;operating system images&lt;/a&gt;, installing &lt;a class="reference external" href="http://www.raspberrypi.org/documentation/installation/installing-images/linux.md"&gt;images on Linux&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="raspi-config"&gt;
&lt;h3&gt;1. Raspi-config&lt;/h3&gt;
&lt;p&gt;Boot the Pi with the newly-minted Raspbian SD card and set a few options in the &lt;strong&gt;raspi-config&lt;/strong&gt; utility:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;4 Internationalisation Options
    * Change Locale
    * Change Timezone
8 Advanced Options
    * Hostname
    * Memory Split  &lt;span class="c"&gt;# default is GPU=64MB, for a headless server set GPU=16MB and free more memory for the CPU&lt;/span&gt;
    * SSH           &lt;span class="c"&gt;# enable SSH server at boot to permit login to Pi over LAN&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save the new parameters and reboot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partitions"&gt;
&lt;h3&gt;2. Partitions&lt;/h3&gt;
&lt;p&gt;Filesystem layout on the SD card:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;df -h
Filesystem      Size  Used Avail Use% Mounted on
rootfs          2.9G  2.4G  401M  86% /
/dev/root       2.9G  2.4G  401M  86% /
devtmpfs        239M     0  239M   0% /dev
tmpfs            49M  232K   49M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs            97M     0   97M   0% /run/shm
/dev/mmcblk0p1   56M  9.7M   47M  18% /boot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I connect my 1TB USB drive to Pi and confirm device detection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;lsusb
Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp.
Bus 001 Device 005: ID 152d:2329 JMicron Technology Corp. / JMicron USA Technology Corp. JM20329 SATA Bridge
&lt;span class="nv"&gt;$ &lt;/span&gt;dmesg
&lt;span class="o"&gt;[&lt;/span&gt; ... &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; 1000.758503&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: new high-speed USB device number 5 using dwc_otg
&lt;span class="o"&gt;[&lt;/span&gt; 1000.879972&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: New USB device found, &lt;span class="nv"&gt;idVendor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;152d, &lt;span class="nv"&gt;idProduct&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2329
&lt;span class="o"&gt;[&lt;/span&gt; 1000.880010&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: New USB device strings: &lt;span class="nv"&gt;Mfr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1, &lt;span class="nv"&gt;Product&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;2, &lt;span class="nv"&gt;SerialNumber&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5
&lt;span class="o"&gt;[&lt;/span&gt; 1000.880026&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: Product: USB to ATA/ATAPI bridge
&lt;span class="o"&gt;[&lt;/span&gt; 1000.880043&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: Manufacturer: JMicron
&lt;span class="o"&gt;[&lt;/span&gt; 1000.880057&lt;span class="o"&gt;]&lt;/span&gt; usb 1-1.3: SerialNumber: DCA5968053FF
&lt;span class="o"&gt;[&lt;/span&gt; 1000.887271&lt;span class="o"&gt;]&lt;/span&gt; usb-storage 1-1.3:1.0: USB Mass Storage device detected
&lt;span class="o"&gt;[&lt;/span&gt; 1000.892548&lt;span class="o"&gt;]&lt;/span&gt; usb-storage 1-1.3:1.0: Quirks match &lt;span class="k"&gt;for &lt;/span&gt;vid 152d pid 2329: 8020
&lt;span class="o"&gt;[&lt;/span&gt; 1000.892761&lt;span class="o"&gt;]&lt;/span&gt; scsi0 : usb-storage 1-1.3:1.0
&lt;span class="o"&gt;[&lt;/span&gt; 1001.928635&lt;span class="o"&gt;]&lt;/span&gt; scsi 0:0:0:0: Direct-Access     WDC WD10 EARS-00Y5B1           PQ: 0 ANSI: 2 CCS
&lt;span class="o"&gt;[&lt;/span&gt; 1001.932571&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; 1953525168 512-byte logical blocks: &lt;span class="o"&gt;(&lt;/span&gt;1.00 TB/931 GiB&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; 1001.933328&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Write Protect is off
&lt;span class="o"&gt;[&lt;/span&gt; 1001.933365&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Mode Sense: 28 00 00 00
&lt;span class="o"&gt;[&lt;/span&gt; 1001.934066&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; No Caching mode page found
&lt;span class="o"&gt;[&lt;/span&gt; 1001.934096&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Assuming drive cache: write through
&lt;span class="o"&gt;[&lt;/span&gt; 1001.936947&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; No Caching mode page found
&lt;span class="o"&gt;[&lt;/span&gt; 1001.936984&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Assuming drive cache: write through
&lt;span class="o"&gt;[&lt;/span&gt; 1001.984646&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: Attached scsi generic sg0 &lt;span class="nb"&gt;type &lt;/span&gt;0
&lt;span class="o"&gt;[&lt;/span&gt; 1002.344655&lt;span class="o"&gt;]&lt;/span&gt;  sda: sda1
&lt;span class="o"&gt;[&lt;/span&gt; 1002.365186&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; No Caching mode page found
&lt;span class="o"&gt;[&lt;/span&gt; 1002.365227&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Assuming drive cache: write through
&lt;span class="o"&gt;[&lt;/span&gt; 1002.365255&lt;span class="o"&gt;]&lt;/span&gt; sd 0:0:0:0: &lt;span class="o"&gt;[&lt;/span&gt;sda&lt;span class="o"&gt;]&lt;/span&gt; Attached SCSI disk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Device is &lt;tt class="docutils literal"&gt;sda&lt;/tt&gt;. Use &lt;strong&gt;fdisk&lt;/strong&gt; to create 2 new partitions on the USB drive:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sda1 - 20GB - Pi root filesystem&lt;/li&gt;
&lt;li&gt;sda2 - remaining space - file storage&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo fdisk /dev/sda

Command &lt;span class="o"&gt;(&lt;/span&gt;m &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: p

Disk /dev/sda: 1000.2 GB, 1000204886016 bytes
255 heads, 63 sectors/track, 121601 cylinders, total 1953525168 sectors
&lt;span class="nv"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sectors of 1 * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disk identifier: 0x00000000

Device Boot      Start         End      Blocks   Id  System

Command &lt;span class="o"&gt;(&lt;/span&gt;m &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: n
Partition &lt;span class="nb"&gt;type&lt;/span&gt;:
  p   primary &lt;span class="o"&gt;(&lt;/span&gt;0 primary, 0 extended, 4 free&lt;span class="o"&gt;)&lt;/span&gt;
  e   extended
Select &lt;span class="o"&gt;(&lt;/span&gt;default p&lt;span class="o"&gt;)&lt;/span&gt;: p
Partition number &lt;span class="o"&gt;(&lt;/span&gt;1-4, default 1&lt;span class="o"&gt;)&lt;/span&gt;:
Using default value 1
First sector &lt;span class="o"&gt;(&lt;/span&gt;2048-1953525167, default 2048&lt;span class="o"&gt;)&lt;/span&gt;:
Using default value 2048
Last sector, +sectors or +size&lt;span class="o"&gt;{&lt;/span&gt;K,M,G&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;2048-1953525167, default 1953525167&lt;span class="o"&gt;)&lt;/span&gt;: +20G

Command &lt;span class="o"&gt;(&lt;/span&gt;m &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: n
Partition &lt;span class="nb"&gt;type&lt;/span&gt;:
  p   primary &lt;span class="o"&gt;(&lt;/span&gt;1 primary, 0 extended, 3 free&lt;span class="o"&gt;)&lt;/span&gt;
  e   extended
Select &lt;span class="o"&gt;(&lt;/span&gt;default p&lt;span class="o"&gt;)&lt;/span&gt;: p
Partition number &lt;span class="o"&gt;(&lt;/span&gt;1-4, default 2&lt;span class="o"&gt;)&lt;/span&gt;:
Using default value 2
First sector &lt;span class="o"&gt;(&lt;/span&gt;41945088-1953525167, default 41945088&lt;span class="o"&gt;)&lt;/span&gt;:
Using default value 41945088
Last sector, +sectors or +size&lt;span class="o"&gt;{&lt;/span&gt;K,M,G&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;41945088-1953525167, default 1953525167&lt;span class="o"&gt;)&lt;/span&gt;:
Using default value 1953525167

Command &lt;span class="o"&gt;(&lt;/span&gt;m &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: p

Disk /dev/sda: 1000.2 GB, 1000204886016 bytes
255 heads, 63 sectors/track, 121601 cylinders, total 1953525168 sectors
&lt;span class="nv"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sectors of 1 * &lt;span class="nv"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class="o"&gt;(&lt;/span&gt;logical/physical&lt;span class="o"&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
I/O size &lt;span class="o"&gt;(&lt;/span&gt;minimum/optimal&lt;span class="o"&gt;)&lt;/span&gt;: 512 bytes / 512 bytes
Disk identifier: 0x00000000

Device Boot      Start         End      Blocks   Id  System
/dev/sda1            2048    41945087    20971520   83  Linux
/dev/sda2        41945088  1953525167   955790040   83  Linux

Command &lt;span class="o"&gt;(&lt;/span&gt;m &lt;span class="k"&gt;for &lt;/span&gt;&lt;span class="nb"&gt;help&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;: w
The partition table has been altered!

Calling ioctl&lt;span class="o"&gt;()&lt;/span&gt; to re-read partition table.
Syncing disks.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="filesystems"&gt;
&lt;h3&gt;3. Filesystems&lt;/h3&gt;
&lt;p&gt;Format the new partitions as &lt;tt class="docutils literal"&gt;ext4&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mke2fs -t ext4 -L rootfs /dev/sda1
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mke2fs -t ext4 -L storage /dev/sda2
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dev-root"&gt;
&lt;h3&gt;4. /dev/root&lt;/h3&gt;
&lt;p&gt;Mount the newly-formatted &lt;tt class="docutils literal"&gt;rootfs&lt;/tt&gt; partition to &lt;tt class="docutils literal"&gt;/mnt&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mount -t ext4 /dev/sda1 /mnt
&lt;span class="nv"&gt;$ &lt;/span&gt;df -h
Filesystem      Size  Used Avail Use% Mounted on
rootfs          2.9G  2.4G  401M  86% /
/dev/root       2.9G  2.4G  401M  86% /
devtmpfs        239M     0  239M   0% /dev
tmpfs            49M  220K   49M   1% /run
tmpfs           5.0M     0  5.0M   0% /run/lock
tmpfs            97M     0   97M   0% /run/shm
/dev/mmcblk0p1   56M  9.7M   47M  18% /boot
/dev/sda1        20G   44M   19G   1% /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;strong&gt;rsync&lt;/strong&gt; to copy contents of &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; on the SD card to the &lt;tt class="docutils literal"&gt;rootfs&lt;/tt&gt; partition on the USB device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo rsync -axv / /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="new-rootfs"&gt;
&lt;h3&gt;5. New rootfs&lt;/h3&gt;
&lt;p&gt;Modify options in &lt;tt class="docutils literal"&gt;/boot/cmdline.txt&lt;/tt&gt; - located on the &lt;strong&gt;SD card&lt;/strong&gt; - to point the bootloader to &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; filesystem on the USB device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Original:
dwc_otg.lpm_enable&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ttyAMA0,115200 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty1 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/mmcblk0p2 &lt;span class="nv"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ext4 &lt;span class="nv"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deadline rootwait

Modified:
dwc_otg.lpm_enable&lt;span class="o"&gt;=&lt;/span&gt;0 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ttyAMA0,115200 &lt;span class="nv"&gt;console&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tty1 &lt;span class="nv"&gt;root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/sda1 &lt;span class="nv"&gt;rootfstype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;ext4 &lt;span class="nv"&gt;elevator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;deadline rootwait &lt;span class="nv"&gt;rootdelay&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fstab"&gt;
&lt;h3&gt;6. fstab&lt;/h3&gt;
&lt;p&gt;Create new mountpoint for the &lt;tt class="docutils literal"&gt;storage&lt;/tt&gt; partition:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo mkdir /media/USB0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify options in &lt;tt class="docutils literal"&gt;/mnt/etc/fstab&lt;/tt&gt; - located on the &lt;strong&gt;USB device&lt;/strong&gt; - to mount &lt;tt class="docutils literal"&gt;rootfs&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;storage&lt;/tt&gt; partitions &lt;a class="footnote-reference" href="#id2" id="id1"&gt;[1]&lt;/a&gt; at boot. Sample configuration for &lt;tt class="docutils literal"&gt;sda1&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;sda2&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;proc            /proc           proc    defaults          0       0
/dev/mmcblk0p1  /boot           vfat    defaults          0       2
&lt;span class="c"&gt;# partitions on USB&lt;/span&gt;
/dev/sda1   /       ext4    defaults,noatime  0       1
/dev/sda2   /media/USB0  ext4    defaults,noatime  0       0
&lt;span class="c"&gt;# comment out root filesystem on SD card&lt;/span&gt;
&lt;span class="c"&gt;#/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1&lt;/span&gt;
&lt;span class="c"&gt;# a swapfile is not a swap partition, so no using swapon|off from here on, use  dphys-swapfile swap[on|off]  for that&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reboot"&gt;
&lt;h3&gt;7. Reboot&lt;/h3&gt;
&lt;p&gt;Save modifications and reboot. Login and check the new filesystem layout:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;df -h
Filesystem     Type      Size  Used Avail Use% Mounted on
rootfs         rootfs     20G  2.6G   16G  15% /
/dev/root      ext4       20G  2.6G   16G  15% /
devtmpfs       devtmpfs  239M     0  239M   0% /dev
tmpfs          tmpfs      49M  236K   49M   1% /run
tmpfs          tmpfs     5.0M     0  5.0M   0% /run/lock
tmpfs          tmpfs      97M     0   97M   0% /run/shm
/dev/mmcblk0p1 vfat       56M  9.7M   47M  18% /boot
/dev/sda2      ext4      898G  343G  510G  41% /media/USB0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="post-install"&gt;
&lt;h3&gt;8. Post-install&lt;/h3&gt;
&lt;div class="section" id="password"&gt;
&lt;h4&gt;8.1 Password&lt;/h4&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;raspberry&lt;/tt&gt; is a tasty fruit but a lousy password. Change password for username &lt;tt class="docutils literal"&gt;pi&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sudo"&gt;
&lt;h4&gt;8.2 Sudo&lt;/h4&gt;
&lt;p&gt;Default setting in Raspbian is to allow &lt;tt class="docutils literal"&gt;pi&lt;/tt&gt; to use &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; without prompting for a password. Disable password-less &lt;tt class="docutils literal"&gt;sudo&lt;/tt&gt; by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo visudo -s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and comment out the &lt;tt class="docutils literal"&gt;NOPASSWD&lt;/tt&gt; entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#includedir /etc/sudoers.d&lt;/span&gt;
&lt;span class="c"&gt;#pi ALL=(ALL) NOPASSWD: ALL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="upgrade"&gt;
&lt;h4&gt;8.3 Upgrade&lt;/h4&gt;
&lt;p&gt;With the newly-configured &lt;tt class="docutils literal"&gt;rootfs&lt;/tt&gt; up-and-running now is a good time to update Raspbian:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get dist-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="static-address"&gt;
&lt;h4&gt;8.4 Static Address&lt;/h4&gt;
&lt;p&gt;A Raspberry Pi that is going to stay home and run as a server can be configured to use a &lt;strong&gt;static network address&lt;/strong&gt;. Sample &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt; modification that disables &lt;tt class="docutils literal"&gt;dhcp&lt;/tt&gt; and sets ip address &lt;tt class="docutils literal"&gt;192.168.1.88&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#iface eth0 inet dhcp&lt;/span&gt;
auto eth0
iface eth0 inet static
    address 192.168.1.88
    netmask 255.255.255.0
    gateway 192.168.1.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;table class="docutils footnote" frame="void" id="id2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Pi requires an SD card to boot... so we continue using original /boot.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="raspberry pi"></category><category term="raspbian"></category><category term="linux"></category><category term="networks"></category></entry><entry><title>Links of interest</title><link href="http://www.circuidipity.com/20141218.html" rel="alternate"></link><updated>2014-12-18T17:10:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-12-18:20141218.html</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;It's people... &lt;a class="reference external" href="http://www.bunniestudios.com/blog/?p=4266"&gt;supply chains are made out of people!&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.rifters.com/crawl/?p=5425"&gt;Electric eel brain hacking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;quot;If we want to safeguard our languages, stories and ideas against extinction, &lt;a class="reference external" href="http://aeon.co/magazine/culture/can-egyptology-teach-us-to-future-proof-our-culture/"&gt;we had better study Egyptology&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="links"></category></entry><entry><title>Links of interest</title><link href="http://www.circuidipity.com/20141211.html" rel="alternate"></link><updated>2014-12-11T13:43:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-12-11:20141211.html</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;Margaret Hamilton, &lt;a class="reference external" href="https://medium.com/&amp;#64;3fingeredfox/margaret-hamilton-lead-software-engineer-project-apollo-158754170da8"&gt;lead software engineer of Project Apollo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bbc.com/future/story/20130401-the-loneliest-human-being"&gt;Most isolated human in history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Creating &lt;a class="reference external" href="https://events.ccc.de/congress/2014/Fahrplan/events/6156.html"&gt;open hardware 'Fernvale' from reverse-engineering a closed-source SoC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to &lt;a class="reference external" href="http://hplusmagazine.com/2014/12/05/review-transforming-humanity-maxwell-leistung/"&gt;upgrade humans right now&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I love Woz and his child-like wonder and enthusiasm... &lt;a class="reference external" href="http://www.bloomberg.com/video/steve-wozniak-on-steve-jobs-geekiness-and-starting-apple-GVS_jUoTQtGYj9fwLg8dbQ.html"&gt;A walking talking 'Exhibit A' for the Hacker Ethic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="links"></category></entry><entry><title>Links of interest</title><link href="http://www.circuidipity.com/20141204.html" rel="alternate"></link><updated>2014-12-04T18:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-12-04:20141204.html</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://bldgblog.blogspot.ca/2014/11/space-noir.html"&gt;Space Noir&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Black Beauty, the shiny &lt;a class="reference external" href="http://www.sciencemag.org/content/346/6213/1044.full"&gt;4.4-billion-year-old rock from Mars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How Europe is &lt;a class="reference external" href="http://www.washingtonpost.com/blogs/worldviews/wp/2014/12/04/watch-how-europe-is-greener-now-than-100-years-ago/"&gt;greener now than 100 years ago&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Soyuz: &lt;a class="reference external" href="http://www.bbc.com/future/story/20141202-the-greatest-spacecraft-ever"&gt;Soviet Space Survivor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="links"></category></entry><entry><title>Links of interest</title><link href="http://www.circuidipity.com/20141127.html" rel="alternate"></link><updated>2014-11-27T16:50:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-11-27:20141127.html</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://mitadmissions.org/blogs/entry/im-studying-poetry-to-be-a-better-engineer-and-this-is-why"&gt;&amp;quot;I'm studying poetry to be a better engineer, and this is why...&amp;quot;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;How to &lt;a class="reference external" href="http://linuxcommando.blogspot.in/2013/10/how-to-connect-to-wpawpa2-wifi-network.html"&gt;connect to wireless using Linux command line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;'How to Start a Startup' &lt;a class="reference external" href="http://startupclass.samaltman.com/lists/readings/"&gt;recommended readings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Marked up photographs show &lt;a class="reference external" href="http://petapixel.com/2013/09/12/marked-photographs-show-iconic-prints-edited-darkroom/"&gt;how iconic prints were edited in the darkroom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="links"></category></entry><entry><title>Links of interest</title><link href="http://www.circuidipity.com/20141120.html" rel="alternate"></link><updated>2014-11-20T00:27:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-11-20:20141120.html</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;The cost of &lt;a class="reference external" href="http://www.precisionnutrition.com/cost-of-getting-lean"&gt;getting lean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Challenges to overcome for &lt;a class="reference external" href="http://www.centauri-dreams.org/?p=31971"&gt;long-duration human spaceflight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://opensource.com/life/14/11/linux-lettuce-open-food-seeds"&gt;Free the seeds!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A mathematician and &lt;a class="reference external" href="http://www.thebigquestions.com/2014/11/17/the-generalist/"&gt;his beautiful approach to solving problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Star formation in the &lt;a class="reference external" href="http://apod.nasa.gov/apod/ap141118.html"&gt;Tadpole Nebula&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A cautionary tale of &lt;a class="reference external" href="http://blog.freecodecamp.com/2014/11/a-cautionary-tale-of-learning-to-code.html"&gt;learning to code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://i.imgur.com/xfGY0Fb.jpg"&gt;All space missions in a single awesome image&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="links"></category></entry><entry><title>Pop-up custom menu in LXDE</title><link href="http://www.circuidipity.com/20141115.html" rel="alternate"></link><updated>2014-11-15T01:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-11-15:20141115.html</id><summary type="html">&lt;p&gt;Create a hotkey-activated custom menu for favourite functions and applications.&lt;/p&gt;
&lt;p&gt;Copy Openbox's default &lt;tt class="docutils literal"&gt;menu.xml&lt;/tt&gt; and customize:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/share/lubuntu/openbox/menu.xml ~/.config/openbox/lubuntu-menu.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://github.com/vonbrownie/linux-post-install/blob/master/config/generic/home/username/.config/openbox/lubuntu-menu.xml"&gt;own menu&lt;/a&gt; includes &lt;tt class="docutils literal"&gt;lxpanelctl menu&lt;/tt&gt;, search (using &lt;strong&gt;catfish&lt;/strong&gt;), &lt;a class="reference external" href="https://github.com/vonbrownie/linux-home-bin/blob/master/ob-recent-files-pipemenu"&gt;Recent Files&lt;/a&gt; sub-menu, screenshot utility (&lt;strong&gt;scrot&lt;/strong&gt;), and logout.&lt;/p&gt;
&lt;p&gt;Create a key-combo in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/openbox/lubuntu-rc.xml&lt;/span&gt;&lt;/tt&gt; to activate the menu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;!-- Keybindings &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;ALT+SPACEBAR &lt;span class="k"&gt;for &lt;/span&gt;Openbox menu --&amp;gt;
&amp;lt;keybind &lt;span class="nv"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;A-space&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;action &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ShowMenu&amp;quot;&lt;/span&gt;&amp;gt;
    &amp;lt;menu&amp;gt;root-menu&amp;lt;/menu&amp;gt;
    &amp;lt;/action&amp;gt;
&amp;lt;/keybind&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload the new configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;openbox --reconfigure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;Sources: &lt;a class="reference external" href="https://github.com/vonbrownie/linux-post-install/blob/master/config/generic/home/username/.config/openbox/lubuntu-menu.xml"&gt;lubuntu-menu.xml&lt;/a&gt; + &lt;a class="reference external" href="https://github.com/vonbrownie/linux-post-install/blob/master/config/generic/home/username/.config/openbox/lubuntu-rc.xml"&gt;lubuntu-rc.xml&lt;/a&gt; + &lt;a class="reference external" href="https://github.com/vonbrownie/linux-home-bin/blob/master/ob-recent-files-pipemenu"&gt;ob-recent-files-pipemenu&lt;/a&gt; (github.com/vonbrownie), &lt;a class="reference external" href="http://crunchbanglinux.org/wiki/configuring_the_openbox_menu"&gt;Configuring the Openbox Menu&lt;/a&gt; (crunchbanglinux.org)&lt;/p&gt;
</summary><category term="lubuntu"></category><category term="ubuntu"></category><category term="linux"></category><category term="openbox"></category><category term="lxde"></category></entry></feed>