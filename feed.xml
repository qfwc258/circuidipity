<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Circuidipity</title><link href="http://www.circuidipity.com/" rel="alternate"></link><link href="http://www.circuidipity.com/feed.xml" rel="self"></link><id>http://www.circuidipity.com/</id><updated>2014-02-11T00:00:00-05:00</updated><entry><title>My tmux cheatsheet</title><link href="http://www.circuidipity.com/tmux.html" rel="alternate"></link><updated>2014-02-11T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-02-11:tmux.html</id><summary type="html">&lt;img alt="tmux" src="/images/screenshot/tmux_window_pane.png" style="width: 940px; height: 529px;" /&gt;
&lt;p&gt;&lt;a class="reference external" href="http://tmux.sourceforge.net/"&gt;tmux&lt;/a&gt; is a &lt;em&gt;terminal multiplexer&lt;/em&gt;. What this means is I can take a single terminal window and create multiple &lt;em&gt;windows&lt;/em&gt; (tabs) and further partition a window into horizontal and vertical &lt;em&gt;panes&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Using &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; I can create terminal sessions with a custom layout of windows / panes / names / running programs, switch between different sessions, and - best of all - &lt;em&gt;detach&lt;/em&gt; from a session, log out, return later, &lt;em&gt;re-attach&lt;/em&gt; and find the session layout preserved and programs continuing to run in the interim.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; I can &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; into my &lt;a class="reference external" href="/linux-home-server.html"&gt;home server&lt;/a&gt;, start a &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; session and create multiple windows, run &lt;a class="reference external" href="http://libtorrent.rakshasa.no/"&gt;rtorrent&lt;/a&gt; in a window to start seeding a Linux &lt;tt class="docutils literal"&gt;iso&lt;/tt&gt;, detach from session and server, and return later to find everything in place and the &lt;tt class="docutils literal"&gt;iso&lt;/tt&gt; uploading.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To install:&lt;/em&gt; on Debian run &lt;tt class="docutils literal"&gt;sudo &lt;span class="pre"&gt;apt-get&lt;/span&gt; install tmux&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Commands entered inside a &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; session are preceded by the key combination &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-b&lt;/span&gt;&lt;/tt&gt; as the default &lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; (this can be modified in &lt;tt class="docutils literal"&gt;.tmux.conf&lt;/tt&gt;).&lt;/p&gt;
&lt;div class="section" id="helpful-commands"&gt;
&lt;h2&gt;Helpful Commands&lt;/h2&gt;
&lt;div class="section" id="sessions"&gt;
&lt;h3&gt;Sessions&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux new &lt;span class="pre"&gt;-s&lt;/span&gt; blogging&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;start new session with the name &lt;em&gt;blogging&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux attach &lt;span class="pre"&gt;-t&lt;/span&gt; blogging&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;attach to a session with the name &lt;em&gt;blogging&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux ls&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;s&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;show the session list&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;(&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move to previous session&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;)&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move to next session&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;?&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;show every &lt;em&gt;bound key&lt;/em&gt; and the command it runs&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;d&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;detach from session&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux &lt;span class="pre"&gt;kill-session&lt;/span&gt; &lt;span class="pre"&gt;-t&lt;/span&gt; blogging&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;kill session &lt;em&gt;blogging&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux info&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;show every session, window, pane, etc...&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-and-panes"&gt;
&lt;h3&gt;Windows and Panes&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;tmux new &lt;span class="pre"&gt;-s&lt;/span&gt; blogging &lt;span class="pre"&gt;-n&lt;/span&gt; vim&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;create session &lt;em&gt;blogging&lt;/em&gt; with a window named &lt;em&gt;vim&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;c&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;create window&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;,&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;rename window&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;0&lt;/tt&gt; ... &lt;tt class="docutils literal"&gt;9&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;select window by number&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;p&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;previous | next window&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;%&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;arrange panes vertically&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;arrange panes horizontally&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;toggle last active pane&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;{&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;}&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;swap pane location&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;o&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;cycle through panes&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;SPACEBAR&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;cycle through built-in pane layouts&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;z&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;toggle pane zoom&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;!&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;convert pane into a window&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;x&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;close pane&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;&amp;amp;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;close current window ... if last window the session terminates&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="command-mode"&gt;
&lt;h3&gt;Command Mode&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;:&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;enter command mode&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="copy-mode"&gt;
&lt;h3&gt;Copy Mode&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;[&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;enter copy mode&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;g&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;G&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;top | bottom of buffer&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;h&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;j&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;k&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;l&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move cursor left | down | up | right (in vi mode)&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;w&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;b&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move cursor forward | backward one word at a time (in vi mode)&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;?&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;N&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;search for &lt;em&gt;keyword&lt;/em&gt; | next occurance | previous occurance&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;SPACEBAR&lt;/tt&gt; | &lt;tt class="docutils literal"&gt;ENTER&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;start copy | stop copy&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;PREFIX&lt;/tt&gt; &lt;tt class="docutils literal"&gt;]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;paste contents of buffer_0&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;ENTER&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;exit copy mode&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;Inside command mode ...&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;show-buffer&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;display buffer_0 contents&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;capture-pane&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;copy entire visible contents of pane to a buffer&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;list-buffers&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;list all buffers&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;choose-buffer&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;list all buffers and paste selected buffer&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;save-buffer&lt;/span&gt; log.txt&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;save buffer contents to &lt;em&gt;log.txt&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;delete-buffer&lt;/span&gt; −b 4&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;delete &lt;em&gt;buffer_4&lt;/em&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h2&gt;Configure&lt;/h2&gt;
&lt;p&gt;Customize &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; by creating a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.tmux.conf&lt;/span&gt;&lt;/tt&gt; configuration file. Different key combinations, colours, items running in the status bar, activity alerts can be configured with &lt;tt class="docutils literal"&gt;command&lt;/tt&gt; &lt;tt class="docutils literal"&gt;OPTION&lt;/tt&gt; ...&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;set &lt;span class="pre"&gt;-g&lt;/span&gt; OPTION&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;set OPTION for all tmux sessions&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;setw &lt;span class="pre"&gt;-g&lt;/span&gt; OPTION&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;set OPTION for all windows&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;setw &lt;span class="pre"&gt;-g&lt;/span&gt; &lt;span class="pre"&gt;mode-keys&lt;/span&gt; vi&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;use vi keys in buffer&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;unbind KEY&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;release default KEY for user customization&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;bind KEY OPTION&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;bind KEY to OPTION&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; My own &lt;a class="reference external" href="https://github.com/vonbrownie/linux-home-config/blob/master/.tmux.conf"&gt;.tmux.conf&lt;/a&gt; configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="layouts"&gt;
&lt;h2&gt;Layouts&lt;/h2&gt;
&lt;p&gt;Pre-configured layouts can be created to batch together &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; options for custom work environments. Such options might include ...&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;source-file&lt;/span&gt; &lt;span class="pre"&gt;~/.tmux.conf&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;import settings from my default config&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;new-window&lt;/span&gt; &lt;span class="pre"&gt;-t&lt;/span&gt; development&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;create new window in the &lt;em&gt;development&lt;/em&gt; session&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;split-window&lt;/span&gt; &lt;span class="pre"&gt;-v&lt;/span&gt; &lt;span class="pre"&gt;-t&lt;/span&gt; development&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;arrange panes vertically inside a window in &lt;em&gt;development&lt;/em&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;send-keys&lt;/span&gt; &lt;span class="pre"&gt;-t&lt;/span&gt; development:1.0 'vim' &lt;span class="pre"&gt;C-m&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;in &lt;em&gt;development&lt;/em&gt; run &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt; in window_1 pane_0 and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C-m&lt;/span&gt;&lt;/tt&gt; sends the Carriage Return sequence&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; I created a &lt;a class="reference external" href="https://github.com/vonbrownie/tmux-scripts/blob/master/default.conf"&gt;default.conf&lt;/a&gt; to outline my standard &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt; session layout and a simple launcher to create / attach sessions that source the file ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Launch/attach tmux session with $CONFIG&lt;/span&gt;
&lt;span class="nv"&gt;CONFIG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;$HOME/doc/code/tmux_scripts/default.conf&amp;quot;&lt;/span&gt;

tmux -f &lt;span class="nv"&gt;$CONFIG&lt;/span&gt; attach
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out &lt;tt class="docutils literal"&gt;man tmux&lt;/tt&gt; for &lt;em&gt;lots&lt;/em&gt; more information. Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="tmux"></category><category term="shell"></category><category term="linux"></category><category term="cheatsheet"></category></entry><entry><title>Easy 8-bit pixel images</title><link href="http://www.circuidipity.com/easy-8-bit-pixel-images.html" rel="alternate"></link><updated>2014-02-10T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-02-10:easy-8-bit-pixel-images.html</id><summary type="html">&lt;img alt="wall of pixels" src="/images/wall_of_pixels.jpg" style="width: 910px; height: 450px;" /&gt;
&lt;p&gt;A simple &lt;a class="reference external" href="http://www.gimp.org"&gt;GIMP&lt;/a&gt; recipe for play at making 8-bit pixel images:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open image and select &lt;tt class="docutils literal"&gt;Colors &amp;gt; &lt;span class="pre"&gt;Brightness-Contrast&lt;/span&gt; &amp;gt; Contrast&lt;/tt&gt; to increase contrast&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Image &amp;gt; Scale Image &amp;gt; 10%&amp;nbsp; Interpolation: None&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;Image &amp;gt; Scale Image &amp;gt; 400%&amp;nbsp; Interpolation: None&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Manipulate the scale image settings to increase/decrease pixelation to satisfaction.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</summary><category term="gimp"></category><category term="linux"></category></entry><entry><title>Host a blog on GitHub Pages</title><link href="http://www.circuidipity.com/github-pages.html" rel="alternate"></link><updated>2014-02-08T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-02-08:github-pages.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is a free web hosting service for projects composed of static files (i.e no database). Combine a Pages &lt;em&gt;repository&lt;/em&gt; with &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; version control and a &lt;em&gt;static site generator&lt;/em&gt; like &lt;a class="reference external" href="/pelican.html"&gt;Pelican&lt;/a&gt; and you have one awesome toolset to build a website.&lt;/p&gt;
&lt;p&gt;This is how I configured GitHub Pages to host &lt;em&gt;Circuidipity&lt;/em&gt;.&lt;/p&gt;
&lt;div class="section" id="step-0-install-git"&gt;
&lt;h2&gt;Step 0 - Install git&lt;/h2&gt;
&lt;p&gt;Install (on Debian Linux) the &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; package and write global configuration variables for &lt;tt class="docutils literal"&gt;USERNAME&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.gitconfig&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install git git-doc
&lt;span class="nv"&gt;$ &lt;/span&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;USERNAME&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config --global user.email USERNAME.EMAIL@example.com
&lt;span class="nv"&gt;$ &lt;/span&gt;git config --global core.editor EDITOR  &lt;span class="c"&gt;# I use &amp;#39;vim&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git config --global merge.tool vimdiff
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-create-git-repository"&gt;
&lt;h2&gt;Step 1 - Create git repository&lt;/h2&gt;
&lt;p&gt;Inside my &lt;tt class="docutils literal"&gt;pelican&lt;/tt&gt;-powered blog project I create 2 new files: &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;.gitignore&lt;/tt&gt; file does exactly what the name implies ... it instructs &lt;tt class="docutils literal"&gt;git&lt;/tt&gt; which files and directories not to bother tracking in version control. For example I do not want to track ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;*.pid
*.pyc
output/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Creating a &lt;tt class="docutils literal"&gt;README.rst&lt;/tt&gt; will allow GitHub to auto-detect and configure it as the project homepage when we upload our blog contents to the remote repository. Mine looks like ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;www dot circuidipity dot com&lt;/span&gt;
&lt;span class="gh"&gt;============================&lt;/span&gt;

This repository holds my blog which you can visit at www.circuidipity.com.

It is compiled by &lt;span class="s"&gt;`Pelican &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://docs.getpelican.com/&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt; and hosted on &lt;span class="s"&gt;`GitHub Pages &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://pages.github.com/&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now I &lt;em&gt;create&lt;/em&gt; my local repository, &lt;em&gt;add&lt;/em&gt; the items I want to track, and execute my first &lt;em&gt;commit&lt;/em&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git init
&lt;span class="nv"&gt;$ &lt;/span&gt;git add README.rst
&lt;span class="nv"&gt;$ &lt;/span&gt;git add .gitignore
&lt;span class="nv"&gt;$ &lt;/span&gt;git add Makefile
&lt;span class="nv"&gt;$ &lt;/span&gt;git add content/
&lt;span class="nv"&gt;$ &lt;/span&gt;git add pelicanconf.py
&lt;span class="nv"&gt;$ &lt;/span&gt;git add publishconf.py
&lt;span class="nv"&gt;$ &lt;/span&gt;git status
&lt;span class="nv"&gt;$ &lt;/span&gt;git commit -a -m &lt;span class="s2"&gt;&amp;quot;first commit&amp;quot;&lt;/span&gt;  &lt;span class="c"&gt;# &amp;#39;-a&amp;#39; adds all files that are being tracked and commits them&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git log  &lt;span class="c"&gt;# to view commit history&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-create-github-repository"&gt;
&lt;h2&gt;Step 2 - Create GitHub repository&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.github.com/articles/signing-up-for-a-new-github-account"&gt;Sign up&lt;/a&gt; for a free account on GitHub and &lt;a class="reference external" href="https://help.github.com/articles/creating-a-new-repository"&gt;create a new empty repository&lt;/a&gt; to hold the blog contents.&lt;/p&gt;
&lt;p&gt;Next I connect my local &lt;tt class="docutils literal"&gt;.git&lt;/tt&gt; repository to my GitHub remote repository ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add origin https://github.com/vonbrownie/circuidipity.git
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote -v  &lt;span class="c"&gt;# confirm local knows about remote&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git push -u origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-configure-pelican-to-use-github-pages"&gt;
&lt;h2&gt;Step 3 - Configure Pelican to use GitHub Pages&lt;/h2&gt;
&lt;p&gt;GitHub offers 2 types of &lt;a class="reference external" href="https://help.github.com/articles/user-organization-and-project-pages"&gt;Pages&lt;/a&gt; ... &lt;em&gt;User Pages&lt;/em&gt; and &lt;em&gt;Project Pages&lt;/em&gt;. Each GitHub account can host a single User Page and an unlimited amount of Project Pages. Basically they are identical to the end-user and differ only in their configuration.&lt;/p&gt;
&lt;p&gt;I chose to make my blog a Project Page and the contents are hosted in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch of my GitHub project repository. Pelican makes it easy to create and configure &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; using the &lt;a class="reference external" href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; Python script ... which I install via &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally I &lt;em&gt;publish&lt;/em&gt; my blog by pushing the files up to GitHub ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub Pages is now hosting the site at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://USERNAME.github.io/REPOSITORY&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-custom-domain-name"&gt;
&lt;h2&gt;Step 4 - Custom domain name&lt;/h2&gt;
&lt;p&gt;Awesome! But I want to use my own &lt;em&gt;Circuidipity&lt;/em&gt; custom domain name ... not &lt;tt class="docutils literal"&gt;REPOSITORY&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;GitHub enables &lt;a class="reference external" href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages"&gt;custom domains&lt;/a&gt; by allowing users to create a &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; file with their domain address that resides in the root directory of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt;. Inside my Pelican project folder I create a new &lt;tt class="docutils literal"&gt;extra&lt;/tt&gt; directory containing a single-line &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; file with my domain address &lt;tt class="docutils literal"&gt;www.circuidipity.com&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Next I edit &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; to recognize &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; and place the file in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; when I upload my files ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Static paths will be copied without parsing their contents&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Shift the installed location of a file&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upload my changes to GitHub ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make github
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="domain-registrar"&gt;
&lt;h3&gt;4.1 - Domain Registrar&lt;/h3&gt;
&lt;p&gt;Now the &lt;em&gt;domain name registrar&lt;/em&gt; needs to be configured to point to the new GitHub address. &lt;a class="reference external" href="https://www.gandi.net/"&gt;Gandi&lt;/a&gt; is my registrar and while the details will vary between domain services the steps are basically the same to redirect a custom domain.&lt;/p&gt;
&lt;p&gt;My objective is for the GitHub Pages repository to resolve to &lt;tt class="docutils literal"&gt;www.circuidipity.com&lt;/tt&gt; and for &lt;tt class="docutils literal"&gt;circuidipity.com&lt;/tt&gt; to redirect to the &lt;tt class="docutils literal"&gt;www&lt;/tt&gt; address.&lt;/p&gt;
&lt;p&gt;Using Gandi as an example I will create new &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; records:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;click on domain name to access admin page and near the bottom select option &lt;tt class="docutils literal"&gt;Edit the zone&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;create new &lt;tt class="docutils literal"&gt;zone file&lt;/tt&gt; for editing by selecting &lt;tt class="docutils literal"&gt;Create a new version&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;modify/add &lt;tt class="docutils literal"&gt;CNAME&lt;/tt&gt; &lt;tt class="docutils literal"&gt;www&lt;/tt&gt; record with value &lt;tt class="docutils literal"&gt;USERNAME.github.io.&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;modify/add &lt;tt class="docutils literal"&gt;A&lt;/tt&gt; record to &lt;a class="reference external" href="https://wiki.gandi.net/en/domains/management/domain-as-website/forwarding"&gt;permanently redirect&lt;/a&gt; the top level domain to &lt;tt class="docutils literal"&gt;www&lt;/tt&gt; using the Gandi redirect service address &lt;tt class="docutils literal"&gt;217.70.184.38&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;click &lt;tt class="docutils literal"&gt;Use this version&lt;/tt&gt; to save all changes and wait a few hours for the DNS modifications to propagate around the world&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;It is possible to skip web redirection and set the A record value to point directly to a &lt;a class="reference external" href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages"&gt;GitHub address&lt;/a&gt; but at the loss of &lt;em&gt;dynamic traffic management&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-custom-404"&gt;
&lt;h2&gt;Step 5 - Custom 404&lt;/h2&gt;
&lt;p&gt;Configuring a custom domain allows the option of using a &lt;a class="reference external" href="https://help.github.com/articles/custom-404-pages"&gt;custom 404 page&lt;/a&gt;. Simply create a &lt;tt class="docutils literal"&gt;404.html&lt;/tt&gt; file in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; root.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="git"></category><category term="web"></category><category term="pelican"></category></entry><entry><title>Build a blog using the Pelican static site generator</title><link href="http://www.circuidipity.com/pelican.html" rel="alternate"></link><updated>2014-02-06T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-02-06:pelican.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/"&gt;Pelican&lt;/a&gt; is a Python-powered &lt;em&gt;static site generator&lt;/em&gt;. I design the look and layout of this site using CSS and &lt;a class="reference external" href="http://jinja.pocoo.org/docs/"&gt;Jinja2&lt;/a&gt; templates and write my posts as plaintext files using &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; and Pelican &lt;em&gt;compiles&lt;/em&gt; the contents into HTML output suitable for a blog.&lt;/p&gt;
&lt;p&gt;I like the idea of creating a static website. Some of the advantages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;no database required ... plaintext is easy to edit, backup and move around&lt;/li&gt;
&lt;li&gt;plaintext allows your choice of editor ... I am learning &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;cheap and easy to host practically anywhere ... one option: &lt;a class="reference external" href="http://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; is a free service for hosting static HTML content&lt;/li&gt;
&lt;li&gt;no database or excutable code makes a website easy to secure, maintain and scale&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The traditional disadvantage to using static pages for a blog has been the lack of dynamic elements - hosting feeds, user comments - but JavaScript for things like a Twitter widget to provide real-time updates and out-sourced services like Disqus for commenting are possible alternatives to work around static limitations.&lt;/p&gt;
&lt;p&gt;This is how I built &lt;em&gt;Circuidipity&lt;/em&gt; using Pelican.&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;I install Pelican and extra tools by creating a &lt;em&gt;virtual environment&lt;/em&gt; using &lt;a class="reference external" href="/python2-and-python3.html"&gt;virtualenv&lt;/a&gt; and &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt;. This allows me to create a sandboxed work area specific to my blog and user separate from my default Python installation (an alternative method in Debian would be to install the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;python-pelican&lt;/span&gt;&lt;/tt&gt; package).&lt;/p&gt;
&lt;p&gt;With &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; installed and using my blog as an example ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv ~/virtualenvs/circuidipity
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/virtualenvs/circuidipity/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install pelican
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To later upgrade to newer versions simply run &lt;tt class="docutils literal"&gt;pip install &lt;span class="pre"&gt;--upgrade&lt;/span&gt; pelican&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Next I create a directory to hold my blog contents and run &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; to create a default site layout and configuration. I add my blog details and mostly accept the default choices provided (except for &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/settings.html#pagination"&gt;pagination&lt;/a&gt;) ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir ~/circuidipity
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/circuidipity
&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pelican-quickstart
Welcome to pelican-quickstart v3.3.0.

This script will &lt;span class="nb"&gt;help &lt;/span&gt;you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do &lt;/span&gt;you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; What will be the title of this web site? Circuidipity
&amp;gt; Who will be the author of this web site? Daniel Wayne Armstrong
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt;
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://www.circuidipity.com
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
Done. Your new project is available at /home/dwa/circuidipity
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the layout generated by &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tree
.
├── content
├── develop_server.sh
├── fabfile.py
├── Makefile
├── output
├── pelicanconf.py
└── publishconf.py

2 directories, 5 files
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="first-post"&gt;
&lt;h2&gt;First post&lt;/h2&gt;
&lt;p&gt;Posts go into &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; and I create a &lt;tt class="docutils literal"&gt;images&lt;/tt&gt; subdirectory for screenshots and artwork and a &lt;tt class="docutils literal"&gt;pages&lt;/tt&gt; subdirectory to hold things like an &lt;tt class="docutils literal"&gt;about&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;contact&lt;/tt&gt; page ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir content/&lt;span class="o"&gt;{&lt;/span&gt;images,pages&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside &lt;tt class="docutils literal"&gt;content&lt;/tt&gt; create your first post &lt;tt class="docutils literal"&gt;hello_world.rst&lt;/tt&gt; using reStructuredText ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gh"&gt;===========&lt;/span&gt;
&lt;span class="gh"&gt;Hello World&lt;/span&gt;
&lt;span class="gh"&gt;===========&lt;/span&gt;

&lt;span class="nc"&gt;:date:&lt;/span&gt; &lt;span class="nf"&gt;2014-02-06 23:24&lt;/span&gt;
&lt;span class="nc"&gt;:tags:&lt;/span&gt; &lt;span class="nf"&gt;pelican, web&lt;/span&gt;
&lt;span class="nc"&gt;:slug:&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;

My &lt;span class="ge"&gt;*first*&lt;/span&gt; post using &lt;span class="s"&gt;`Pelican &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;http://docs.getpelican.com/en/3.3.0/getting_started.html&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Items like &lt;tt class="docutils literal"&gt;:date&lt;/tt&gt; &lt;tt class="docutils literal"&gt;:tags:&lt;/tt&gt; &lt;tt class="docutils literal"&gt;:slug:&lt;/tt&gt; are &lt;em&gt;metadata&lt;/em&gt; that can be used in the generated HTML output. These and a few others are included in Pelican and users can create their own to use in &lt;a class="reference external" href="http://docs.getpelican.com/en/3.1.1/themes.html#theming-pelican"&gt;templates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Save the file and test the new blog by running the Pelican built-in development server. This will take all the &lt;tt class="docutils literal"&gt;*.rst&lt;/tt&gt; files and generate HTML formatted files in &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; and serve up the results for inspection in a browser at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://localhost:8000&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server will continue to run in the background and re-generate any updated content for viewing. Stop the server by running &lt;tt class="docutils literal"&gt;./develop_server.sh stop&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="settings"&gt;
&lt;h2&gt;Settings&lt;/h2&gt;
&lt;p&gt;Running &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pelican-quickstart&lt;/span&gt;&lt;/tt&gt; creates 2 configuration files: &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Primary settings are configured in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt;. Settings can be used as &lt;em&gt;variables&lt;/em&gt; in posts, pages, and templates. This is how mine looks ... some of the settings such as &lt;tt class="docutils literal"&gt;AUTHOR&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;SITENAME&lt;/tt&gt; were generated by Pelican and some like &lt;tt class="docutils literal"&gt;WHOAMI_URL&lt;/tt&gt; were created by myself ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="n"&gt;AUTHOR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Daniel Wayne Armstrong&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Circuidipity&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;TIMEZONE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;America/Toronto&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;en&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;DEFAULT_DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;%A &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; %B %Y&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Static paths will be copied without parsing their contents&lt;/span&gt;
&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Shift the installed location of a file&lt;/span&gt;
&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Extract post date from filename&lt;/span&gt;
&lt;span class="n"&gt;FILENAME_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Sole author and don&amp;#39;t use categories ... disable these features&lt;/span&gt;
&lt;span class="n"&gt;AUTHOR_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;AUTHORS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;CATEGORIES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c"&gt;# Feed generation is usually not desired when developing&lt;/span&gt;
&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c"&gt;# URL settings&lt;/span&gt;
&lt;span class="c"&gt;# Uncomment following line if you want document-relative URLs when developing&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tag-{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tag-{slug}.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAGS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tags.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAGS_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;tags.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;archives.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARCHIVES_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;archives.html&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Contact&lt;/span&gt;
&lt;span class="n"&gt;EMAIL_ADDR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;daniel at circuidipity dot com&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Plugins&lt;/span&gt;
&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-plugins&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;neighbors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Theme&lt;/span&gt;
&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-themes/chungking-condo&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;WHOAMI_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/theme/images/whoami.jpg&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GREETING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Howdy!&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;BY-NC-SA&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://creativecommons.org/licenses/by-nc-sa/3.0/deed.en_US&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;LICENCE_URL_IMG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://i.creativecommons.org/l/by-nc-sa/3.0/80x15.png&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;JINJA_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;jinja2.ext.loopcontrols&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c"&gt;# Social&lt;/span&gt;
&lt;span class="n"&gt;TWITTER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://twitter.com/circuidipity&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;GITHUB_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;https://github.com/vonbrownie&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# Tag cloud&lt;/span&gt;
&lt;span class="n"&gt;TAG_CLOUD_STEPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few of the settings like &lt;tt class="docutils literal"&gt;RELATIVE_URLS = True&lt;/tt&gt; and turning off &lt;tt class="docutils literal"&gt;ATOM&lt;/tt&gt; feeds are appropriate for a &lt;em&gt;test&lt;/em&gt; environment but are probably things that need to be modified when its time for deployment. The second &lt;tt class="docutils literal"&gt;publishconf.py&lt;/tt&gt; configuration file contains priority settings for &lt;em&gt;publishing&lt;/em&gt; content ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding: utf-8 -*- #&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;unicode_literals&lt;/span&gt;

&lt;span class="c"&gt;# This file is only used if you use `make publish` or&lt;/span&gt;
&lt;span class="c"&gt;# explicitly specify it as your config file.&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;curdir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelicanconf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;SITEURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;http://www.circuidipity.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;RELATIVE_URLS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;feed.xml&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="n"&gt;FEED_MAX_ITEMS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/plugins.html"&gt;Plugins&lt;/a&gt; are available to extend the functionality of Pelican. I use a plugin called &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins/tree/master/neighbors"&gt;neighbors&lt;/a&gt; that makes it easy for me to add links near the bottom to &lt;tt class="docutils literal"&gt;Newer&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Older&lt;/tt&gt; articles in relation to the current page.&lt;/p&gt;
&lt;p&gt;Enable plugins in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-plugins&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;neighbors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can then make use of the plugin's &lt;tt class="docutils literal"&gt;next_article&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;prev_article&lt;/tt&gt; variables in a Jinja2-formatted template to add those navigation links ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_article&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;prevpost&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fa fa-arrow-left&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Older&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.prev_article.url}}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prev_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_article&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;nextpost&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Newer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fa fa-arrow-right&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ SITEURL }}/{{ article.next_article.url}}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;next_article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;endif&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="themes"&gt;
&lt;h2&gt;Themes&lt;/h2&gt;
&lt;p&gt;Pelican includes a default theme to get you started and there is a collection of &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;user-created themes&lt;/a&gt; to choose from or &lt;a class="reference external" href="http://docs.getpelican.com/en/3.3.0/themes.html"&gt;create your own&lt;/a&gt;. I chose to start from scratch and explore CSS, Jinja2 templating, &lt;a class="reference external" href="http://pygments.org/faq/"&gt;pygments&lt;/a&gt; and &lt;a class="reference external" href="http://fortawesome.github.io/Font-Awesome/"&gt;Font Awesome icons&lt;/a&gt; to create my own &lt;a class="reference external" href="https://github.com/vonbrownie/circuidipity/tree/gh-pages/theme"&gt;Chungking Condo&lt;/a&gt; theme.&lt;/p&gt;
&lt;p&gt;To use a theme set the location of its contents in &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/home/dwa/doc/code/pelican-themes/chungking-condo&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="publish"&gt;
&lt;h2&gt;Publish&lt;/h2&gt;
&lt;p&gt;When ready to generate for deployment run ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;circuidipity&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make publish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All blog contents are placed in &lt;tt class="docutils literal"&gt;output&lt;/tt&gt; ready to be uploaded to a hosting service. Since everything is static content there are many options available. Previously I used &lt;a class="reference external" href="http://www.circuidipity.com/host-website-on-amazon-s3.html"&gt;Amazon S3&lt;/a&gt; and have now switched to a free &lt;a class="reference external" href="/github-pages.html"&gt;project repository hosted on GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Go forth &lt;em&gt;write&lt;/em&gt; and &lt;em&gt;post&lt;/em&gt; and make merry!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="pelican"></category><category term="web"></category><category term="python"></category><category term="linux"></category></entry><entry><title>Vimeo and FlashBlock not playing nice on Iceweasel/Firefox</title><link href="http://www.circuidipity.com/flashblock.html" rel="alternate"></link><updated>2014-01-07T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-07:flashblock.html</id><summary type="html">&lt;p&gt;Vimeo videos actually are not playing &lt;em&gt;at all&lt;/em&gt; ... neither embedded or on the site itself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fix:&lt;/strong&gt; Add 3 entries to the FlashBlock &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Preferences-&amp;gt;Whitelist&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;vimeo.com&lt;/div&gt;
&lt;div class="line"&gt;vimeocdn.com&lt;/div&gt;
&lt;div class="line"&gt;player.vimeo.com&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Works on &lt;tt class="docutils literal"&gt;Iceweasel 24.2.0&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;Flashblock 1.5.17&lt;/tt&gt; .&lt;/p&gt;
</summary><category term="firefox"></category><category term="web"></category><category term="linux"></category></entry><entry><title>Add ascii logo to login prompt</title><link href="http://www.circuidipity.com/ascii-logo.html" rel="alternate"></link><updated>2014-01-06T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-06:ascii-logo.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.deater.net/weave/vmwprod/linux_logo/"&gt;Linuxlogo&lt;/a&gt; provides Tux, the Debian swirl, and other distro logos that can be displayed - along with system information - at the console login prompt ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install linuxlogo
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cp /etc/issue /etc/issue.bak
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo sh -c &lt;span class="s1"&gt;&amp;#39;linux_logo -L debian -F &amp;quot;.: Greetings, Carbon-Based Biped :.\n\n#O Version #V\nCompiled #C\n#H \\l&amp;quot; &amp;gt; /etc/issue&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="linux"></category><category term="debian"></category></entry><entry><title>Convert video file(s) to MP3 audio</title><link href="http://www.circuidipity.com/convert-video-to-audio.html" rel="alternate"></link><updated>2014-01-01T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2014-01-01:convert-video-to-audio.html</id><summary type="html">&lt;p&gt;A simple shell script I made to convert downloaded YouTube videos to MP3s ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Convert video file to audio&lt;/span&gt;

&lt;span class="nv"&gt;MP3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-acodec libmp3lame -aq 0 -ac 2 -ar 44100&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;f in &lt;span class="s2"&gt;&amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;ffmpeg -i &lt;span class="s2"&gt;&amp;quot;$f&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;$MP3&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$(echo $f | sed &amp;#39;s/....$/.mp3/&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Requires &lt;tt class="docutils literal"&gt;ffmpeg&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;libmp3lame0&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="programming"></category><category term="shell"></category><category term="linux"></category></entry><entry><title>Multiple instances of nm-applet in Openbox</title><link href="http://www.circuidipity.com/nm-applet-openbox.html" rel="alternate"></link><updated>2013-12-23T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-12-23:nm-applet-openbox.html</id><summary type="html">&lt;p&gt;I had commented out my entry for &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;$HOME/.config/openbox/autostart&lt;/span&gt;&lt;/tt&gt; and system was loading &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; from &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/xdg/autostart/nm-applet.desktop&lt;/span&gt;&lt;/tt&gt;. Problem: After updating Openbox there were &lt;em&gt;two&lt;/em&gt; instances of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; being loaded.&lt;/p&gt;
&lt;p&gt;In &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/usr/lib/x86_64-linux-gnu/openbox-autostart&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;GLOBALAUTOSTART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/xdg/openbox/autostart&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;AUTOSTART&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;${XDG_CONFIG_HOME:-&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/.config&lt;span class="s2"&gt;&amp;quot;}/openbox/autostart&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Fix:&lt;/strong&gt; Edited &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/xdg/autostart/nm-applet.desktop&lt;/span&gt;&lt;/tt&gt; to read ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;NotShowIn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;KDE;GNOME;OPENBOX;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and &lt;em&gt;no&lt;/em&gt; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; appears when Openbox is loaded. Re-enabled &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; in &lt;tt class="docutils literal"&gt;autostart&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;sleep 3 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/nm-applet --sm-disable&lt;span class="o"&gt;)&lt;/span&gt; &amp;amp;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... re-started Openbox and now only the desired &lt;em&gt;single&lt;/em&gt; instance of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nm-applet&lt;/span&gt;&lt;/tt&gt; is loaded.&lt;/p&gt;
</summary><category term="openbox"></category><category term="linux"></category></entry><entry><title>Python2 and Python3 co-existing in harmony using Virtualenv</title><link href="http://www.circuidipity.com/python2-and-python3.html" rel="alternate"></link><updated>2013-11-22T00:00:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-11-22:python2-and-python3.html</id><summary type="html">&lt;p&gt;On my laptop Python is pre-installed ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -V
Python 2.7.5+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a class="reference external" href="http://inventwithpython.com/hacking/index.html"&gt;Hacking Secret Ciphers with Python&lt;/a&gt; looks to be a good resource for beginners to get started with Python programming. This free book uses Python3 but Debian defaults to Python2. No problem. Multiple versions of Python can co-exist on the same computer thanks to &lt;em&gt;virtual isolated python environments&lt;/em&gt; created using &lt;a class="reference external" href="https://pypi.python.org/pypi/virtualenv"&gt;Virtualenv&lt;/a&gt;. That allows me to use Python3 for certain projects - like the exercises in &lt;em&gt;Ciphers&lt;/em&gt; - but continue using Python2 as the system default.&lt;/p&gt;
&lt;p&gt;Install the Debian package for &lt;tt class="docutils literal"&gt;virtualenv&lt;/tt&gt; and create a directory to hold multiple virtual environments ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install python-virtualenv
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir &lt;span class="nv"&gt;$HOME&lt;/span&gt;/virtualenvs
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/virtualenvs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create and activate a new sandboxed Python3 environment ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv --python&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/python3 --no-site-packages secret_ciphers
Running virtualenv with interpreter /usr/bin/python3
Using base prefix &lt;span class="s1"&gt;&amp;#39;/usr&amp;#39;&lt;/span&gt;
New python executable in secret_ciphers/bin/python3
Also creating executable in secret_ciphers/bin/python
Installing Setuptools........done.
Installing Pip...............done.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enter the newly-created sandbox with &lt;tt class="docutils literal"&gt;activate&lt;/tt&gt; and install additional Python package using &lt;tt class="docutils literal"&gt;pip&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;secret_ciphers/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;secret_ciphers&lt;span class="o"&gt;)[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python -V
Python 3.3.3
&lt;span class="o"&gt;(&lt;/span&gt;secret_ciphers&lt;span class="o"&gt;)[&lt;/span&gt;~&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip install PACKAGENAME
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run &lt;tt class="docutils literal"&gt;deativate&lt;/tt&gt; to exit the sandbox and return to the default system Python. Delete an inactive sandbox with a simple &lt;tt class="docutils literal"&gt;rm &lt;span class="pre"&gt;-rf&lt;/span&gt; SANDBOX&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="python"></category><category term="virtual environments"></category><category term="programming"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Install Debian Wheezy Screenshot Tour</title><link href="http://www.circuidipity.com/install-debian-wheezy-screenshot-tour.html" rel="alternate"></link><updated>2013-10-11T00:00:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2013-10-11:install-debian-wheezy-screenshot-tour.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.debian.org"&gt;Debian GNU/Linux&lt;/a&gt; is an operating system created by volunteers of one of the largest and longest-running free software projects in the world. More than a hundred other Linux distributions like Ubuntu build their edifices on solid Debian &lt;em&gt;awesomesauce&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are 3 &lt;em&gt;release branches&lt;/em&gt; - &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;testing&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;unstable&lt;/tt&gt; - and the current stable branch goes by the name &lt;tt class="docutils literal"&gt;wheezy&lt;/tt&gt;. Below is a visual walk-through of a Debian installation that features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;separate root, encrypted home and swap partitions&lt;/li&gt;
&lt;li&gt;a minimal foundation for any type of Linux configuration (server, desktop, &lt;a class="reference external" href="http://wiki.debian.org/DebianUnstable"&gt;rolling release&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="step-0-installer"&gt;
&lt;h2&gt;Step 0 - Installer&lt;/h2&gt;
&lt;p&gt;Download a &lt;a class="reference external" href="http://ftp.nl.debian.org/debian/dists/testing/main/installer-amd64/current/images/netboot/mini.iso"&gt;64-bit&lt;/a&gt;  (or &lt;a class="reference external" href="http://ftp.nl.debian.org/debian/dists/testing/main/installer-i386/current/images/netboot/mini.iso"&gt;32-bit&lt;/a&gt; for older machines) Debian mini installer and burn the image to a CD or &lt;a class="reference external" href="multi-boot-usb.html"&gt;prepare a USB boot device&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-1-go"&gt;
&lt;h2&gt;Step 1 - Go!&lt;/h2&gt;
&lt;img alt="Install" class="align-center" src="images/screenshot/wheezyInstall/011.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select Language" class="align-center" src="images/screenshot/wheezyInstall/02.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select Location" class="align-center" src="images/screenshot/wheezyInstall/03.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure Keyboard" class="align-center" src="images/screenshot/wheezyInstall/04.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Hostname" class="align-center" src="images/screenshot/wheezyInstall/05.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Domain" class="align-center" src="images/screenshot/wheezyInstall/06.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror Country" class="align-center" src="images/screenshot/wheezyInstall/07.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror archive" class="align-center" src="images/screenshot/wheezyInstall/08.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Mirror Directory" class="align-center" src="images/screenshot/wheezyInstall/09.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Proxy" class="align-center" src="images/screenshot/wheezyInstall/10.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Root password" class="align-center" src="images/screenshot/wheezyInstall/11.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify password" class="align-center" src="images/screenshot/wheezyInstall/12.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Full Name" class="align-center" src="images/screenshot/wheezyInstall/13.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Username" class="align-center" src="images/screenshot/wheezyInstall/14.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="User password" class="align-center" src="images/screenshot/wheezyInstall/15.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify password" class="align-center" src="images/screenshot/wheezyInstall/16.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Select time zone" class="align-center" src="images/screenshot/wheezyInstall/17.png" style="width: 800px; height: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-partitions"&gt;
&lt;h2&gt;Step 2 - Partitions&lt;/h2&gt;
&lt;p&gt;In the example below we create 3 partitions on the disk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sda1 is a 20GB &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; partition&lt;/li&gt;
&lt;li&gt;sda2 is a 1GB &lt;tt class="docutils literal"&gt;swap&lt;/tt&gt; partition &lt;em&gt;encrypted&lt;/em&gt; with a &lt;em&gt;random key&lt;/em&gt; (double the RAM &amp;lt;= 2GB is a good rule of thumb for sizing swap)&lt;/li&gt;
&lt;li&gt;sda3 uses the remaining space as a &lt;tt class="docutils literal"&gt;home&lt;/tt&gt; partition &lt;em&gt;encrypted&lt;/em&gt; with a &lt;em&gt;passphrase&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Partitioning method" class="align-center" src="images/screenshot/wheezyInstall/18.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition disks" class="align-center" src="images/screenshot/wheezyInstall/19.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition table" class="align-center" src="images/screenshot/wheezyInstall/20.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/screenshot/wheezyInstall/21.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New Partition" class="align-center" src="images/screenshot/wheezyInstall/22.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/screenshot/wheezyInstall/23.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/screenshot/wheezyInstall/24.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Beginning" class="align-center" src="images/screenshot/wheezyInstall/25.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Setting &lt;em&gt;Mount options&lt;/em&gt; to &lt;em&gt;noatime&lt;/em&gt; decreases write operations and boosts drive speed.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Partition settings" class="align-center" src="images/screenshot/wheezyInstall/26.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/screenshot/wheezyInstall/27.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New partition" class="align-center" src="images/screenshot/wheezyInstall/28.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/screenshot/wheezyInstall/29.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/screenshot/wheezyInstall/30.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Beginning" class="align-center" src="images/screenshot/wheezyInstall/31.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encrypt volume" class="align-center" src="images/screenshot/wheezyInstall/32.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If the hard disk has not been securely wiped prior to installing Debian (using a utility like &lt;a class="reference external" href="multi-boot-usb.html"&gt;DBAN&lt;/a&gt;) you may want to configure &lt;em&gt;Erase data&lt;/em&gt; as &lt;em&gt;yes&lt;/em&gt;. Note, however, that depending on the size of the disk this operation can last several hours.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Random key" class="align-center" src="images/screenshot/wheezyInstall/33.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Free space" class="align-center" src="images/screenshot/wheezyInstall/34.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="New partition" class="align-center" src="images/screenshot/wheezyInstall/35.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition size" class="align-center" src="images/screenshot/wheezyInstall/36.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Primary partition" class="align-center" src="images/screenshot/wheezyInstall/37.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encrypt volume" class="align-center" src="images/screenshot/wheezyInstall/38.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Passphrase" class="align-center" src="images/screenshot/wheezyInstall/39.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure encrypted volumes" class="align-center" src="images/screenshot/wheezyInstall/40.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Write changes to disk" class="align-center" src="images/screenshot/wheezyInstall/41.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Create encrypted volumes" class="align-center" src="images/screenshot/wheezyInstall/42.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Devices to encrypt" class="align-center" src="images/screenshot/wheezyInstall/43.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish encrypt" class="align-center" src="images/screenshot/wheezyInstall/44.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Encryption passphrase" class="align-center" src="images/screenshot/wheezyInstall/45.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Verify passphrase" class="align-center" src="images/screenshot/wheezyInstall/46.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Configure encrypted volume" class="align-center" src="images/screenshot/wheezyInstall/47.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Partition settings" class="align-center" src="images/screenshot/wheezyInstall/48.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish partitioning" class="align-center" src="images/screenshot/wheezyInstall/49.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Write changes to disk" class="align-center" src="images/screenshot/wheezyInstall/50.png" style="width: 800px; height: 600px;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-install-packages-and-finish-up"&gt;
&lt;h2&gt;Step 3 - Install packages and finish up&lt;/h2&gt;
&lt;img alt="Popularity-contest" class="align-center" src="images/screenshot/wheezyInstall/51.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Select only [*] &lt;em&gt;Standard system utilities&lt;/em&gt; if you want to start with a minimal foundation (no desktop) to build your own post-install custom Debian configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Software selection" class="align-center" src="images/screenshot/wheezyInstall/52.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="GRUB" class="align-center" src="images/screenshot/wheezyInstall/53.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Finish install" class="align-center" src="images/screenshot/wheezyInstall/54.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="GRUB menu" class="align-center" src="images/screenshot/wheezyInstall/544.png" style="width: 800px; height: 600px;" /&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;If an encrypted &lt;em&gt;home&lt;/em&gt; partition was created in Step 2 the system will display a passphrase prompt to unlock the partition.&lt;/p&gt;
&lt;/div&gt;
&lt;img alt="Enter encrypt passphrase" class="align-center" src="images/screenshot/wheezyInstall/55.png" style="width: 800px; height: 600px;" /&gt;
&lt;img alt="Login" class="align-center" src="images/screenshot/wheezyInstall/56.png" style="width: 800px; height: 600px;" /&gt;
&lt;p&gt;Enjoy your fresh Debian!&lt;/p&gt;
&lt;p&gt;Add extra packages, stick with &lt;tt class="docutils literal"&gt;stable&lt;/tt&gt; or move to &lt;tt class="docutils literal"&gt;testing&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;unstable&lt;/tt&gt; or maybe setup a &lt;a class="reference external" href="linux-home-server.html"&gt;home server&lt;/a&gt;?&lt;/p&gt;
&lt;/div&gt;
</summary><category term="debian"></category><category term="linux"></category></entry></feed>