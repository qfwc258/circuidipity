<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Circuidipity</title><link href="http://www.circuidipity.com/" rel="alternate"></link><link href="http://www.circuidipity.com/feeds/daniel-wayne-armstrong.atom.xml" rel="self"></link><id>http://www.circuidipity.com/</id><updated>2016-05-01T11:59:00-04:00</updated><entry><title>Minimal to Morebuntu</title><link href="http://www.circuidipity.com/20160501.html" rel="alternate"></link><updated>2016-05-01T11:59:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2016-05-01:20160501.html</id><summary type="html">&lt;img alt="Ubuntu under-construction" class="align-right" src="images/ubuntu-crane-300.png" style="width: 300px; height: 300px;" /&gt;
&lt;p&gt;Start with a &lt;strong&gt;minimal install of Ubuntu 16.04 &amp;quot;Xenial Xerus&amp;quot;&lt;/strong&gt; and roll a &lt;strong&gt;Morebuntu&lt;/strong&gt; customized with the &lt;strong&gt;i3 tiling window manager&lt;/strong&gt; plus a collection of desktop applications.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;I use Ubuntu's &lt;a class="reference external" href="https://help.ubuntu.com/community/Installation/MinimalCD"&gt;minimal install image&lt;/a&gt; to create a console-only base configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minimal-ubuntu"&gt;
&lt;h2&gt;0. Minimal Ubuntu&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start here:&lt;/strong&gt; A &lt;a class="reference external" href="http://www.circuidipity.com/ubuntu-trusty-install.html"&gt;visual walk-through of a sample Ubuntu setup&lt;/a&gt; that makes use of an entire storage device divided into 3 partitions: an unencrypted &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; partition, and encrypted &lt;tt class="docutils literal"&gt;swap + home&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-x"&gt;
&lt;h2&gt;1. Install X&lt;/h2&gt;
&lt;p&gt;After a successful first boot and network active ... setup the X environment ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install xorg xinput xbindkeys xbacklight xvkbd fonts-liberation ttf-ubuntu-font-family
$ sudo apt install rxvt-unicode-256color xfonts-terminus
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="window-manager"&gt;
&lt;h2&gt;2. Window Manager&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lots&lt;/strong&gt; of choices! I like the &lt;a class="reference external" href="http://www.circuidipity.com/i3-tiling-window-manager.html"&gt;lightweight and delightful i3 window manager&lt;/a&gt;, with the latest packages provided by the i3 project's &lt;a class="reference external" href="https://i3wm.org/docs/repositories.html"&gt;Ubuntu repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Styling:&lt;/strong&gt; I use &lt;a class="reference external" href="http://www.ravefinity.com/p/download-ambiance-radiance-colors.html"&gt;Ambiance Colors&lt;/a&gt; + &lt;a class="reference external" href="http://www.ravefinity.com/p/vibrancy-colors-gtk-icon-theme.html"&gt;Vibrancy Color Icon&lt;/a&gt; themes. Download the &lt;tt class="docutils literal"&gt;deb&lt;/tt&gt; packages and install with &lt;tt class="docutils literal"&gt;sudo dpkg &lt;span class="pre"&gt;-i&lt;/span&gt; *.deb&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Depends: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gtk2-engines-{murrine,pixbuf}&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf lxappearance qt4-qtconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Theming for QT5 apps can be configured using the &lt;tt class="docutils literal"&gt;qt5ct&lt;/tt&gt; utility. Download the package &lt;a class="reference external" href="http://ppa.launchpad.net/nilarimogard/webupd8/ubuntu/pool/main/q/qt5ct/"&gt;available on the WebUpd8 PPA&lt;/a&gt; and install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="applications"&gt;
&lt;h2&gt;3. Applications&lt;/h2&gt;
&lt;p&gt;Install some favourite desktop packages ...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;editor&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;terminal&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rxvt-unicode&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;net&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;firefox&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;transmission-gtk&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multimedia&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ubuntu-restricted-extras&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;vlc&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; (with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-install-recommends&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;eog&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scrot&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;geeqie&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;gimp&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;libreoffice&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;qpdfview&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install vim rxvt-unicode tmux most
$ sudo apt --no-install-recommends install rhythmbox
$ sudo apt install pulseaudio pulseaudio-utils pavucontrol gstreamer1.0-pulseaudio alsa-utils sox
$ sudo apt install firefox default-jre icedtea-plugin transmission-gtk
$ sudo apt install ubuntu-restricted-extras ffmpeg rhythmbox-plugins vlc
$ sudo apt install eog scrot geeqie gimp gimp-help-en gimp-data-extras
$ sudo apt install libreoffice libreoffice-help-en-us libreoffice-gnome qpdfview
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-alternatives"&gt;
&lt;h2&gt;4. Update-alternatives&lt;/h2&gt;
&lt;p&gt;Configure symbolic links that determine default commands ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo update-alternatives --config editor
$ sudo update-alternatives --config pager
$ sudo update-alternatives --config x-terminal-emulator
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="morebuntu"&gt;
&lt;h2&gt;5. Morebuntu&lt;/h2&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://github.com/vonbrownie/linux-post-install/blob/master/scripts/morebuntu.sh"&gt;morebuntu shell script&lt;/a&gt; that covers most of steps 1-4.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="ubuntu"></category><category term="linux"></category><category term="i3"></category></entry><entry><title>LPTHW Exercise 18-21: Functions, Variables, Return</title><link href="http://www.circuidipity.com/lpthw-e18-21.html" rel="alternate"></link><updated>2015-11-19T17:10:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-19:lpthw-e18-21.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; How long will it take for Sebastiaan to pedal his bike to &lt;em&gt;Proxima Centauri&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import sys
import textwrap

script, &lt;span class="nv"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv

&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sebastiaan&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 133.78

def cyclist&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        {} __@&lt;/span&gt;
&lt;span class="s1"&gt;        {}  _`\&amp;lt;,_&lt;/span&gt;
&lt;span class="s1"&gt;        {}  (*)/ (*)&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;h, b, w&lt;span class="o"&gt;)&lt;/span&gt;

def intro&lt;span class="o"&gt;()&lt;/span&gt;:
    cyclist&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        Dutch cyclist {0} Bowier in September 2013 achieved a speed&lt;/span&gt;
&lt;span class="s1"&gt;        of {1} km/h with his VeloX3 bicycle, a new world record for a&lt;/span&gt;
&lt;span class="s1"&gt;        human powered vehicle.&lt;/span&gt;

&lt;span class="s1"&gt;        {0} has now offered you a ride on his bike from {2}&lt;/span&gt;
&lt;span class="s1"&gt;        to a destination of your choice! (Thanks {0}!)&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;name, s, origin&lt;span class="o"&gt;)&lt;/span&gt;

def itinerary&lt;span class="o"&gt;(&lt;/span&gt;destination, distance, time, mode&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;travelTimes.txt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;a+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    txt.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n{}-&amp;gt;{} ({} km)\n&amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;origin, destination, distance&lt;span class="o"&gt;))&lt;/span&gt;
    txt.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Travel Time: {} hours by {}\n&amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;time, mode&lt;span class="o"&gt;))&lt;/span&gt;
    txt.seek&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;txt.read&lt;span class="o"&gt;())&lt;/span&gt;
    txt.close&lt;span class="o"&gt;()&lt;/span&gt;

def tripTime&lt;span class="o"&gt;(&lt;/span&gt;distance, speed&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; float&lt;span class="o"&gt;(&lt;/span&gt;distance&lt;span class="o"&gt;)&lt;/span&gt; / speed

def trip&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Where would you like to go? &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distance to {} in kilometers? Enter a digit &amp;gt; &amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;g&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; tripTime&lt;span class="o"&gt;(&lt;/span&gt;d, s&lt;span class="o"&gt;)&lt;/span&gt;
    cyclist&lt;span class="o"&gt;(&lt;/span&gt;49&lt;span class="o"&gt;)&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        Working the pedals at top speed with no breaks, {} would&lt;/span&gt;
&lt;span class="s1"&gt;        get you to {} in {} hours.&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;name, g, round&lt;span class="o"&gt;(&lt;/span&gt;t, 2&lt;span class="o"&gt;))&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Details have been added to your itinerary:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    itinerary&lt;span class="o"&gt;(&lt;/span&gt;g, d, round&lt;span class="o"&gt;(&lt;/span&gt;t, 2&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;bike&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

intro&lt;span class="o"&gt;()&lt;/span&gt;
trip&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python pedalTime.py Toronto

----------- __@
-------  _&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;,_
------  &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;/ &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;


Dutch cyclist Sebastiaan Bowier in September &lt;span class="m"&gt;2013&lt;/span&gt; achieved a speed
of 133.78 km/h with his VeloX3 bicycle, a new world record &lt;span class="k"&gt;for&lt;/span&gt; a
human powered vehicle.

Sebastiaan has now offered you a ride on his bike from Toronto
to a destination of your choice! &lt;span class="o"&gt;(&lt;/span&gt;Thanks Sebastiaan!&lt;span class="o"&gt;)&lt;/span&gt;

Where would you like to go? &amp;gt; Proxima Centauri
Distance to Proxima Centauri in kilometers? Enter a digit &amp;gt; 40142174400000.0

----------------------------------------------------------- __@
-------------------------------------------------------  _&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;,_
------------------------------------------------------  &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;/ &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;


Working the pedals at top speed with no breaks, Sebastiaan would
get you to Proxima Centauri in 3.00061103304e+11 hours.

Details have been added to your itinerary:

Toronto-&amp;gt;Detroit &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;371&lt;/span&gt; km&lt;span class="o"&gt;)&lt;/span&gt;
Travel Time: 2.77 hours by bike

Toronto-&amp;gt;Proxima Centauri &lt;span class="o"&gt;(&lt;/span&gt;40142174400000.0 km&lt;span class="o"&gt;)&lt;/span&gt;
Travel Time: 3.00061103304e+11 hours by bike

$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 15-17: Reading and Writing Files</title><link href="http://www.circuidipity.com/lpthw-e15-17.html" rel="alternate"></link><updated>2015-11-18T13:55:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-18:lpthw-e15-17.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Reading and Writing Files&lt;/span&gt;
&lt;span class="c1"&gt;# * close - closes the file&lt;/span&gt;
&lt;span class="c1"&gt;# * read - reads the contents of a file... can assign the result to a variable&lt;/span&gt;
&lt;span class="c1"&gt;# * readline - reads just one line of a text file&lt;/span&gt;
&lt;span class="c1"&gt;# * truncate - empties the file&lt;/span&gt;
&lt;span class="c1"&gt;# * write(&amp;#39;stuff&amp;#39;) - writes &amp;#39;stuff&amp;#39; to the file&lt;/span&gt;

from sys import argv

script, &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; argv

print &lt;span class="s2"&gt;&amp;quot;We&amp;#39;re going to erase %r.&amp;quot;&lt;/span&gt; % filename
print &lt;span class="s2"&gt;&amp;quot;If you don&amp;#39;t want that, hit CTRL-C (^C).&amp;quot;&lt;/span&gt;
print &lt;span class="s2"&gt;&amp;quot;If you do want that, hit RETURN.&amp;quot;&lt;/span&gt;

raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Opening the file...&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# open &amp;#39;r&amp;#39; (read (default)) &amp;#39;w&amp;#39; writing and &amp;#39;a&amp;#39; append&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;w&amp;#39; will truncate the file if it already exists&lt;/span&gt;
&lt;span class="nv"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;filename, &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Truncating the file. Goodbye!&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# truncate not necessary... &amp;#39;w&amp;#39; already handles it&lt;/span&gt;
&lt;span class="c1"&gt;#target.truncate()&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Now I&amp;#39;m going to ask you for three lines.&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;line1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 1: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;line2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 2: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;line3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 3: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m going to write these to the file.&amp;quot;&lt;/span&gt;

target.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{0}\n{1}\n{2}\nWhat was that last bit? I said...\n&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;{2}\n&amp;quot;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;line1, line2, line3&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line1)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line2)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line3)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;And finally, we close it.&amp;quot;&lt;/span&gt;
target.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; Last night I attended the monthly &lt;a class="reference external" href="http://www.meetup.com/Python-Toronto/"&gt;Python Toronto Meetup&lt;/a&gt;. It was unintelligible (for a beginner) but inspiring (to me to learn more)! :-)&lt;/p&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 13-14: Parameters, Unpacking, Variables, Prompting and Passing</title><link href="http://www.circuidipity.com/lpthw-e13-14.html" rel="alternate"></link><updated>2015-11-17T00:26:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-17:lpthw-e13-14.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Add extra libraries or &lt;em&gt;modules&lt;/em&gt; of code to a program using &lt;strong&gt;import&lt;/strong&gt; and supply arguments to a Python script on the command line using &lt;strong&gt;argv&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;textwrap&lt;/strong&gt; module enables indenting a block quote for cleaner code but moving to left-margin at &lt;strong&gt;print()&lt;/strong&gt; time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import sys
import textwrap

script, firstName, &lt;span class="nv"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv

&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    (O&amp;lt; .: Learn Python The Hard Way&lt;/span&gt;
&lt;span class="s2"&gt;    (/)_&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} {} &amp;#39;&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;, author of&amp;#39;&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; * 10&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;firstName, lastName&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e13.2.py Zed Shaw

    &lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Learn Python The Hard Way
    &lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_

Zed Shaw , author of..........

&lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Learn Python The Hard Way
&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_

$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 11-12: Asking Questions, Prompting People</title><link href="http://www.circuidipity.com/lpthw-e11-12.html" rel="alternate"></link><updated>2015-11-16T13:21:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-16:lpthw-e11-12.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Now we're cooking! Put &lt;strong&gt;raw_input()&lt;/strong&gt; and &lt;strong&gt;format()&lt;/strong&gt; to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is the temperature today in Clearwater, Florida in Fahrenheit? &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; - 32&lt;span class="o"&gt;)&lt;/span&gt; * &lt;span class="o"&gt;(&lt;/span&gt;5.0/9&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; - 32&lt;span class="o"&gt;)&lt;/span&gt; * &lt;span class="o"&gt;(&lt;/span&gt;5.0/9&lt;span class="o"&gt;)&lt;/span&gt; + 273.15

print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;So a temperature of {} Fahrenheit converts to {:.2f} Celsius and {:.2f} Kelvin.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;f, c, k&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Or, to be more precise, a temperature of {} Fahrenheit converts to {} Celsius and {} Kelvin.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;f, round&lt;span class="o"&gt;(&lt;/span&gt;c,5&lt;span class="o"&gt;)&lt;/span&gt;, round&lt;span class="o"&gt;(&lt;/span&gt;k,5&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e11.1.py
What is the temperature today in Clearwater, Florida in Fahrenheit? &amp;gt; 80
So a temperature of &lt;span class="m"&gt;80&lt;/span&gt; Fahrenheit converts to 26.67 Celsius and 299.82 Kelvin.
Or, to be more precise, a temperature of &lt;span class="m"&gt;80&lt;/span&gt; Fahrenheit converts to 26.66667 Celsius and 299.81667 Kelvin.
$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 10: What Was That?</title><link href="http://www.circuidipity.com/lpthw-e10.html" rel="alternate"></link><updated>2015-11-15T15:46:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-15:lpthw-e10.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Playing with escape sequences:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;self-driving cars&lt;/span&gt;
&lt;span class="s1"&gt;... armoured cars&lt;/span&gt;
&lt;span class="s1"&gt;... \t\t\t\tgetaway cars&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{1} {0}\n\t{2} {0}\t\t{3} {0}\n{4} {4} {3} bumper {0}\n\a&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; * &lt;span class="m"&gt;40&lt;/span&gt; + cars&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Red&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;really&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Red car
        blue car                green car
really really green bumper car
........................................self-driving cars
armoured cars
                                getaway cars
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 9: Printing, Printing, Printing</title><link href="http://www.circuidipity.com/lpthw-e9.html" rel="alternate"></link><updated>2015-11-15T15:43:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-15:lpthw-e9.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Escape sequences and block quotes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;countdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n\n&amp;quot;&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;countdown&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;Liftoff!&lt;/span&gt;
&lt;span class="s2"&gt;Tower clear...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e09.1.py

10
9
8
7
6
5
4
3
2
1
0




Liftoff!
Tower clear...

$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 8: Printing, Printing</title><link href="http://www.circuidipity.com/lpthw-e8.html" rel="alternate"></link><updated>2015-11-15T14:45:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-15:lpthw-e8.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; More printing using the newer &lt;strong&gt;format()&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{} {} {} {}&amp;quot;&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;True, False, False, True&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;formatter, formatter, formatter, formatter&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;I had this thing.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;That you could type up right.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;But it didn&amp;#39;t sing.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;So I said goodnight.&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e08.1.py
&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; 4
one two three four
True False False True
&lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
I had this thing. That you could &lt;span class="nb"&gt;type&lt;/span&gt; up right. But it didn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t sing. So I said goodnight.
$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 7: More Printing</title><link href="http://www.circuidipity.com/lpthw-e7.html" rel="alternate"></link><updated>2015-11-15T14:38:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-15:lpthw-e7.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am practising printing in Python 2 using the &lt;strong&gt;print()&lt;/strong&gt; and &lt;strong&gt;format()&lt;/strong&gt; functions inherited from Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;poem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Wreck of the Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;poet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Longfellow&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;poem + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + poet&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + poet&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;poem&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;poem, poet&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 6: Strings and Text</title><link href="http://www.circuidipity.com/lpthw-e6.html" rel="alternate"></link><updated>2015-11-15T12:59:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-15:lpthw-e6.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am not entirely clear about the difference between &lt;strong&gt;%r&lt;/strong&gt; vs &lt;strong&gt;%s&lt;/strong&gt; in string formatting. I &lt;strong&gt;do&lt;/strong&gt; understand they call different functions (&lt;strong&gt;repr&lt;/strong&gt; and &lt;strong&gt;str&lt;/strong&gt;) and produce different output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;vessel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;The Wreck of the %r&amp;quot;&lt;/span&gt; % vessel
The Wreck of the &lt;span class="s1"&gt;&amp;#39;Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;The Wreck of the %s&amp;quot;&lt;/span&gt; % vessel
The Wreck of the Hesperus
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the book states, the first example is &amp;quot;raw output&amp;quot; and the second is the content more cleanly formatted for printing. Why using &lt;strong&gt;repr&lt;/strong&gt; would be desirable under certain circumstances will probably become more clear later on.&lt;/p&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 5: More Variables and Printing</title><link href="http://www.circuidipity.com/lpthw-e5.html" rel="alternate"></link><updated>2015-11-14T17:25:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-14:lpthw-e5.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; The old way of printing format strings using &lt;strong&gt;%&lt;/strong&gt; and the new way using &lt;strong&gt;.format()&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;astronaut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yuri Gagarin&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;astronaut_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alan Shepard&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Baikonur&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;launch_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cape Canaveral&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1961

print &lt;span class="s2"&gt;&amp;quot;%s blasted off from %s and became the first %s to reach space in %d.&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;astronaut, launch, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{} blasted off from {} and became the first {} to reach space in {}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;astronaut, launch, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{1} blasted off from {3} and became the first {5} to reach space in {6}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;astronaut, astronaut_1, launch, launch_1, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;American&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e05.2.py
Yuri Gagarin blasted off from Baikonur and became the first human to reach space in 1961.
Yuri Gagarin blasted off from Baikonur and became the first human to reach space in 1961.
Alan Shepard blasted off from Cape Canaveral and became the first American to reach space in 1961.
$
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 4: Variables and Names</title><link href="http://www.circuidipity.com/lpthw-e4.html" rel="alternate"></link><updated>2015-11-14T16:18:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-14:lpthw-e4.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Equal sign assigns whatever is on the right to the variable on the left. Double equal signs perform a comparison. Same as shell scripting.&lt;/p&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 3: Numbers and Math</title><link href="http://www.circuidipity.com/lpthw-e3.html" rel="alternate"></link><updated>2015-11-14T16:04:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-14:lpthw-e3.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Order of math operations is PEMDAS: &lt;em&gt;Parentheses Exponents Multiplication Division Addition Subtraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So long as at least one of the numbers in a calculation is a floating point number the answer returned will also be floating point. Otherwise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="m"&gt;5&lt;/span&gt; / 2
2
&amp;gt;&amp;gt;&amp;gt; 5.0 / 2
2.5
&amp;gt;&amp;gt;&amp;gt; 5.0 % 2
1.0
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 2: Comments and Pound Characters</title><link href="http://www.circuidipity.com/lpthw-e2.html" rel="alternate"></link><updated>2015-11-14T15:43:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-14:lpthw-e2.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Using the pound character (#) to add comments or disable a line of code works the same in Python as in Bash shell scripting.&lt;/p&gt;
&lt;p&gt;Different languages &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comment_%28computer_programming%29#Examples"&gt;do things differently ...&lt;/a&gt;&lt;/p&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 1: A Good First Program</title><link href="http://www.circuidipity.com/lpthw-e1.html" rel="alternate"></link><updated>2015-11-13T21:49:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-13:lpthw-e1.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; The traditional &lt;em&gt;Hello World&lt;/em&gt; program. &lt;strong&gt;Print&lt;/strong&gt; in Python 2 encloses the statement in quotes while Python 3 adds brackets (and brackets format is backward-compatible to Python 2 but not vice-versa):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
Hello World!
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello World!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>LPTHW Exercise 0: The Setup</title><link href="http://www.circuidipity.com/lpthw-e0.html" rel="alternate"></link><updated>2015-11-12T00:05:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-12:lpthw-e0.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am doing the Python exercises on a computer running Linux (of course!). Debian &lt;tt class="docutils literal"&gt;stretch/testing&lt;/tt&gt; uses Python 2.7 by default.&lt;/p&gt;
&lt;p&gt;Zed recommends &lt;tt class="docutils literal"&gt;gedit&lt;/tt&gt; as the text editor to begin writing code. Let's give it a shot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install gedit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upon launching the editor I immediately run into a problem of thick transparent borders being drawn around its windows. &lt;strong&gt;Fix...&lt;/strong&gt; Create &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/gtk-3.0/gtk.css&lt;/span&gt;&lt;/tt&gt; with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.window-frame, .window-frame:backdrop &lt;span class="o"&gt;{&lt;/span&gt;
box-shadow: &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; black&lt;span class="p"&gt;;&lt;/span&gt;
border-style: none&lt;span class="p"&gt;;&lt;/span&gt;
margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
border-radius: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.titlebar &lt;span class="o"&gt;{&lt;/span&gt;
border-radius: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="https://bbs.archlinux.org/viewtopic.php?pid=1469360#p1469360"&gt;Evince (GTK3?) doesn't actually run fullscreen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My terminal is &lt;tt class="docutils literal"&gt;urxvt&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install rxvt-unicode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Terminal settings (fonts, colours, tabs) are modified in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.Xresources&lt;/span&gt;&lt;/tt&gt;. &lt;a class="reference external" href="https://github.com/vonbrownie/dotfiles/blob/master/.Xresources"&gt;This is mine.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Launching Python in interactive mode I see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python
Python 2.7.10+ &lt;span class="o"&gt;(&lt;/span&gt;default, Oct &lt;span class="m"&gt;10&lt;/span&gt; 2015, 09:11:24&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 5.2.1 20151028&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt; quit&lt;span class="o"&gt;()&lt;/span&gt;
$
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category><category term="linux"></category></entry><entry><title>Learn Python the Hard Way with the DUDE</title><link href="http://www.circuidipity.com/lpthw-dude.html" rel="alternate"></link><updated>2015-11-19T18:01:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-11-11:lpthw-dude.html</id><summary type="html">&lt;img alt="LPTHW" class="align-right" src="images/lpthw-begin-1.png" style="width: 250px; height: 479px;" /&gt;
&lt;p&gt;Using Linux and writing &lt;a class="reference external" href="https://github.com/vonbrownie/homebin"&gt;simple shell scripts&lt;/a&gt; has been an enjoyable peek at programming. But now I want to go farther and learning &lt;a class="reference external" href="http://www.circuidipity.com/tag-python.html"&gt;Python&lt;/a&gt; strikes me as a useful next step. Starting with the free HTML version of the book &lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way&lt;/a&gt; by &lt;strong&gt;Zed Shaw&lt;/strong&gt;, who states right off the bat:&lt;/p&gt;
&lt;blockquote&gt;
It's only the &amp;quot;hard&amp;quot; way because it uses a technique called &lt;em&gt;instruction&lt;/em&gt;. Instruction is where I tell you to do a sequence of controlled exercises designed to build a skill through repetition. This technique works very well with beginners who know nothing and need to acquire basic skills before they can understand more complex topics. It's used in everything from martial arts to music to even basic math and reading skills.&lt;/blockquote&gt;
&lt;p&gt;Zed is a (probably very cool) dude but the DUDE is a &lt;strong&gt;Daily Undertaking of Deliberate Effort&lt;/strong&gt;. Which translates as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set aside a block of time free of distractions to focus on improving a skill&lt;/li&gt;
&lt;li&gt;push ahead with tasks of increasing complexity towards goals slightly out-of-reach&lt;/li&gt;
&lt;li&gt;cultivate feedback&lt;/li&gt;
&lt;li&gt;do a bit (or a lot) every day&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For LPTHW I will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set a timer for a &lt;strong&gt;50 minute session&lt;/strong&gt; to focus on the coding exercises (and place the timer out-of-reach to ensure I get up and stretch...)&lt;/li&gt;
&lt;li&gt;work methodically through each exercise&lt;/li&gt;
&lt;li&gt;send a one-word email (&lt;em&gt;Done!&lt;/em&gt;) to a friend to inform that &lt;em&gt;Python was performed this day&lt;/em&gt;; who will send a one-word (&lt;em&gt;OK&lt;/em&gt;) reply&lt;/li&gt;
&lt;li&gt;do the work (minimum 1 session) every day&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e0.html"&gt;Exercise 0: The Setup&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e1.html"&gt;Exercise 1: A Good First Program&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e2.html"&gt;Exercise 2: Comments and Pound Characters&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e3.html"&gt;Exercise 3: Numbers and Math&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e4.html"&gt;Exercise 4: Variables and Names&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e5.html"&gt;Exercise 5: More Variables and Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e6.html"&gt;Exercise 6: Strings and Text&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e7.html"&gt;Exercise 7: More Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e8.html"&gt;Exercise 8: Printing, Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e9.html"&gt;Exercise 9: Printing, Printing, Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e10.html"&gt;Exercise 10: What Was That?&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e11-12.html"&gt;Exercise 11: Asking Questions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e11-12.html"&gt;Exercise 12: Prompting People&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e13-14.html"&gt;Exercise 13: Parameters, Unpacking, Variables&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e13-14.html"&gt;Exercise 14: Prompting and Passing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 15: Reading Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 16: Reading and Writing Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 17: More Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 18: Names, Variables, Code, Functions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 19: Functions and Variables&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 20: Functions and Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 21: Functions Can Return Something&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="lpthw"></category><category term="python"></category><category term="programming"></category></entry><entry><title>Keystrokes cheatsheet</title><link href="http://www.circuidipity.com/keystrokes.html" rel="alternate"></link><updated>2015-09-25T16:30:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-09-25:keystrokes.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Work-in-progress:&lt;/strong&gt; Keystroke combos that I find useful (listed here to jog my memory!)...&lt;/p&gt;
&lt;div class="section" id="chromebook"&gt;
&lt;h2&gt;Chromebook&lt;/h2&gt;
&lt;p&gt;Top row on my &lt;a class="reference external" href="http://www.circuidipity.com/c720-chromebook-to-jessiebook.html"&gt;Jessiebook&lt;/a&gt;  keyboard has a series of shortcut icons (&lt;tt class="docutils literal"&gt;Brightness&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;Volume&lt;/tt&gt;...) that identify in Linux as the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;F1-F10&lt;/span&gt;&lt;/tt&gt; keys and the &lt;tt class="docutils literal"&gt;Search&lt;/tt&gt; key (in the &lt;tt class="docutils literal"&gt;CapsLk&lt;/tt&gt; position) acts as &lt;tt class="docutils literal"&gt;Super&lt;/tt&gt; (Windows) modifier key.&lt;/p&gt;
&lt;p&gt;Enable these keyboard shortcuts in Debian by first installing:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xbindkeys&lt;/tt&gt; - associate keys to shell commands&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xbacklight&lt;/tt&gt; - set backlight level using RandR&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;pulseaudio-utils&lt;/span&gt;&lt;/tt&gt; - manage sound with pactl&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;xvkbd&lt;/tt&gt; - send characters to another client&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install xbindkeys xbacklight pulseaudio-utils xvkbd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See &lt;a class="reference external" href="http://www.circuidipity.com/c720-chromebook-to-jessiebook.html"&gt;Chromebook to Jessiebook&lt;/a&gt; for a sample configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h2&gt;Firefox&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-T&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;open new tab&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-Tab&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;switch tab&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SHIFT-CTRL-Tab&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;switch tab backwards&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-W&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;close tab&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-[&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;page back&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-]&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;page forward&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-L&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;enter new address/search&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-F&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;find&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;F3&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;find again&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;SHIFT-F3&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;find previous&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;F5&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;reload page&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="shell"&gt;
&lt;h2&gt;Shell&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-A&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move to the start of line&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-E&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;move to the end of line&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-U&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;erase from cursor to start of line&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-K&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;erase from cursor to end of line&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-L&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;clear screen&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;CTRL-R&lt;/span&gt;&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;reverse incremental search of history&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="tmux"&gt;
&lt;h2&gt;Tmux&lt;/h2&gt;
&lt;p&gt;My &lt;a class="reference external" href="http://www.circuidipity.com/tmux.html"&gt;tmux cheatsheet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cheatsheet"></category><category term="linux"></category><category term="shell"></category></entry><entry><title>Create a self-signed SSL certificate</title><link href="http://www.circuidipity.com/self-signed-ssl-certificate.html" rel="alternate"></link><updated>2015-08-27T19:25:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-27:self-signed-ssl-certificate.html</id><summary type="html">&lt;p&gt;Secure web access to services hosted on a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi home server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What's up:&lt;/strong&gt; I am running &lt;a class="reference external" href="http://www.circuidipity.com/ttrss.html"&gt;Tiny Tiny RSS&lt;/a&gt; (ttrss) and &lt;a class="reference external" href="http://www.circuidipity.com/php-nginx-postgresql.html"&gt;Nginx&lt;/a&gt; on a Debian-powered Pi and want to divert HTTP traffic from port 80 to HTTPS login and access news feeds on port 443. Rather than obtain an SSL certificate from a certificate authority (CA) its a simple matter to create one for personal use.&lt;/p&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;openssl&lt;/tt&gt; and generate a certificate for Nginx:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install openssl
$ sudo mkdir /etc/nginx/ssl
$ sudo openssl req -x509 -nodes -days &lt;span class="m"&gt;365&lt;/span&gt; -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new server block in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-available&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen 80&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;## listen for ipv4; this line is default and implied&lt;/span&gt;
    server_name rss.myraspberrypi.ca&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; https://$host$request_uri&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;## redirect all non-https traffic to https&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    server_name rss.myraspberrypi.ca&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate /etc/nginx/ssl/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key /etc/nginx/ssl/server.key&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Activate the block by creating a symlink in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled&lt;/span&gt;&lt;/tt&gt; and restart server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl restart nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure &lt;a class="reference external" href="http://www.circuidipity.com/20141006.html"&gt;port forwarding on the router&lt;/a&gt; and (optional) &lt;a class="reference external" href="https://wiki.gandi.net/en/dns/zone/subdomain"&gt;setup a subdomain&lt;/a&gt; with a hosting/domain provider.&lt;/p&gt;
&lt;p&gt;Note the first time navigating to the new HTTPS address the (Firefox) browser warns &amp;quot;This Connection is Untrusted&amp;quot; (which is to be expected since its a self-signed certificate vs CA verification).&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;Sources: &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04"&gt;Create an SSL certificate on Nginx for Ubuntu&lt;/a&gt;; &lt;a class="reference external" href="https://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom"&gt;Rewrite HTTP requests to HTTPS&lt;/a&gt;; &lt;a class="reference external" href="http://nginx.org/en/docs/http/server_names.html"&gt;Nginx server_names&lt;/a&gt;&lt;/p&gt;
</summary><category term="network"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Install CyanogenMod on Nexus 4</title><link href="http://www.circuidipity.com/install-cyanogenmod-nexus-4.html" rel="alternate"></link><updated>2015-08-21T12:26:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-19:install-cyanogenmod-nexus-4.html</id><summary type="html">&lt;p&gt;Replace stock Android with CyanogenMod on the Nexus 4 using Linux.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;Thanks to a &lt;strong&gt;very generous friend&lt;/strong&gt; who upgraded to a new smartphone I now have her old Google Nexus 4. I have dabbled with alternative Android firmwares in the past, and was inspired to give CyaonogenMod a go on this phone after reading &lt;a class="reference external" href="https://lwn.net/Articles/602521/"&gt;Android without the mothership [LWN.net]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download"&gt;
&lt;h2&gt;0. Download&lt;/h2&gt;
&lt;p&gt;I install CyanogenMod from a host running Debian. Download &lt;tt class="docutils literal"&gt;adb&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;fastboot&lt;/tt&gt; install tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install android-tools-adb android-tools-fastboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nexus 4 device is code-named &lt;tt class="docutils literal"&gt;mako&lt;/tt&gt;. Download:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a recovery image (TWRP) - &lt;a class="reference external" href="https://twrp.me/devices/lgnexus4.html"&gt;https://twrp.me/devices/lgnexus4.html&lt;/a&gt; (&lt;a class="reference external" href="https://dl.twrp.me/mako/"&gt;latest is 2.8.7.0&lt;/a&gt; as of 7/29)&lt;/li&gt;
&lt;li&gt;the Cyanogenmod ROM nightly build &lt;a class="reference external" href="https://download.cyanogenmod.org/?device=mako&amp;amp;type="&gt;specific to this device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="developer-options"&gt;
&lt;h2&gt;1. Developer Options&lt;/h2&gt;
&lt;p&gt;On the Nexus I enable developer options by navigating to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Settings-&amp;gt;About&lt;/span&gt; phone&lt;/tt&gt;, click to open and make +7 taps on &lt;strong&gt;Build&lt;/strong&gt; number. Displays &lt;tt class="docutils literal"&gt;You are now a developer&lt;/tt&gt;. Return to settings and &lt;tt class="docutils literal"&gt;Developer Options&lt;/tt&gt; is now visible. Click to open and activate &lt;tt class="docutils literal"&gt;USB debugging&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-device"&gt;
&lt;h2&gt;2. Connect device&lt;/h2&gt;
&lt;p&gt;Connect phone to host via USB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ lsusb &lt;span class="p"&gt;|&lt;/span&gt; grep -i nexus
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 003: ID 18d1:4ee2 Google Inc. Nexus &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;debug&lt;span class="o"&gt;)&lt;/span&gt;
$ adb devices -l
* daemon not running. starting it now on port &lt;span class="m"&gt;5037&lt;/span&gt; *
* daemon started successfully *
List of devices attached
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       offline usb:1-12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confirm &lt;tt class="docutils literal"&gt;Allow usb debugging&lt;/tt&gt; in pop-up on the phone. Re-run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb devices -l
List of devices attached
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       device usb:1-12 product:occam model:Nexus_4 device:mako
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlock-bootloader"&gt;
&lt;h2&gt;3. Unlock bootloader&lt;/h2&gt;
&lt;p&gt;Boot the device into &lt;strong&gt;fastboot&lt;/strong&gt; mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb reboot bootloader
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once device is in fastboot mode, verify host sees device and unlock:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot devices -l
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       fastboot usb:1-12
$ fastboot oem unlock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-twrp"&gt;
&lt;h2&gt;4. Install TWRP&lt;/h2&gt;
&lt;p&gt;While in fastboot mode flash the TWRP recovery image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot flash recovery twrp-VERSION-mako.img
sending &lt;span class="s1"&gt;&amp;#39;recovery&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9028&lt;/span&gt; KB&lt;span class="o"&gt;)&lt;/span&gt;...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.287s&lt;span class="o"&gt;]&lt;/span&gt;
writing &lt;span class="s1"&gt;&amp;#39;recovery&amp;#39;&lt;/span&gt;...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.501s&lt;span class="o"&gt;]&lt;/span&gt;
finished. total time: 0.787s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reboot the bootloader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot reboot-bootloader
rebooting into bootloader...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.001s&lt;span class="o"&gt;]&lt;/span&gt;
finished. total time: 0.001s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the device volume keys to navigate to &lt;strong&gt;Recovery&lt;/strong&gt; mode and power key to select. TWRP recovery starts. Tap &lt;strong&gt;Wipe&lt;/strong&gt; and swipe to start &lt;strong&gt;Factory Reset&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-cyanogenmod"&gt;
&lt;h2&gt;5. Install CyanogenMod&lt;/h2&gt;
&lt;p&gt;Copy the CyanogenMod distribution zip file into device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb push cm-12.1-VERSION-NIGHTLY-mako.zip /sdcard
&lt;span class="m"&gt;3753&lt;/span&gt; KB/s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;263171832&lt;/span&gt; bytes in 68.465s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Return to TWRP main menu and tap &lt;strong&gt;Install&lt;/strong&gt;. Search in file system for the freshly-installed zip and tap to select. Tap checkbox Zip file signature verification and swipe to confirm flash. The message &lt;tt class="docutils literal"&gt;Successfull&lt;/tt&gt; should appear. Tap &lt;tt class="docutils literal"&gt;Reboot System&lt;/tt&gt; and device boots into CyanogenMod. Yes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f-droid"&gt;
&lt;h2&gt;6. F-Droid&lt;/h2&gt;
&lt;p&gt;As a replacement for the non-free Google Play Store app I use the &lt;a class="reference external" href="https://f-droid.org/about/"&gt;F-Droid&lt;/a&gt; free software app repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;on the phone navigate to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Settings-&amp;gt;Security-&amp;gt;Unknown&lt;/span&gt; sources&lt;/tt&gt; and tap to allow&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://f-droid.org/FDroid.apk"&gt;download the F-Droid app&lt;/a&gt; to host and install the &lt;tt class="docutils literal"&gt;apk&lt;/tt&gt; to phone using &lt;a class="reference external" href="https://developer.android.com/tools/help/adb.html#move"&gt;adb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb install /path/to/FDroid.apk
&lt;span class="m"&gt;4373&lt;/span&gt; KB/s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3942326&lt;/span&gt; bytes in 0.880s&lt;span class="o"&gt;)&lt;/span&gt;
        pkg: /data/local/tmp/FDroid.apk
Success
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two apps I like and use daily are &lt;a class="reference external" href="https://f-droid.org/repository/browse/?fdfilter=fbreader&amp;amp;fdid=org.geometerplus.zlibrary.ui.android"&gt;fbreader&lt;/a&gt; for ebooks and &lt;a class="reference external" href="https://f-droid.org/repository/browse/?fdfilter=podcast&amp;amp;fdid=de.danoeh.antennapod"&gt;AntennaPod&lt;/a&gt; for downloading and listening to podcasts.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="android"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>I would rather be ashes than dust</title><link href="http://www.circuidipity.com/rather-ashes-than-dust.html" rel="alternate"></link><updated>2015-08-13T15:12:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-13:rather-ashes-than-dust.html</id><summary type="html">&lt;img alt="Soyuz night launch" class="align-right" src="images/soyuz-at-night-2.png" /&gt;
&lt;p&gt;&lt;strong&gt;Jack London (1876-1916):&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I would rather be ashes than dust;&lt;/div&gt;
&lt;div class="line"&gt;I would rather that my spark should&lt;/div&gt;
&lt;div class="line"&gt;burn out in a brilliant blaze than it&lt;/div&gt;
&lt;div class="line"&gt;should be stifled by dry-rot; I would&lt;/div&gt;
&lt;div class="line"&gt;rather be in a superb meteor; every&lt;/div&gt;
&lt;div class="line"&gt;atom of me in a magnificent glow&lt;/div&gt;
&lt;div class="line"&gt;than in a sleepy and permanent&lt;/div&gt;
&lt;div class="line"&gt;planet; the proper function of man is&lt;/div&gt;
&lt;div class="line"&gt;to live, not to exist; I shall not waste&lt;/div&gt;
&lt;div class="line"&gt;my days in trying to prolong them;&lt;/div&gt;
&lt;div class="line"&gt;I shall USE my time.&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
</summary><category term="quotes"></category></entry><entry><title>Incremental backups</title><link href="http://www.circuidipity.com/incremental-backups-rsnapshot.html" rel="alternate"></link><updated>2016-02-12T23:13:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-12:incremental-backups-rsnapshot.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi Home Server Hack #3 .:&lt;/a&gt; Make incremental and automatic backups of a home folder using &lt;strong&gt;rsnapshot + cron&lt;/strong&gt; (and manual backups via &lt;strong&gt;public transit&lt;/strong&gt;).&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;Backup strategy &lt;strong&gt;Version 0&lt;/strong&gt; for my home folder was &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;. That is, I would simply make a periodic, manual sync of files using &lt;strong&gt;rsync&lt;/strong&gt; from my primary computer to a &lt;strong&gt;portable&lt;/strong&gt; encrypted &lt;a class="reference external" href="http://www.circuidipity.com/encrypt-external-drive.html"&gt;USB hard drive&lt;/a&gt;. Then ride the &lt;strong&gt;subway&lt;/strong&gt; to a family/friend's place and swap drives (offsite backup).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version 1&lt;/strong&gt; expanded to &lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;Raspberry Pi&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;. One of the advantages of setting up a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi home server&lt;/a&gt; is providing a 24/7 uptime location to automatically (using &lt;strong&gt;cron&lt;/strong&gt;) mirror my laptop's home folder over the local area network (LAN).&lt;/p&gt;
&lt;p&gt;These backups are &lt;strong&gt;snapshots&lt;/strong&gt; of home at a particular date. Pi server has a backup of 24 hours or less, the USB drive has another snapshot a few weeks old, the offsite another snapshot from a month ago. But there is no ordered progression of backups from Day 2 to Day 3, Week 4, Month 5, etc. One alternative is to every day stash an entire backup of my home folder but its a sub-optimal use of resources and would quickly fill a hard drive.&lt;/p&gt;
&lt;p&gt;A much better solution is to use &lt;a class="reference external" href="http://rsnapshot.org/"&gt;rsnapshot&lt;/a&gt;  to make &lt;strong&gt;incremental backups&lt;/strong&gt; and my backup strategy &lt;strong&gt;Version 2&lt;/strong&gt; now incorporates:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsnapshot&lt;/strong&gt; + &lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;Raspberry Pi&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;nightly a cron job runs &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; to sync &lt;tt class="docutils literal"&gt;/home/&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/etc/&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/my/backup/location/daily.0/&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;daily.0&lt;/tt&gt; increments to &lt;tt class="docutils literal"&gt;daily.1&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;daily.1&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;daily.2&lt;/tt&gt;, etc. (retention set to 7 days)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--hard-links&lt;/span&gt;&lt;/tt&gt; is how &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; performs its minimal-storage-magic... if a file remains unchanged in the next backup a hard link is created so subsequent backups only contain modified files and links;&lt;/li&gt;
&lt;li&gt;in the wee morning hours another cron job syncs &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; to Pi server;&lt;/li&gt;
&lt;li&gt;every Saturday &lt;tt class="docutils literal"&gt;daily.6&lt;/tt&gt; rotates to &lt;tt class="docutils literal"&gt;weekly.0&lt;/tt&gt; (and &lt;tt class="docutils literal"&gt;weekly.0&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;weekly.1&lt;/tt&gt; ... with 4 week retention);&lt;/li&gt;
&lt;li&gt;on the 1st of the month &lt;tt class="docutils literal"&gt;weekly.3&lt;/tt&gt; rotates to &lt;tt class="docutils literal"&gt;month.0&lt;/tt&gt; (12 month retention);&lt;/li&gt;
&lt;li&gt;every week or so I sync &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; to the USB drive;&lt;/li&gt;
&lt;li&gt;every month or so I ride the subway to offsite storage and swap drives&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;0. Rsnapshot&lt;/h2&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt;, make a directory to store backups, and make a copy of the default config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install rsnapshot
$ mkdir /my/backup/location
$ sudo cp /etc/rsnapshot.conf /etc/rsnapshot.conf.default
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;tt class="docutils literal"&gt;/etc/rsnapshot.conf&lt;/tt&gt; (important to separate fields with &lt;strong&gt;TABS&lt;/strong&gt; not spaces). Example of a few tweaks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;snapshot_root   /my/backup/location

cmd_cp          /bin/cp
cmd_rm          /bin/rm
cmd_rsync       /usr/bin/rsync
cmd_du          /usr/bin/du
cmd_rsnapshot_diff      /usr/bin/rsnapshot-diff

retain  daily   7
retain  weekly  4
retain  monthly 12

exclude_file    /home/USER/.rsyncExclude  &lt;span class="c1"&gt;# ...and create this file with list of things to exclude from backup&lt;/span&gt;

link_dest       1

sync_first      &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# allows better recovery in the event that rsnapshot is interrupted (see: ``man rsnapshot``)&lt;/span&gt;

&lt;span class="c1"&gt;# LOCALHOST&lt;/span&gt;
backup  /home/          localhost/
backup  /etc/           localhost/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check config syntax and run backup test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo rsnapshot configtest
$ sudo rsnapshot -t sync
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything checks out OK go ahead and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo rsnapshot sync &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo rsnapshot daily &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rsnapshot du
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Automate backups by modifying the sample cron file provided in &lt;tt class="docutils literal"&gt;/etc/cron.d/rsnapshot&lt;/tt&gt; and running jobs as root. Example config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# m h  dom mon dow   command&lt;/span&gt;
&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; * * *     root    /usr/bin/rsnapshot sync &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/rsnapshot daily
&lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; * * &lt;span class="m"&gt;6&lt;/span&gt;     root    /usr/bin/rsnapshot weekly
&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; * *     root    /usr/bin/rsnapshot monthly
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="backup-the-backup"&gt;
&lt;h2&gt;1. Backup the backup&lt;/h2&gt;
&lt;p&gt;Rsnapshot operates as a &lt;strong&gt;pull&lt;/strong&gt; program: it pulls in backups from local and remote devices. Instead of juggling access permissions to allow the rsnapshot server to talk with other devices I decided to limit &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; to making backups on &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; and use &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;my already-configured SSH key setup&lt;/a&gt; to &lt;strong&gt;push&lt;/strong&gt; a snapshot of the backup to my Raspberry Pi for remote storage.&lt;/p&gt;
&lt;div class="section" id="on-the-pi"&gt;
&lt;h3&gt;1.1 On the Pi&lt;/h3&gt;
&lt;p&gt;Create a directory to store the backup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ mkdir /path/to/backup
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-localhost"&gt;
&lt;h3&gt;1.2 On localhost&lt;/h3&gt;
&lt;p&gt;Set the ip address and hostname of the Pi server in &lt;tt class="docutils literal"&gt;/etc/hosts&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;192.168.1.88    raspberry.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test synching &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; on &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspberry.server:/path/to/backup/&lt;/span&gt;&lt;/tt&gt; with the &lt;tt class="docutils literal"&gt;rsync &lt;span class="pre"&gt;--dry-run&lt;/span&gt;&lt;/tt&gt; option (I exclude &lt;tt class="docutils literal"&gt;/etc/&lt;/tt&gt; from the backup):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsync --dry-run --archive --hard-links --numeric-ids --delete --exclude&lt;span class="o"&gt;=&lt;/span&gt;etc/ --verbose /my/backup/location/ raspberry.server:/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything checks out OK drop &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--dry-run&lt;/span&gt;&lt;/tt&gt; and re-run the command to make a proper backup.&lt;/p&gt;
&lt;p&gt;I use &lt;tt class="docutils literal"&gt;keychain&lt;/tt&gt; to manage &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;SSH keys for password-less logins to the Pi&lt;/a&gt;. Create a &lt;tt class="docutils literal"&gt;backupSnap.sh&lt;/tt&gt; shell script and place in &lt;tt class="docutils literal"&gt;~/bin&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
. &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/.keychain/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOSTNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-sh
rsync --archive --hard-links --numeric-ids --delete --exclude&lt;span class="o"&gt;=&lt;/span&gt;etc/ /my/backup/location/ &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Automate the backups by creating a cron job (example that runs daily at 04:50):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# m h  dom mon dow   command&lt;/span&gt;
&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; * * *  /home/USERNAME/bin/backupSnap.sh raspberry.server:/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="external-drive-and-offsite-storage"&gt;
&lt;h2&gt;2. External drive and offsite storage&lt;/h2&gt;
&lt;p&gt;I connect my USB drive and sync the backup to the device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ /home/USERNAME/bin/backupSnap.sh /media/USB/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and take my hard drive for &lt;a class="reference external" href="http://ttc.ca/Routes/General_Information/Maps/index.jsp"&gt;a ride on the subway&lt;/a&gt; to say hello to my offsite storage!&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="network"></category><category term="debian"></category><category term="linux"></category><category term="raspberry pi"></category></entry><entry><title>Run remote X applications on a local display</title><link href="http://www.circuidipity.com/x11-forwarding-ssh.html" rel="alternate"></link><updated>2015-08-11T15:43:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-11:x11-forwarding-ssh.html</id><summary type="html">&lt;p&gt;Run remote X applications on a local display with X11 forwarding over SSH.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;I give my &lt;a class="reference external" href="http://www.circuidipity.com/c720-chromebook-to-jessiebook.html"&gt;Jessiebook's smallish amount of RAM&lt;/a&gt; a bit of a break by enlisting other machines on my home network to run X apps. Once &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;SSH is properly configured&lt;/a&gt; it is easy to use X11 forwarding to have apps running on the server show up on the client's local display.&lt;/p&gt;
&lt;div class="section" id="on-the-server"&gt;
&lt;h3&gt;On the server&lt;/h3&gt;
&lt;p&gt;Activate X11 forwarding on the OpenSSH server by modifying &lt;tt class="docutils literal"&gt;/etc/ssh/sshd_config&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;X11Forwarding yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and restart the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-client"&gt;
&lt;h3&gt;On the client&lt;/h3&gt;
&lt;p&gt;X11 forwarding options can be configured system-wide in &lt;tt class="docutils literal"&gt;/etc/ssh/ssh_config&lt;/tt&gt; or per-user in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.ssh/config&lt;/span&gt;&lt;/tt&gt; or simply forward X on a connection-by-connection basis at login with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -X remote.host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some apps might require the &lt;tt class="docutils literal"&gt;ForwardX11Trusted&lt;/tt&gt; option to allow the full set of X functions from a &lt;strong&gt;trusted&lt;/strong&gt; remote server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -Y remote.host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="warning"&gt;WARNING!&lt;/span&gt; An intruder on the SSH server will be able to capture everything on the local screen and every keystroke with &lt;tt class="docutils literal"&gt;ForwardX11Trusted&lt;/tt&gt; enabled.&lt;/p&gt;
&lt;p&gt;If SSH has properly configured X11 forwarding it sets &lt;tt class="docutils literal"&gt;$DISPLAY&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$D&lt;/span&gt;ISPLAY
localhost:10.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Launch an X app on the server and it opens on the local display:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ urxvt &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logging into a remote host just to run a single app can be overkill. Run one-off commands with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; option which backgrounds the SSH client before running the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -fX remote.host urxvt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One interesting use I discovered for X11 forwarding is running the &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; music player. A limitation of X11 forwarding is that sound is not transmitted to the client's audio hardware. Turns out that is a &lt;strong&gt;feature&lt;/strong&gt; on my home network setup because my speakers are connected to the server. I launch &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; on the server, display and &lt;a class="reference external" href="http://www.circuidipity.com/thinkpad-usb-keyboard-trackpoint.html"&gt;control the player&lt;/a&gt; on the client, and the &lt;a class="reference external" href="https://www.youtube.com/watch?v=mZDYJYqcYK4"&gt;good and funky sounds&lt;/a&gt; issue forth from the server!&lt;/p&gt;
&lt;p&gt;I create the &lt;tt class="docutils literal"&gt;Jukebox&lt;/tt&gt; alias in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_aliases&lt;/span&gt;&lt;/tt&gt; to X11 forward the player as a one-off command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;Jukebox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh -fX remote.host rhythmbox&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="ssh"></category><category term="crypto"></category><category term="network"></category><category term="graphics"></category><category term="linux"></category></entry><entry><title>Chromebook liftoff and splashdown</title><link href="http://www.circuidipity.com/chromebook-liftoff-splashdown.html" rel="alternate"></link><updated>2015-08-10T15:12:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-10:chromebook-liftoff-splashdown.html</id><summary type="html">&lt;p&gt;Create shell scripts to configure a Debian-powered Chromebook when it leaves and returns home.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;After spending a few months on a used desktop I am back on &lt;a class="reference external" href="http://www.circuidipity.com/c720-chromebook-to-jessiebook.html"&gt;Jessiebook&lt;/a&gt; as my primary computer. I am exploring the idea of taking a cheap(er) and cheerful device like a Chromebook - replacing Chrome OS with full-featured Linux - as a starting point and add/subtract layers of capabilities depending on location and circumstance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="outward-bound"&gt;
&lt;h2&gt;Outward bound...&lt;/h2&gt;
&lt;p&gt;I created the &lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/liftoff"&gt;liftoff&lt;/a&gt; script to prepare Chromebook before leaving home that syncs a few working directories to a &lt;a class="reference external" href="http://www.circuidipity.com/20141031.html"&gt;USB stick for extra offline storage&lt;/a&gt;. Online access makes available the services of a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi home server&lt;/a&gt; via SSH.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-return-home"&gt;
&lt;h2&gt;... and return home&lt;/h2&gt;
&lt;p&gt;Running &lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/splashdown"&gt;splashdown&lt;/a&gt; folds the Chromebook back into the home network:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;contents of USB stick are synced with (former desktop converted to headless) server&lt;/li&gt;
&lt;li&gt;1TB hard drive on server made available to Chromebook using &lt;a class="reference external" href="http://www.circuidipity.com/nas-raspberry-pi-sshfs.html"&gt;SSHFS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Chromebook hardware is augmented by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.circuidipity.com/thinkpad-usb-keyboard-trackpoint.html"&gt;ThinkPad USB keyboard&lt;/a&gt; with built-in Trackpoint and 3-button mouse&lt;/li&gt;
&lt;li&gt;external 28&amp;quot; display configured for &lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dldsply"&gt;dual-desktop&lt;/a&gt; mode running &lt;a class="reference external" href="http://www.circuidipity.com/i3-tiling-window-manager.html"&gt;i3 window manager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;add server's 8GB RAM into the mix by running remote X apps on local display with X11 forwarding&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After 18 months of light-now-daily use I am very happy with my Chromebook. Free software makes modest hardware go a long way.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="chromebook"></category><category term="shell"></category><category term="programming"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Writing systemd service files</title><link href="http://www.circuidipity.com/writing-systemd-service-files.html" rel="alternate"></link><updated>2015-08-04T16:28:00-04:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2015-08-04:writing-systemd-service-files.html</id><summary type="html">&lt;p&gt;Allow &lt;strong&gt;systemd&lt;/strong&gt; and its &lt;tt class="docutils literal"&gt;systemctl&lt;/tt&gt; command to start, stop, and report the status of a daemon by creating a &lt;strong&gt;service file&lt;/strong&gt; in &lt;tt class="docutils literal"&gt;/etc/systemd/system&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Setup the &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-ram-irqbalance.html"&gt;irqbalance daemon I installed on my Raspberry Pi&lt;/a&gt; for systemd control by creating &lt;tt class="docutils literal"&gt;/etc/systemd/system/irqbalance.service&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;Unit&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Daemon to distribute hardware interrupts across multi-CPUs

&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;forking
&lt;span class="c1"&gt;# man systemd.service: &amp;quot;If set to forking... it is recommended to also use the&lt;/span&gt;
&lt;span class="c1"&gt;# PIDFile= option, so that systemd can identify the main process of the daemon.&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;PIDFile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/run/irqbalance.pid
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/sbin/irqbalance --pid&lt;span class="o"&gt;=&lt;/span&gt;/var/run/irqbalance.pid

&lt;span class="o"&gt;[&lt;/span&gt;Install&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;multi-user.target
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set the new service to be auto-started at boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl daemon-reload &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; irqbalance.service
Created symlink from /etc/systemd/system/multi-user.target.wants/irqbalance.service to /etc/systemd/system/irqbalance.service.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Launch daemon and inspect running service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl start irqbalance.service &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo systemctl status irqbalance
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Systemd#Writing_unit_files"&gt;Writing systemd unit files&lt;/a&gt;&lt;/p&gt;
</summary><category term="linux"></category></entry></feed>