<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Circuidipity - Daniel Wayne Armstrong</title><link href="http://www.circuidipity.com/" rel="alternate"></link><link href="http://www.circuidipity.com/feeds/daniel-wayne-armstrong.atom.xml" rel="self"></link><id>http://www.circuidipity.com/</id><updated>2017-03-05T17:49:00-05:00</updated><entry><title>MITx Week 6: Algorithmic Complexity</title><link href="http://www.circuidipity.com/mitx-6001x-w6.html" rel="alternate"></link><published>2017-03-05T17:49:00-05:00</published><updated>2017-03-05T17:49:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-03-05:/mitx-6001x-w6.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; This week we worked through understanding the inherent complexity of problems and how to reduce them to simpler subproblems which can be solved by algorithms (step-by-step recipes).&lt;/p&gt;
&lt;p&gt;A good example was near the beginning of the course when a bisection search algorithm was employed to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; This week we worked through understanding the inherent complexity of problems and how to reduce them to simpler subproblems which can be solved by algorithms (step-by-step recipes).&lt;/p&gt;
&lt;p&gt;A good example was near the beginning of the course when a bisection search algorithm was employed to progressively halve the search space to zero in on a particular integer or floating point approximation. Another interesting algorithm is &lt;strong&gt;Merge sort&lt;/strong&gt; or &amp;quot;divide-and-conquer&amp;quot; invented by John von Neumann in 1945 for merging &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Merge_sort"&gt;separate sorted lists into a single sorted list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One more week to go in the course. Onward!&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>MITx Week 5: Object Oriented Programming</title><link href="http://www.circuidipity.com/mitx-6001x-w5.html" rel="alternate"></link><published>2017-02-26T21:49:00-05:00</published><updated>2017-02-26T21:49:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-02-26:/mitx-6001x-w5.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; This week the focus was on Python &lt;strong&gt;classes&lt;/strong&gt; and &lt;strong&gt;inheritance&lt;/strong&gt; in the context of &lt;strong&gt;object-oriented programming&lt;/strong&gt;. Objects are a combination of data collections and the methods that operate on that data. It allows the programmer to move beyond the built-in types provided by Python (integers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; This week the focus was on Python &lt;strong&gt;classes&lt;/strong&gt; and &lt;strong&gt;inheritance&lt;/strong&gt; in the context of &lt;strong&gt;object-oriented programming&lt;/strong&gt;. Objects are a combination of data collections and the methods that operate on that data. It allows the programmer to move beyond the built-in types provided by Python (integers, floating point numbers, strings, lists, dictionaries) and roll their own purpose-built types with methods (which is very cool)!&lt;/p&gt;
&lt;p&gt;I am still wrapping my head around the idea but I watched all the lecture videos and completed all the exercises for the week. The problem set involved creating a Python class + methods for encryption and decryption using the &lt;em&gt;Caesar Cipher&lt;/em&gt; ...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The idea of the Caesar Cipher is to pick an integer and shift every letter of your message by that integer. In other words, suppose the shift is k . Then, all instances of the i-th letter of the alphabet that appear in the plaintext should become the (i+k)-th letter of the alphabet in the ciphertext. You will need to be careful with the case in which i + k &amp;gt; 26 (the length of the alphabet). Here is what the whole alphabet looks like shifted three spots to the right:&lt;/p&gt;
&lt;p&gt;Original:  a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/p&gt;
&lt;p&gt;3-shift:  d e f g h i j k l m n o p q r s t u v w x y z a b c&lt;/p&gt;
&lt;p&gt;Using the above key, we can quickly translate the message &amp;quot;happy&amp;quot; to &amp;quot;kdssb&amp;quot; (note how the 3-shifted alphabet wraps around at the end, so x -&amp;gt; a, y -&amp;gt; b, and z -&amp;gt; c).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem template provided a &lt;tt class="docutils literal"&gt;Message&lt;/tt&gt; class and a few helper methods and I had to create new objects and methods to generate dictionaries to encrypt and decrypt plaintext messages. It (eventually) works!&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>MITx Week 4: Testing, Debugging, Exceptions, and Assertions</title><link href="http://www.circuidipity.com/mitx-6001x-w4.html" rel="alternate"></link><published>2017-02-12T22:19:00-05:00</published><updated>2017-02-12T22:19:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-02-12:/mitx-6001x-w4.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I have worked my way through all lectures and exercises and problem sets released to date. This week was all about &lt;strong&gt;defensive programming&lt;/strong&gt;. I will have more to say about this later ... but right now I am deep into the online &lt;strong&gt;Midterm Exam&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I have worked my way through all lectures and exercises and problem sets released to date. This week was all about &lt;strong&gt;defensive programming&lt;/strong&gt;. I will have more to say about this later ... but right now I am deep into the online &lt;strong&gt;Midterm Exam&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>MITx Week 3.5: Textbook and Syntax</title><link href="http://www.circuidipity.com/mitx-6001x-w3-5.html" rel="alternate"></link><published>2017-02-05T22:59:00-05:00</published><updated>2017-02-05T22:59:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-02-05:/mitx-6001x-w3-5.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I have worked my way through all lectures and exercises and problem sets released to date. MITx will release coursework for &lt;em&gt;Week 4&lt;/em&gt; on February 7th.&lt;/p&gt;
&lt;p&gt;I picked up a copy of the (optional) course textbook: &lt;a class="reference external" href="https://mitpress.mit.edu/books/introduction-computation-and-programming-using-python-0"&gt;Introduction to Computation and Programming Using Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I have worked my way through all lectures and exercises and problem sets released to date. MITx will release coursework for &lt;em&gt;Week 4&lt;/em&gt; on February 7th.&lt;/p&gt;
&lt;p&gt;I picked up a copy of the (optional) course textbook: &lt;a class="reference external" href="https://mitpress.mit.edu/books/introduction-computation-and-programming-using-python-0"&gt;Introduction to Computation and Programming Using Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am writing my Python code using the &lt;strong&gt;Neovim&lt;/strong&gt; text editor and I added the &lt;a class="reference external" href="https://github.com/vim-syntastic/syntastic"&gt;Syntastic&lt;/a&gt; syntax checking plugin. It provides a framework for managing syntax files installed separately by the user for various programming languages.&lt;/p&gt;
&lt;div class="section" id="install-and-configure"&gt;
&lt;h2&gt;Install and configure&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Install syntastic plugin using &lt;a class="reference external" href="https://github.com/VundleVim/Vundle.vim"&gt;Vundle&lt;/a&gt;. Edit Neovim's &lt;tt class="docutils literal"&gt;init.vim&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Plugin &lt;span class="s1"&gt;&amp;#39;vim-syntastic/syntastic&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and add some recommended defaults for beginners ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; statusline+&lt;span class="o"&gt;=&lt;/span&gt;%#warningmsg#
&lt;span class="nb"&gt;set&lt;/span&gt; statusline+&lt;span class="o"&gt;=&lt;/span&gt;%&lt;span class="o"&gt;{&lt;/span&gt;SyntasticStatuslineFlag&lt;span class="o"&gt;()}&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; statusline+&lt;span class="o"&gt;=&lt;/span&gt;%*

&lt;span class="nb"&gt;let&lt;/span&gt; g:syntastic_always_populate_loc_list &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="nb"&gt;let&lt;/span&gt; g:syntastic_auto_loc_list &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="nb"&gt;let&lt;/span&gt; g:syntastic_check_on_open &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="nb"&gt;let&lt;/span&gt; g:syntastic_check_on_wq &lt;span class="o"&gt;=&lt;/span&gt; 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Install the &lt;strong&gt;pylint&lt;/strong&gt; package (available in Ubuntu) for checking Python syntax ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install pylint pylint3
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Syntastic defaults to using pylint for Python 2 syntax. I am using Python 3 for MITx coursework so I once again modify &lt;tt class="docutils literal"&gt;init.vim&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;let&lt;/span&gt; g:syntastic_python_pylint_exe &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python3 -m pylint3&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Onward!&lt;/p&gt;
&lt;/div&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>The Dark Forest and Death's End</title><link href="http://www.circuidipity.com/deaths-end.html" rel="alternate"></link><published>2017-02-04T20:53:00-05:00</published><updated>2017-02-04T20:53:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-02-04:/deaths-end.html</id><summary type="html">&lt;img alt="Death's End" class="align-left" src="images/deaths-end.jpg" style="width: 150px; height: 225px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Dark Forest&lt;/strong&gt; and &lt;strong&gt;Death's End&lt;/strong&gt; &lt;em&gt;by Cixin Liu, translated by Ken Liu&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(ISBN: 978-0765377081 and 978-0765377104)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few nights ago I finished reading the final volume - &lt;em&gt;Death's End&lt;/em&gt; - in Liu Cixin's &lt;em&gt;Three-Body Problem&lt;/em&gt; trilogy and was so agitated and overwhelmed by the author's vision I had to go out …&lt;/p&gt;</summary><content type="html">&lt;img alt="Death's End" class="align-left" src="images/deaths-end.jpg" style="width: 150px; height: 225px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Dark Forest&lt;/strong&gt; and &lt;strong&gt;Death's End&lt;/strong&gt; &lt;em&gt;by Cixin Liu, translated by Ken Liu&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(ISBN: 978-0765377081 and 978-0765377104)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A few nights ago I finished reading the final volume - &lt;em&gt;Death's End&lt;/em&gt; - in Liu Cixin's &lt;em&gt;Three-Body Problem&lt;/em&gt; trilogy and was so agitated and overwhelmed by the author's vision I had to go out in the dark in the snow and cold on the local wilderness trail and walk it off! Its the first work of Chinese science fiction I have read and the three volumes take the reader from the 1960s Cultural Revolution to the end of this Universe.&lt;/p&gt;
&lt;p&gt;The first volume - &lt;a class="reference external" href="http://www.circuidipity.com/three-body-problem.html"&gt;The Three-Body Problem&lt;/a&gt; - has a politically persecuted scientist reveal Earth's location to an alien civilization, which dispatches an invasion fleet to conquer the Solar System. Volume II - &lt;em&gt;The Dark Forest&lt;/em&gt; - reveals &lt;em&gt;dark forest strategy&lt;/em&gt; in a universe filled with hunters silently hunting other hunters, the worst-case scenario of possible universes. The first two books are good but the third volume ... wow. What should we value when everything is ground to dust by Time? How can Nature produce creatures that can contemplate such things? How can Nature produce creatures that can view black scratches on white backgrounds, bound between covers, and think and feel things that are entirely beyond anything of personal experience?&lt;/p&gt;
</content><category term="books"></category></entry><entry><title>MITx Week 3: Lists and Dictionaries</title><link href="http://www.circuidipity.com/mitx-6001x-w3.html" rel="alternate"></link><published>2017-01-29T20:35:00-05:00</published><updated>2017-01-29T20:35:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-01-29:/mitx-6001x-w3.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I finished the &lt;em&gt;Week 2 Problem Set&lt;/em&gt; and am working my way through this week's lectures and exercises for the Python &lt;strong&gt;list&lt;/strong&gt; and &lt;strong&gt;dictionary&lt;/strong&gt; data structures. While the course is &amp;quot;Computer Science and Programming Using Python&amp;quot; and emphasizes the computer science bit, I sought out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I finished the &lt;em&gt;Week 2 Problem Set&lt;/em&gt; and am working my way through this week's lectures and exercises for the Python &lt;strong&gt;list&lt;/strong&gt; and &lt;strong&gt;dictionary&lt;/strong&gt; data structures. While the course is &amp;quot;Computer Science and Programming Using Python&amp;quot; and emphasizes the computer science bit, I sought out another resource to shed more light on Python itself and dug into what looks to be a good Creative Commons-licensed programming book: &lt;a class="reference external" href="https://automatetheboringstuff.com/"&gt;Automate the Boring Stuff with Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Onward!&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>The Three-Body Problem</title><link href="http://www.circuidipity.com/three-body-problem.html" rel="alternate"></link><published>2017-01-28T22:43:00-05:00</published><updated>2017-01-28T22:43:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-01-28:/three-body-problem.html</id><summary type="html">&lt;img alt="Three-Body Problem" class="align-left" src="images/three_body_problem.jpg" style="width: 150px; height: 227px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Three-Body Problem&lt;/strong&gt; &lt;em&gt;by Cixin Liu, translated by Ken Liu&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(ISBN: 978-0765382030)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;During the Cultural Revolution in China a secret military project is undertaken to search for extraterrestrial intelligence. An alien civilization learns of Earth's location and dispatches an invasion fleet to occupy the Solar System and exterminate humanity. Jump …&lt;/p&gt;</summary><content type="html">&lt;img alt="Three-Body Problem" class="align-left" src="images/three_body_problem.jpg" style="width: 150px; height: 227px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Three-Body Problem&lt;/strong&gt; &lt;em&gt;by Cixin Liu, translated by Ken Liu&lt;/em&gt;&lt;/div&gt;
&lt;div class="line"&gt;(ISBN: 978-0765382030)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;During the Cultural Revolution in China a secret military project is undertaken to search for extraterrestrial intelligence. An alien civilization learns of Earth's location and dispatches an invasion fleet to occupy the Solar System and exterminate humanity. Jump to the present era and various factions struggle amongst themselves as the world faces the prospect of annihilation. Some prepare for war, others hope to cut deals with the superior alien power. Some view the aliens as saviours for a fallen humanity. Others believe human civilization to be intrinsically evil and beyond redemption and welcome the coming doomsday battle.&lt;/p&gt;
&lt;p&gt;Maybe the galaxy isn't empty after all. Its occupants just has a good reason to stay &lt;em&gt;very very quiet&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This was the first piece of science fiction by a Chinese author I have read, and a story about alien first contact transforms into a cool way to look at an unfamiliar culture as noted by the translator ...&lt;/p&gt;
&lt;blockquote&gt;
The best translations into English do not, in fact, read as if they were originally written in English. The English words are arranged in such a way that the reader sees a glimpse of another culture's patterns of thinking, hears an echo of another language's rhythms and cadences, and feels a tremor of another people's gestures and movements.&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Three-Body&lt;/em&gt; is the first volume in a trilogy and now I am diving right into the second and third books!&lt;/p&gt;
</content><category term="books"></category></entry><entry><title>MITx Week 2: Algorithms and Python Functions</title><link href="http://www.circuidipity.com/mitx-6001x-w2.html" rel="alternate"></link><published>2017-01-22T16:35:00-05:00</published><updated>2017-01-22T16:35:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-01-22:/mitx-6001x-w2.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I completed all the video tutorials and practice exercises assigned this week. Left unfinished is the &lt;em&gt;Week 2 Problem Set&lt;/em&gt; (due Feb 2nd).&lt;/p&gt;
&lt;p&gt;The big idea this week is &lt;strong&gt;recursion&lt;/strong&gt; and creating functions in Python that call themselves to solve problems. One of the exercises …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; I completed all the video tutorials and practice exercises assigned this week. Left unfinished is the &lt;em&gt;Week 2 Problem Set&lt;/em&gt; (due Feb 2nd).&lt;/p&gt;
&lt;p&gt;The big idea this week is &lt;strong&gt;recursion&lt;/strong&gt; and creating functions in Python that call themselves to solve problems. One of the exercises involved finding the greatest common divisor of two positive integers (that is, the largest integer that divides each of them without remainder). Here is a cool &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Euclidean_algorithm#Worked_example"&gt;animated example of recursion using Euclid's algorithm to find the GCD of two numbers.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Translated into Python code ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;gcdRecur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    a, b: positive integers&lt;/span&gt;
&lt;span class="sd"&gt;    returns: a positive integer, the greatest common divisor of a &amp;amp; b&lt;/span&gt;

&lt;span class="sd"&gt;    A clever mathematical trick (due to Euclid) makes it easy to find&lt;/span&gt;
&lt;span class="sd"&gt;    greatest common divisors. Suppose that a and b are two positive&lt;/span&gt;
&lt;span class="sd"&gt;    integers:&lt;/span&gt;

&lt;span class="sd"&gt;    If b = 0, then the answer is a&lt;/span&gt;

&lt;span class="sd"&gt;    Otherwise, gcd(a, b) is the same as gcd(b, a % b)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gcdRecur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;strong&gt;big&lt;/strong&gt; help trying to figure out how to code solutions this week was the &lt;a class="reference external" href="http://pythontutor.com/"&gt;online Python Tutor&lt;/a&gt; resource. It allows you to insert your code and then visualize what the computer is doing step-by-step as it executes the instructions. Here is an exercise which required writing a recursive function that executes a bisection search to determine if a character is in a string (the MITx grader uses example strings that are sorted in alphabetical order) ...&lt;/p&gt;
&lt;iframe width="800" height="750" frameborder="0"
    src="http://pythontutor.com/iframe-embed.html#code=def%20isIn(char,%20aStr%29%3A%0A%20%20%20%20'''%0A%20%20%20%20char%3A%20a%20single%20character%0A%20%20%20%20aStr%3A%20an%20alphabetized%20string%0A%0A%20%20%20%20returns%3A%20True%20if%20char%20is%20in%20aStr%3B%20False%20otherwise%0A%20%20%20%20'''%0A%20%20%20%20if%20len(aStr%29%20%3E%3D%201%3A%0A%20%20%20%20%20%20%20%20midChar%20%3D%20len(aStr%29%20//%202%0A%20%20%20%20%20%20%20%20if%20char%20%3D%3D%20aStr%5BmidChar%5D%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20True%0A%20%20%20%20%20%20%20%20elif%20char%20%3E%20aStr%5BmidChar%5D%20and%20len(aStr%29%20%3E%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20isIn(char,%20aStr%5BmidChar%3A%5D%29%0A%20%20%20%20%20%20%20%20elif%20char%20%3C%20aStr%5BmidChar%5D%20and%20len(aStr%29%20%3E%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20isIn(char,%20aStr%5B%3AmidChar%5D%29%0A%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20False%0A%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20return%20False%0A%0A%23%20test%0Aprint(isIn('x',%20'acfghij'%29%29&amp;codeDivHeight=400&amp;codeDivWidth=350&amp;cumulative=false&amp;curInstr=27&amp;heapPrimitives=false&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false"&gt;
&lt;/iframe&gt;&lt;p&gt;I am doing the coursework on a system running &lt;a class="reference external" href="http://www.circuidipity.com/tag-ubuntu.html"&gt;Ubuntu&lt;/a&gt; &lt;strong&gt;16.04 LTS&lt;/strong&gt; and writing code using &lt;a class="reference external" href="http://www.circuidipity.com/neovim.html"&gt;Neovim&lt;/a&gt;. A few modifications in &lt;a class="reference external" href="https://github.com/vonbrownie/dotfiles/blob/master/.config/nvim/init.vim"&gt;~/.config/nvim/init.vim&lt;/a&gt; to give the text editor super Python powers ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;tabstop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;               &lt;span class="s2"&gt;&amp;quot; number of columns occupied by a tab character&lt;/span&gt;
&lt;span class="s2"&gt;set softtabstop=4   &amp;quot;&lt;/span&gt; see multiple spaces as tabstops so &amp;lt;BS&amp;gt; does the right thing
&lt;span class="nb"&gt;set&lt;/span&gt; expandtab               &lt;span class="s2"&gt;&amp;quot; converts tabs to white space&lt;/span&gt;
&lt;span class="s2"&gt;set shiftwidth=4    &amp;quot;&lt;/span&gt; width &lt;span class="k"&gt;for&lt;/span&gt; autoindents
&lt;span class="nb"&gt;set&lt;/span&gt; autoindent      &lt;span class="s2"&gt;&amp;quot; indent a new line the same amount as the line just typed&lt;/span&gt;
&lt;span class="s2"&gt;set number          &amp;quot;&lt;/span&gt; add line numbers
&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;80&lt;/span&gt;           &lt;span class="s2"&gt;&amp;quot; set an 80 column border for good coding style&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Onward!&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry><entry><title>The Plan that Broke the World</title><link href="http://www.circuidipity.com/plan-that-broke-the-world.html" rel="alternate"></link><published>2017-01-21T19:29:00-05:00</published><updated>2017-01-21T19:29:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-01-21:/plan-that-broke-the-world.html</id><summary type="html">&lt;img alt="book cover" class="align-left" src="images/plan_that_broke_the_world.jpg" style="width: 150px; height: 225px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Plan that Broke the World: The &amp;quot;Schlieffen Plan&amp;quot; and World War I&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;by William D. O'Neill&lt;/em&gt; (ISBN: 978-1-4819-5585-0)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Germany went to war with a master plan in 1914 to secure the future peace and prosperity of its Empire for generations. The result was the most destructive war in history …&lt;/p&gt;</summary><content type="html">&lt;img alt="book cover" class="align-left" src="images/plan_that_broke_the_world.jpg" style="width: 150px; height: 225px;" /&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;strong&gt;The Plan that Broke the World: The &amp;quot;Schlieffen Plan&amp;quot; and World War I&lt;/strong&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;em&gt;by William D. O'Neill&lt;/em&gt; (ISBN: 978-1-4819-5585-0)&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Germany went to war with a master plan in 1914 to secure the future peace and prosperity of its Empire for generations. The result was the most destructive war in history, defeat, followed by a second and even more destructive world war, and the end of the European empires. How could (in the author's estimation) the foremost planning organization of the day, the Prussian &lt;em&gt;Great General Staff&lt;/em&gt;, have been so wrong?&lt;/p&gt;
&lt;p&gt;William O'Neill shows, in fact, the idea of a plan created by a military genius that &lt;em&gt;would&lt;/em&gt; have worked except for its flawed execution by less capable hands was a mythology that arose only after Germany's defeat. Count von Schlieffen of the &amp;quot;Plan&amp;quot; was a pre-war chief of the GGS who as a &lt;em&gt;thought experiment&lt;/em&gt; in a memo (and, perhaps, as a thinly veiled bid for greater military expenditures) explored how a &lt;em&gt;much larger&lt;/em&gt; German Army might go on the offensive and defeat France early in a conflict. It was never fully developed into a plan for battle and the actual strategy that unfolded at the start of the war bears little resemblance. Where Schlieffen's ideas proved most useful was not in the waging of war but in explaining away defeat. A plan crafted by a (dead) genius but fumbled by a select few successors (all of whom were dead at war's end) absolved the incumbent generalship. The story gained currency in the postwar years as a political counterweight to the despicable explanation promoted by extreme right-wing elements of supremely capable German armies that had been &amp;quot;stabbed in the back&amp;quot; by a toxic cabal of decadent liberals, war profiteers, and Jewish conspirators.&lt;/p&gt;
&lt;p&gt;What I found most interesting is the exploration of how through neither malice nor incompetence such a smart and capable leadership - Imperial Germany's &amp;quot;best and brightest&amp;quot; - could make such a catastrophic miscalculation. German political leadership under the misdirection of Kaiser Wilhelm II pushed the Empire to the brink of war but - in a moment of doubt when Wilhelm moved to pull back from the brink - his military chief forcefully declared that the war machine was in motion and &lt;em&gt;could not be stopped&lt;/em&gt;. The nominal head of state offered no further pushback and events swiftly moved past the point of no return. It is true that hindsight has a powerful lure but it was clear to well-placed observers in the summer of 1914 that Germany was taking an incredible gamble for a dubious prize. The swift recovery of France following its defeat in the Franco-Prussian War demonstrated that even German victory in its stated war aims would not deliver a lasting and secure peace. The danger of waging a two-front war with France and Russia and the necessity of avoiding such a scenario was recognized early and at the highest levels. The violation of Belgian neutrality practically guaranteed British intervention and a naval blockade imposed by the world's largest navy would ruin Germany.&lt;/p&gt;
&lt;p&gt;As the author states, &lt;em&gt;what were they thinking&lt;/em&gt;? He draws on a lifetime of experience as a program manager for both the American military and private defense contractors to explore how technologies are developed, forces outfitted, and war plans drafted and executed. Germany suffered from a weak political leadership that proved unwilling to push back and challenge an insular military culture, a culture that settled on an offensive strategy and failed to consider a range of lower-risk alternatives. The German experience underlines the importance of powerful outsiders who exist to challenge convention. There is a thin line that separates institutional wisdom from institutional myopia.&lt;/p&gt;
</content><category term="books"></category></entry><entry><title>MITx Week 1: Setup and Python Basics</title><link href="http://www.circuidipity.com/mitx-6001x-w1.html" rel="alternate"></link><published>2017-01-15T09:13:00-05:00</published><updated>2017-01-15T09:13:00-05:00</updated><author><name>Daniel Wayne Armstrong</name></author><id>tag:www.circuidipity.com,2017-01-15:/mitx-6001x-w1.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; Time to get programming! &lt;a class="reference external" href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9"&gt;6.00.1x Introduction to Computer Science and Programming Using Python&lt;/a&gt; went live on Tuesday and runs for the next 9 weeks. Very interesting to see students from all over the world posting in the discussion forums. Courseware is a series …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/mitx-6001x.html"&gt;MITx and the Python DUDE .:&lt;/a&gt; Time to get programming! &lt;a class="reference external" href="https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-9"&gt;6.00.1x Introduction to Computer Science and Programming Using Python&lt;/a&gt; went live on Tuesday and runs for the next 9 weeks. Very interesting to see students from all over the world posting in the discussion forums. Courseware is a series of video lectures each roughly 10 minutes in duration interspersed with test exercises to help the knowledge sink in. Each week concludes with a more in-depth problem set to be submitted online for evaluation. There will be a mid-term and final exam.&lt;/p&gt;
&lt;p&gt;This week focused on &lt;strong&gt;conditionals, branching, loops&lt;/strong&gt;, and getting acquainted with just enough Python basics to get started on assignments. I completed all the material for the week. The last part of the problem set I found a bit tricky, which required writing a program that prints the longest substring of any random string in which the letters occur in alphabetical order. For example, if string = 'azcbobobegghakl', then my program needs to find the substring &lt;em&gt;beggh&lt;/em&gt; or, in the case of multiple substrings of equal length, output the first match found. When stuck I find the best solution is ... go off and do something else! Subconscious mind gets cracking and when I return it all falls into place.&lt;/p&gt;
&lt;p&gt;New material is released every Tuesday. Its a rapid pace but the video instruction is very well done by course mentor &lt;a class="reference external" href="https://www.csail.mit.edu/user/807"&gt;Dr. Eric Grimson&lt;/a&gt; and I usually view at 1.25+ playback speed which I find encourages closer attention to what is being said.&lt;/p&gt;
</content><category term="python"></category><category term="programming"></category><category term="mooc"></category></entry></feed>