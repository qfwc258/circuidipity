<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Circuidipity</title><link>http://www.circuidipity.com/</link><description></description><atom:link href="http://www.circuidipity.com/feeds/daniel-wayne-armstrong.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 21 Aug 2016 18:33:00 -0400</lastBuildDate><item><title>New life for an old laptop as a Linux home server</title><link>http://www.circuidipity.com/laptop-home-server.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Home Server Project #0.1 .:&lt;/a&gt; &lt;strong&gt;Netbooks&lt;/strong&gt; ... remember those small, (a few) Linux-powered laptops from several years ago? I dusted off my old &lt;strong&gt;Asus 900HA&lt;/strong&gt; netbook and put it to work as a &lt;a class="reference external" href="http://www.circuidipity.com/tag-server.html"&gt;home server&lt;/a&gt;. Good times!&lt;/p&gt;
&lt;p&gt;Running your own home server is a fun learning experience and offers several advantages.&lt;/p&gt;
&lt;p&gt;Second-hand laptops -  retired in favour of more current and powerful machines - can still deliver plenty of oomph for running a personal server. Frugal with power and come equipped with their own built-in UPS (battery)!&lt;/p&gt;
&lt;p&gt;Install a stable, well-tested Linux distribution and provide services such as network printing and &lt;a class="reference external" href="http://www.circuidipity.com/nas-raspberry-pi-sshfs.html"&gt;storage (NAS)&lt;/a&gt;, perform &lt;a class="reference external" href="http://www.circuidipity.com/incremental-backups-rsnapshot.html"&gt;backups&lt;/a&gt;, host &lt;a class="reference external" href="http://www.circuidipity.com/php-nginx-postgresql.html"&gt;web services&lt;/a&gt; and much more. Start with a minimal base configuration of &lt;a class="reference external" href="http://www.circuidipity.com/tag-ubuntu.html"&gt;Ubuntu&lt;/a&gt; and gain access to tens of thousands of packages ready to install.&lt;/p&gt;
&lt;p&gt;Privacy may be important to you. Hosting your own server running your own services gives more control over your data.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hardware:&lt;/strong&gt; Asus 900HA netbook with 10&amp;quot; display, 1GB RAM, a 500GB hard drive (very easy replacement of original drive - just unscrew the netbook's bottom panel), built-in ethernet/wifi, webcam, and a host of ports (3xUSB2, VGA, sound, SD card slot). Neat and compact device!&lt;/p&gt;
&lt;div class="section" id="install-ubuntu"&gt;
&lt;h3&gt;0. Install Ubuntu&lt;/h3&gt;
&lt;p&gt;My &lt;a class="reference external" href="http://www.circuidipity.com/ubuntu-trusty-install.html"&gt;visual screenshot tour&lt;/a&gt; of installing Ubuntu 16.04 - a &lt;a class="reference external" href="https://wiki.ubuntu.com/Releases"&gt;Long Term Support (LTS)&lt;/a&gt; release. Ubuntu's &lt;strong&gt;minimal install image&lt;/strong&gt; (32bit for the netbook) makes it easy to create a console-only base configuration that can be later customized for various tasks.&lt;/p&gt;
&lt;p&gt;I make a few modifications to my usual desktop install routine that are more appropriate for configuring a home server ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Storage:&lt;/strong&gt; I divide the netbook's internal storage into 3 partitions ...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sda1 is a 24GB &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; partition&lt;/li&gt;
&lt;li&gt;sda2 is a 2GB LUKS encrypted &lt;tt class="docutils literal"&gt;swap&lt;/tt&gt; partition using a &lt;strong&gt;random key&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;sda3 uses the remaining space as a &lt;strong&gt;unmounted&lt;/strong&gt; encrypted partition (setup post-install)&lt;/li&gt;
&lt;/ul&gt;
&lt;img alt="Mount point none" class="align-center" src="images/screenshot/ubuntuInstall/mount_point_none.png" style="width: 800px; height: 600px;" /&gt;
&lt;p&gt;I don't want an unattended server halting in the boot process waiting for a passphrase for &lt;tt class="docutils literal"&gt;sda3_crypt&lt;/tt&gt; or any necessary mountpoints to reside on that partition. After a successful first boot I configure the encrypted partition to be mounted manually to &lt;tt class="docutils literal"&gt;/media&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updates:&lt;/strong&gt; I like to select &lt;tt class="docutils literal"&gt;Install security updates automatically&lt;/tt&gt; for a device running unattended with long uptimes ...&lt;/p&gt;
&lt;img alt="Install security updates" class="align-center" src="images/screenshot/ubuntuInstall/300-1.png" style="width: 800px; height: 600px;" /&gt;
&lt;p&gt;&lt;strong&gt;Tasks:&lt;/strong&gt; Select &lt;tt class="docutils literal"&gt;[*] standard system utilities&lt;/tt&gt;  and the few extras included in &lt;tt class="docutils literal"&gt;[*] Basic Ubuntu server&lt;/tt&gt; ...&lt;/p&gt;
&lt;img alt="Software selection" class="align-center" src="images/screenshot/ubuntuInstall/301-1.png" style="width: 800px; height: 600px;" /&gt;
&lt;p&gt;Finish up and reboot!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-network-address"&gt;
&lt;h3&gt;1. Static network address&lt;/h3&gt;
&lt;p&gt;Login to the new home server and check which network interfaces are detected and settings ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ip a
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wired&lt;/strong&gt; interfaces are usually auto-configured by default and assigned an IP address courtesy of DHCP.&lt;/p&gt;
&lt;p&gt;To assign the server a &lt;strong&gt;static&lt;/strong&gt; address (recommended), deactivate the wired interface and create a new entry in &lt;tt class="docutils literal"&gt;/etc/network/interfaces&lt;/tt&gt;. Sample entry for &lt;tt class="docutils literal"&gt;enp3s0&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# The primary network interface&lt;/span&gt;
auto enp3s0
&lt;span class="c1"&gt;#iface enp3s0 inet dhcp&lt;/span&gt;
iface enp3s0 inet static
    address 192.168.1.88
    netmask 255.255.255.0
    gateway 192.168.1.1
    dns-nameservers 192.168.1.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Bring up|down interface with &lt;tt class="docutils literal"&gt;sudo if{up,down} enp3s0&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h3&gt;2. SSH&lt;/h3&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;Install OpenSSH, create crypto keys, and disable password logins&lt;/a&gt; to boost server security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="encrypted-storage"&gt;
&lt;h3&gt;3. Encrypted storage&lt;/h3&gt;
&lt;p&gt;Configure the encrypted partition created by Ubuntu during the install to be mounted by a user, starting with the creation of a mountpoint in &lt;tt class="docutils literal"&gt;/media&lt;/tt&gt; for the storage ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo mkdir /media/sda3_crypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unlock the partition with the passphrase created during the install ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo cryptsetup open /dev/sda3 sda3_crypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;tt class="docutils literal"&gt;/etc/fstab&lt;/tt&gt; by creating a consistent mountpoint for the partition ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/dev/mapper/sda3_crypt /media/sda3_crypt        ext4    relatime,noauto,user       &lt;span class="m"&gt;0&lt;/span&gt;       0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mount the partition ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ mount /media/sda3_crypt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="services"&gt;
&lt;h3&gt;4. Services&lt;/h3&gt;
&lt;p&gt;What to do next? &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Some of the services I use ...&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Tue, 16 Aug 2016 21:47:00 -0400</pubDate><guid>tag:www.circuidipity.com,2016-08-16:laptop-home-server.html</guid><category>server</category><category>network</category><category>ubuntu</category><category>linux</category></item><item><title>$HOME slash bin</title><link>http://www.circuidipity.com/homebin.html</link><description>&lt;img alt="Infinite loop" class="align-right" src="images/infinite-loop-not-300.png" style="width: 300px; height: 400px;" /&gt;
&lt;p&gt;Bit by bit I build my collection of working scripts and experiments in my &lt;a class="reference external" href="https://github.com/vonbrownie/homebin"&gt;home directory&lt;/a&gt;. Programming right now in &lt;a class="reference external" href="http://www.circuidipity.com/tag-python.html"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/Library.sh"&gt;Library.sh&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;library of functions for bash shell scripts (more: &lt;a class="reference external" href="http://www.circuidipity.com/shell-script-library.html"&gt;&amp;quot;A library for shell scripts&amp;quot;&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/bernersLee.py"&gt;bernersLee.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;a set of classes to support my web hacks&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/bookTab.py"&gt;bookTab.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;get book information from command line arguments or clipboard and open web browser and search Amazon and the Toronto Public Library&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/collatz.py"&gt;collatz.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;explore the &lt;em&gt;Collatz sequence&lt;/em&gt;, sometimes called &amp;quot;the simplest impossible math problem&amp;quot;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dateAndBook.py"&gt;dateAndBook.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;collect books I have read and the dates I finished reading them from my daily logfile and write to a new logfile&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dateAndStep.py"&gt;dateAndStep.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;collect dates (x_axis) and corresponding pedometer measurements (y_axis) from my daily logfile and write to a new logfile + generate a graph&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dateAndWeight.py"&gt;dateAndWeight.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;collect dates (x_axis) and corresponding weight measurements (y_axis) from my daily logfile and write to a new logfile + generate a graph&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dateAndY.py"&gt;dateAndY.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;collect dates (x_axis) and corresponding y measurements (y_axis) from a logfile and write to a new logfile + generate a graph using matplotlib&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/daysUntil.py"&gt;daysUntil.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;how many days until: yyyy mm dd&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/debtBuster.py"&gt;debtBuster.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;find the smallest monthly payment to the cent such that we can pay off a debt within &lt;em&gt;n&lt;/em&gt; months&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dldsply"&gt;dldsply&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;enable|disable extended desktop using XRandR&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dlg"&gt;dlg&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;daily activity log + git commits&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/dmenu-run.sh"&gt;dmenu-run.sh&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;dmenu&lt;/tt&gt; configuration&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/magic8ball.py"&gt;magic8ball.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Magic 8 Ball peers into the future and retrieves the answer to your questions&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/mapTab.py"&gt;mapTab.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;get a street address from command line arguments or clipboard and open web browser to the Google Maps page for the address&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/paVolume"&gt;paVolume&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;pulseaudio volume control (more: &lt;a class="reference external" href="http://www.circuidipity.com/pavolume.html"&gt;&amp;quot;Shell script: paVolume&amp;quot;&lt;/a&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/raiseRedLantern.py"&gt;raiseRedLantern.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;a set of classes to add notification capabilities to scripts&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/rePhoneAndEmail.py"&gt;rePhoneAndEmail.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;find and extract phone numbers and email addresses on the clipboard&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/reSearch.py"&gt;reSearch.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;find matches for regex patterns in file(s)&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/teleportHomeTo"&gt;teleportHomeTo&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;sync $HOME to DESTINATION&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/teleportHomeToSSH"&gt;teleportHomeToSSH&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;sync $HOME to remote DESTINATION using SSH keys&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/timeToCount.py"&gt;timeToCount.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;measure clock time for a device to count from 0 to &lt;em&gt;x&lt;/em&gt; in increments of 1&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/tplWatch.py"&gt;tplWatch.py&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;check to see if Toronto Public Library has added an item to catalogue&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/vboxshot"&gt;vboxshot&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;capture screenshot of a virtualbox session&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/xtra"&gt;xtra&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;tt class="docutils literal"&gt;xinit&lt;/tt&gt; extra config&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/vonbrownie/homebin/blob/master/yt-audio"&gt;yt-audio&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;download online video and convert to audio (more: &lt;a class="reference external" href="http://www.circuidipity.com/youtube-dl.html"&gt;&amp;quot;Download videos using youtube-dl&amp;quot;&lt;/a&gt;)&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Thu, 18 Aug 2016 22:10:00 -0400</pubDate><guid>tag:www.circuidipity.com,2016-08-08:homebin.html</guid><category>programming</category><category>shell</category><category>python</category><category>linux</category></item><item><title>LPTHW Exercise 22: What Do You Know So Far?</title><link>http://www.circuidipity.com/lpthw-e22.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; A review of my recent Python journey ...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;print&lt;/strong&gt; Output result of expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python script.py&lt;/strong&gt; Run &lt;em&gt;script.py&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;#&lt;/strong&gt; Comment out a line of script. Anything after the pound symbol is ignored.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/strong&gt; Block quotes ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;(O&amp;lt; .: Hello world!&lt;/span&gt;
&lt;span class="s2"&gt;(/)_&lt;/span&gt;
&lt;span class="s2"&gt;.....&lt;/span&gt;
&lt;span class="s2"&gt;.....&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;variable&lt;/strong&gt; A memory location that holds data and given an identifying name.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;integer&lt;/strong&gt; Whole numbers&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;float&lt;/strong&gt; Decimals&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;round()&lt;/strong&gt; Round a floating number ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; round&lt;span class="o"&gt;(&lt;/span&gt;5.67888&lt;span class="o"&gt;)&lt;/span&gt;
6.0
&amp;gt;&amp;gt;&amp;gt; round&lt;span class="o"&gt;(&lt;/span&gt;5.67888, 2&lt;span class="o"&gt;)&lt;/span&gt;
5.68
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;string&lt;/strong&gt; Sequence of characters (text).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;len&lt;/strong&gt; Length of a string.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;data type&lt;/strong&gt; Type of data stored in memory. Example: &lt;tt class="docutils literal"&gt;int&lt;/tt&gt; (integers), &lt;tt class="docutils literal"&gt;float&lt;/tt&gt; (decimals), &lt;tt class="docutils literal"&gt;str&lt;/tt&gt; (strings) ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; type&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; int&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; type&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; float&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; type&lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;float&amp;#39;&lt;/span&gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="math-operators"&gt;
&lt;h2&gt;Math Operators&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; Addition (or concatenate strings).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; Subtraction&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/&lt;/strong&gt; Division. Rounds down to integer. Returns a floating number if one of the numbers is a float.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; Multiplication&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;%&lt;/strong&gt; Modulus. Caculate remainder after division.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;+=&lt;/strong&gt; Shorthand for &amp;quot;plus itself&amp;quot;. Also &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-=&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;*=&lt;/tt&gt; ... Ex: &lt;tt class="docutils literal"&gt;x = x + y&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;x+= y&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PEMMDAS&lt;/strong&gt; Order of priority of math operations ...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Parantheses&lt;/li&gt;
&lt;li&gt;Exponents&lt;/li&gt;
&lt;li&gt;Multiplication and Modulus&lt;/li&gt;
&lt;li&gt;Division&lt;/li&gt;
&lt;li&gt;Addition and Substraction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;... and operations of equal priority are evaluated from left-to-right ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="m"&gt;5&lt;/span&gt; % 3
2
&amp;gt;&amp;gt;&amp;gt; &lt;span class="m"&gt;2&lt;/span&gt; * &lt;span class="m"&gt;5&lt;/span&gt; % 3
1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comparison-operators"&gt;
&lt;h2&gt;Comparison Operators&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt; Less than&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;&lt;/strong&gt; Greater than&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;=&lt;/strong&gt; Less than or equal to&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;gt;=&lt;/strong&gt; Greater than or equal to&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; Equal to&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;=&lt;/strong&gt; Assign value on the right to variable on the left (&lt;strong&gt;not&lt;/strong&gt; a comparator).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;boolean&lt;/strong&gt; A test for truth values: &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Boolean operators have an order of operations. After any math or comparison operations evaluate, Python evaluates the &lt;tt class="docutils literal"&gt;not&lt;/tt&gt; operators first, then the &lt;tt class="docutils literal"&gt;and&lt;/tt&gt; operators, then the &lt;tt class="docutils literal"&gt;or&lt;/tt&gt; operators ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; not &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; 4
True
&amp;gt;&amp;gt;&amp;gt; not &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;4&lt;/span&gt; and &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; 4
False
&amp;gt;&amp;gt;&amp;gt; not &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;4&lt;/span&gt; and &lt;span class="m"&gt;2&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;4&lt;/span&gt; or &lt;span class="m"&gt;2&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;=&lt;/span&gt; 4
True
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="format-and-escape-characters"&gt;
&lt;h2&gt;Format and Escape Characters&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;%d&lt;/strong&gt; Digit&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;%s&lt;/strong&gt; String&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;%r&lt;/strong&gt; Raw&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n&lt;/strong&gt; New line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;t&lt;/strong&gt; Tab&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;I \&amp;quot;may\&amp;quot; have %d %s tickets\nfor the \t%r\tnext weekend.&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;3, &lt;span class="s1"&gt;&amp;#39;free&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;LPTHW Bootcamp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
I &lt;span class="s2"&gt;&amp;quot;may&amp;quot;&lt;/span&gt; have &lt;span class="m"&gt;3&lt;/span&gt; free tickets
&lt;span class="k"&gt;for&lt;/span&gt; the         &lt;span class="s1"&gt;&amp;#39;LPTHW Bootcamp&amp;#39;&lt;/span&gt;        next weekend.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="input-and-extras"&gt;
&lt;h2&gt;Input and Extras&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;raw_input()&lt;/strong&gt; Get user input (changed to &lt;tt class="docutils literal"&gt;input()&lt;/tt&gt; in Python 3).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;int(raw_input())&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;float(raw_input())&lt;/strong&gt; Convert user input into an integer|float ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; int&lt;span class="o"&gt;(&lt;/span&gt;raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Age? &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
Age? &amp;gt; 104
&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;You must be doing something right to make it to %d years old!&amp;quot;&lt;/span&gt; % age
You must be doing something right to make it to &lt;span class="m"&gt;104&lt;/span&gt; years old!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;import&lt;/strong&gt; Add modules (libraries) of Python code to my script.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;modules&lt;/strong&gt; Features&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pydoc&lt;/strong&gt; Show documentation from Python modules. Can read in the console or start a webserver and read documentation in the browser ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ pydoc -p 1234
pydoc server ready at http://localhost:1234/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;argv&lt;/strong&gt; Module that enables a script to accept command line arguments ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;from sys import argv
script, first, second, &lt;span class="nv"&gt;third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; argv
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="reading-and-writing"&gt;
&lt;h2&gt;Reading and Writing&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;open()&lt;/strong&gt; Open an external file in my script. Default file mode is &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;read-only&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;r&lt;/tt&gt; if none is specified.&lt;/p&gt;
&lt;p&gt;Commonly-used modes include ...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;r&lt;/tt&gt; Open text file for reading. Stream is positioned at the beginning of the file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;r+&lt;/tt&gt; Open for reading and writing. Stream is positioned at the beginning of the file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;w&lt;/tt&gt; Truncate file to zero length or create text file for writing. Stream is positioned at the beginning of the file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;w+&lt;/tt&gt; Open for reading and writing. File is created if it does not exist, otherwise it is truncated. Stream is positioned at the beginning of the file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a&lt;/tt&gt; Open for writing. File is created if it does not exist. Stream is positioned at the end of the file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;a+&lt;/tt&gt; Open for reading and writing. File is created if it does not exist. Stream is positioned at the end of the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;read()&lt;/strong&gt; Read the contents of the opened file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;readline()&lt;/strong&gt; Read just one line of the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;write()&lt;/strong&gt; Write a string to the file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;seek()&lt;/strong&gt; Set the current position in the file. Beginning of file is &lt;tt class="docutils literal"&gt;seek(0)&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;close()&lt;/strong&gt; Close the file ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;filename&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;txt.read&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Hello world!
&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_

&amp;gt;&amp;gt;&amp;gt; txt.seek&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# Important: return to the top of the file before reading, otherwise I just read an empty string&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; txt.read&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;(O&amp;lt; .: Hello world!\n(/)_\n&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; txt.close&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;filename, &lt;span class="s1"&gt;&amp;#39;a+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; txt.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; * 10&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; txt.seek&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;txt.read&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Hello world!
&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_
..........
&amp;gt;&amp;gt;&amp;gt; txt.close&lt;span class="o"&gt;()&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="functions"&gt;
&lt;h2&gt;Functions&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;function&lt;/strong&gt; A named section of my script that executes a task when called.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;def&lt;/strong&gt; &amp;quot;Defines&amp;quot; a new function. Ex: &lt;tt class="docutils literal"&gt;def &lt;span class="pre"&gt;some_function_name():&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;method&lt;/strong&gt; Same thing as a function, except it is called on a value. Ex: the &lt;tt class="docutils literal"&gt;seek()&lt;/tt&gt; method ... &lt;tt class="docutils literal"&gt;txt.seek(0)&lt;/tt&gt;. Each data type has its own set of methods.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;argument&lt;/strong&gt; Input parameters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;parameter&lt;/strong&gt; A variable an argument is stored in when a function is called.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;return&lt;/strong&gt; Value that a function call evaluates to&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;exists&lt;/strong&gt; Checks if a file exists. Returns True or False. Part of the &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;01.&lt;/strong&gt; Run a script from within python interactive mode ...&lt;/p&gt;
&lt;pre class="doctest-block"&gt;
&amp;gt;&amp;gt;&amp;gt; execfile('some_script.py')
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;02.&lt;/strong&gt; &lt;tt class="docutils literal"&gt;format()&lt;/tt&gt; Positional formatting ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;{0} {1} {0} zero ...&amp;quot;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;1, &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt; two &lt;span class="m"&gt;1&lt;/span&gt; zero ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;03.&lt;/strong&gt; &lt;tt class="docutils literal"&gt;from __future__ import&lt;/tt&gt; Allows me to bring Python 3 features into Python 2. Example ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;from __future__ import print_function
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;There are&amp;#39;&lt;/span&gt;, cars, &lt;span class="s1"&gt;&amp;#39;cars available.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... prints a concatenated statement (otherwise the above &lt;tt class="docutils literal"&gt;print()&lt;/tt&gt; in Python 2 makes the commas treat things as a tuple).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;from __future__ import division
print 8/7  &lt;span class="c1"&gt;# prints 1.1428571428571428&lt;/span&gt;
print 8//7 &lt;span class="c1"&gt;# prints 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... makes division into a float. Python 2 would otherwise return &lt;tt class="docutils literal"&gt;1&lt;/tt&gt; for both calculations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;04.&lt;/strong&gt; &lt;tt class="docutils literal"&gt;textwrap.dedent&lt;/tt&gt; A useful module+method for indenting quotes in code while the output is aligned to margin.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 05 Jun 2016 14:40:00 -0400</pubDate><guid>tag:www.circuidipity.com,2016-06-05:lpthw-e22.html</guid><category>python</category><category>programming</category></item><item><title>Minimal to Morebuntu</title><link>http://www.circuidipity.com/20160501.html</link><description>&lt;img alt="Ubuntu under-construction" class="align-right" src="images/ubuntu-crane-300.png" style="width: 300px; height: 300px;" /&gt;
&lt;p&gt;Start with a &lt;strong&gt;minimal install of Ubuntu 16.04 &amp;quot;Xenial Xerus&amp;quot;&lt;/strong&gt; and roll a &lt;strong&gt;Morebuntu&lt;/strong&gt; customized with the &lt;strong&gt;i3 tiling window manager&lt;/strong&gt; plus a collection of desktop applications.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;I use Ubuntu's &lt;a class="reference external" href="https://help.ubuntu.com/community/Installation/MinimalCD"&gt;minimal install image&lt;/a&gt; to create a console-only base configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="minimal-ubuntu"&gt;
&lt;h2&gt;0. Minimal Ubuntu&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Start here:&lt;/strong&gt; A &lt;a class="reference external" href="http://www.circuidipity.com/ubuntu-trusty-install.html"&gt;visual walk-through of a sample Ubuntu setup&lt;/a&gt; that makes use of an entire storage device divided into 3 partitions: an unencrypted &lt;tt class="docutils literal"&gt;root&lt;/tt&gt; partition, and encrypted &lt;tt class="docutils literal"&gt;swap + home&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-x"&gt;
&lt;h2&gt;1. Install X&lt;/h2&gt;
&lt;p&gt;After a successful first boot and network active ... setup the X environment ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install xorg xinput xbindkeys xbacklight xvkbd fonts-liberation ttf-ubuntu-font-family
$ sudo apt install rxvt-unicode-256color xfonts-terminus
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="window-manager"&gt;
&lt;h2&gt;2. Window Manager&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Lots&lt;/strong&gt; of choices! I like the &lt;a class="reference external" href="http://www.circuidipity.com/i3-tiling-window-manager.html"&gt;lightweight and delightful i3 window manager&lt;/a&gt;, with the latest packages provided by the i3 project's &lt;a class="reference external" href="https://i3wm.org/docs/repositories.html"&gt;Ubuntu repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Styling:&lt;/strong&gt; I use &lt;a class="reference external" href="http://www.ravefinity.com/p/download-ambiance-radiance-colors.html"&gt;Ambiance Colors&lt;/a&gt; + &lt;a class="reference external" href="http://www.ravefinity.com/p/vibrancy-colors-gtk-icon-theme.html"&gt;Vibrancy Color Icon&lt;/a&gt; themes. Download the &lt;tt class="docutils literal"&gt;deb&lt;/tt&gt; packages and install with &lt;tt class="docutils literal"&gt;sudo dpkg &lt;span class="pre"&gt;-i&lt;/span&gt; *.deb&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Depends: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gtk2-engines-{murrine,pixbuf}&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install gnome-themes-standard gtk2-engines-murrine gtk2-engines-pixbuf lxappearance qt4-qtconfig
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Theming for QT5 apps can be configured using the &lt;tt class="docutils literal"&gt;qt5ct&lt;/tt&gt; utility. Download the package &lt;a class="reference external" href="http://ppa.launchpad.net/nilarimogard/webupd8/ubuntu/pool/main/q/qt5ct/"&gt;available on the WebUpd8 PPA&lt;/a&gt; and install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="applications"&gt;
&lt;h2&gt;3. Applications&lt;/h2&gt;
&lt;p&gt;Install some favourite desktop packages ...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;editor&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;vim&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;terminal&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rxvt-unicode&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;tmux&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;net&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;firefox&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;transmission-gtk&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multimedia&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ubuntu-restricted-extras&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;vlc&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; (with &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--no-install-recommends&lt;/span&gt;&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;images&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;eog&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scrot&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;geeqie&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;gimp&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt; - &lt;tt class="docutils literal"&gt;libreoffice&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;qpdfview&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install vim rxvt-unicode tmux most
$ sudo apt --no-install-recommends install rhythmbox
$ sudo apt install pulseaudio pulseaudio-utils pavucontrol gstreamer1.0-pulseaudio alsa-utils sox
$ sudo apt install firefox default-jre icedtea-plugin transmission-gtk
$ sudo apt install ubuntu-restricted-extras ffmpeg rhythmbox-plugins vlc
$ sudo apt install eog scrot geeqie gimp gimp-help-en gimp-data-extras
$ sudo apt install libreoffice libreoffice-help-en-us libreoffice-gnome qpdfview
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="update-alternatives"&gt;
&lt;h2&gt;4. Update-alternatives&lt;/h2&gt;
&lt;p&gt;Configure symbolic links that determine default commands ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo update-alternatives --config editor
$ sudo update-alternatives --config pager
$ sudo update-alternatives --config x-terminal-emulator
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="morebuntu"&gt;
&lt;h2&gt;5. Morebuntu&lt;/h2&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://github.com/vonbrownie/linux-post-install/blob/master/scripts/morebuntu.sh"&gt;morebuntu shell script&lt;/a&gt; that covers most of steps 1-4.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 01 May 2016 11:59:00 -0400</pubDate><guid>tag:www.circuidipity.com,2016-05-01:20160501.html</guid><category>ubuntu</category><category>linux</category><category>i3</category><category>shell</category><category>programming</category></item><item><title>LPTHW Exercise 18-21: Functions, Variables, Return</title><link>http://www.circuidipity.com/lpthw-e18-21.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; How long will it take for Sebastiaan to pedal his bike to &lt;em&gt;Proxima Centauri&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import sys
import textwrap

script, &lt;span class="nv"&gt;origin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv

&lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Sebastiaan&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 133.78

def cyclist&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
    &lt;span class="nv"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;6&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; v * &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt; + int&lt;span class="o"&gt;(&lt;/span&gt;boost&lt;span class="o"&gt;))&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        {} __@&lt;/span&gt;
&lt;span class="s1"&gt;        {}  _`\&amp;lt;,_&lt;/span&gt;
&lt;span class="s1"&gt;        {}  (*)/ (*)&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;h, b, w&lt;span class="o"&gt;)&lt;/span&gt;

def intro&lt;span class="o"&gt;()&lt;/span&gt;:
    cyclist&lt;span class="o"&gt;(&lt;/span&gt;1&lt;span class="o"&gt;)&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        Dutch cyclist {0} Bowier in September 2013 achieved a speed&lt;/span&gt;
&lt;span class="s1"&gt;        of {1} km/h with his VeloX3 bicycle, a new world record for a&lt;/span&gt;
&lt;span class="s1"&gt;        human powered vehicle.&lt;/span&gt;

&lt;span class="s1"&gt;        {0} has now offered you a ride on his bike from {2}&lt;/span&gt;
&lt;span class="s1"&gt;        to a destination of your choice! (Thanks {0}!)&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;name, s, origin&lt;span class="o"&gt;)&lt;/span&gt;

def itinerary&lt;span class="o"&gt;(&lt;/span&gt;destination, distance, time, mode&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;travelTimes.txt&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;a+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    txt.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;\n{}-&amp;gt;{} ({} km)\n&amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;origin, destination, distance&lt;span class="o"&gt;))&lt;/span&gt;
    txt.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Travel Time: {} hours by {}\n&amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;time, mode&lt;span class="o"&gt;))&lt;/span&gt;
    txt.seek&lt;span class="o"&gt;(&lt;/span&gt;0&lt;span class="o"&gt;)&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;txt.read&lt;span class="o"&gt;())&lt;/span&gt;
    txt.close&lt;span class="o"&gt;()&lt;/span&gt;

def tripTime&lt;span class="o"&gt;(&lt;/span&gt;distance, speed&lt;span class="o"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; float&lt;span class="o"&gt;(&lt;/span&gt;distance&lt;span class="o"&gt;)&lt;/span&gt; / speed

def trip&lt;span class="o"&gt;()&lt;/span&gt;:
    &lt;span class="nv"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Where would you like to go? &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distance to {} in kilometers? Enter a digit &amp;gt; &amp;#39;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;g&lt;span class="o"&gt;))&lt;/span&gt;
    &lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; tripTime&lt;span class="o"&gt;(&lt;/span&gt;d, s&lt;span class="o"&gt;)&lt;/span&gt;
    cyclist&lt;span class="o"&gt;(&lt;/span&gt;49&lt;span class="o"&gt;)&lt;/span&gt;
    print textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;        Working the pedals at top speed with no breaks, {} would&lt;/span&gt;
&lt;span class="s1"&gt;        get you to {} in {} hours.&lt;/span&gt;
&lt;span class="s1"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;name, g, round&lt;span class="o"&gt;(&lt;/span&gt;t, 2&lt;span class="o"&gt;))&lt;/span&gt;
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Details have been added to your itinerary:&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    itinerary&lt;span class="o"&gt;(&lt;/span&gt;g, d, round&lt;span class="o"&gt;(&lt;/span&gt;t, 2&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;bike&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

intro&lt;span class="o"&gt;()&lt;/span&gt;
trip&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python pedalTime.py Toronto

----------- __@
-------  _&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;,_
------  &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;/ &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;


Dutch cyclist Sebastiaan Bowier in September &lt;span class="m"&gt;2013&lt;/span&gt; achieved a speed
of 133.78 km/h with his VeloX3 bicycle, a new world record &lt;span class="k"&gt;for&lt;/span&gt; a
human powered vehicle.

Sebastiaan has now offered you a ride on his bike from Toronto
to a destination of your choice! &lt;span class="o"&gt;(&lt;/span&gt;Thanks Sebastiaan!&lt;span class="o"&gt;)&lt;/span&gt;

Where would you like to go? &amp;gt; Proxima Centauri
Distance to Proxima Centauri in kilometers? Enter a digit &amp;gt; 40142174400000.0

----------------------------------------------------------- __@
-------------------------------------------------------  _&lt;span class="sb"&gt;`&lt;/span&gt;&lt;span class="se"&gt;\&amp;lt;&lt;/span&gt;,_
------------------------------------------------------  &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;/ &lt;span class="o"&gt;(&lt;/span&gt;*&lt;span class="o"&gt;)&lt;/span&gt;


Working the pedals at top speed with no breaks, Sebastiaan would
get you to Proxima Centauri in 3.00061103304e+11 hours.

Details have been added to your itinerary:

Toronto-&amp;gt;Detroit &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;371&lt;/span&gt; km&lt;span class="o"&gt;)&lt;/span&gt;
Travel Time: 2.77 hours by bike

Toronto-&amp;gt;Proxima Centauri &lt;span class="o"&gt;(&lt;/span&gt;40142174400000.0 km&lt;span class="o"&gt;)&lt;/span&gt;
Travel Time: 3.00061103304e+11 hours by bike

$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Thu, 19 Nov 2015 17:10:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-19:lpthw-e18-21.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 15-17: Reading and Writing Files</title><link>http://www.circuidipity.com/lpthw-e15-17.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Reading and Writing Files&lt;/span&gt;
&lt;span class="c1"&gt;# * close - closes the file&lt;/span&gt;
&lt;span class="c1"&gt;# * read - reads the contents of a file... can assign the result to a variable&lt;/span&gt;
&lt;span class="c1"&gt;# * readline - reads just one line of a text file&lt;/span&gt;
&lt;span class="c1"&gt;# * truncate - empties the file&lt;/span&gt;
&lt;span class="c1"&gt;# * write(&amp;#39;stuff&amp;#39;) - writes &amp;#39;stuff&amp;#39; to the file&lt;/span&gt;

from sys import argv

script, &lt;span class="nv"&gt;filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; argv

print &lt;span class="s2"&gt;&amp;quot;We&amp;#39;re going to erase %r.&amp;quot;&lt;/span&gt; % filename
print &lt;span class="s2"&gt;&amp;quot;If you don&amp;#39;t want that, hit CTRL-C (^C).&amp;quot;&lt;/span&gt;
print &lt;span class="s2"&gt;&amp;quot;If you do want that, hit RETURN.&amp;quot;&lt;/span&gt;

raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Opening the file...&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# open &amp;#39;r&amp;#39; (read (default)) &amp;#39;w&amp;#39; writing and &amp;#39;a&amp;#39; append&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;#39;w&amp;#39; will truncate the file if it already exists&lt;/span&gt;
&lt;span class="nv"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;filename, &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Truncating the file. Goodbye!&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# truncate not necessary... &amp;#39;w&amp;#39; already handles it&lt;/span&gt;
&lt;span class="c1"&gt;#target.truncate()&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;Now I&amp;#39;m going to ask you for three lines.&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;line1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 1: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;line2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 2: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;line3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;line 3: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m going to write these to the file.&amp;quot;&lt;/span&gt;

target.write&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{0}\n{1}\n{2}\nWhat was that last bit? I said...\n&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;{2}\n&amp;quot;&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;line1, line2, line3&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line1)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line2)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(line3)&lt;/span&gt;
&lt;span class="c1"&gt;#target.write(&amp;quot;\n&amp;quot;)&lt;/span&gt;

print &lt;span class="s2"&gt;&amp;quot;And finally, we close it.&amp;quot;&lt;/span&gt;
target.close&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Bonus:&lt;/strong&gt; Last night I attended the monthly &lt;a class="reference external" href="http://www.meetup.com/Python-Toronto/"&gt;Python Toronto Meetup&lt;/a&gt;. It was unintelligible (for a beginner) but inspiring (to me to learn more)! :-)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Wed, 18 Nov 2015 13:55:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-18:lpthw-e15-17.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 13-14: Parameters, Unpacking, Variables, Prompting and Passing</title><link>http://www.circuidipity.com/lpthw-e13-14.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Add extra libraries or &lt;em&gt;modules&lt;/em&gt; of code to a program using &lt;strong&gt;import&lt;/strong&gt; and supply arguments to a Python script on the command line using &lt;strong&gt;argv&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;textwrap&lt;/strong&gt; module enables indenting a block quote for cleaner code but moving to left-margin at &lt;strong&gt;print()&lt;/strong&gt; time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import sys
import textwrap

script, firstName, &lt;span class="nv"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; sys.argv

&lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;    (O&amp;lt; .: Learn Python The Hard Way&lt;/span&gt;
&lt;span class="s2"&gt;    (/)_&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} {} &amp;#39;&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;, author of&amp;#39;&lt;/span&gt; + &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt; * 10&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;firstName, lastName&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;textwrap.dedent&lt;span class="o"&gt;(&lt;/span&gt;message&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e13.2.py Zed Shaw

    &lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Learn Python The Hard Way
    &lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_

Zed Shaw , author of..........

&lt;span class="o"&gt;(&lt;/span&gt;O&amp;lt; .: Learn Python The Hard Way
&lt;span class="o"&gt;(&lt;/span&gt;/&lt;span class="o"&gt;)&lt;/span&gt;_

$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Tue, 17 Nov 2015 00:26:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-17:lpthw-e13-14.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 11-12: Asking Questions, Prompting People</title><link>http://www.circuidipity.com/lpthw-e11-12.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Now we're cooking! Put &lt;strong&gt;raw_input()&lt;/strong&gt; and &lt;strong&gt;format()&lt;/strong&gt; to work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; raw_input&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;What is the temperature today in Clearwater, Florida in Fahrenheit? &amp;gt; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; - 32&lt;span class="o"&gt;)&lt;/span&gt; * &lt;span class="o"&gt;(&lt;/span&gt;5.0/9&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;float&lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; - 32&lt;span class="o"&gt;)&lt;/span&gt; * &lt;span class="o"&gt;(&lt;/span&gt;5.0/9&lt;span class="o"&gt;)&lt;/span&gt; + 273.15

print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;So a temperature of {} Fahrenheit converts to {:.2f} Celsius and {:.2f} Kelvin.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;f, c, k&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Or, to be more precise, a temperature of {} Fahrenheit converts to {} Celsius and {} Kelvin.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;f, round&lt;span class="o"&gt;(&lt;/span&gt;c,5&lt;span class="o"&gt;)&lt;/span&gt;, round&lt;span class="o"&gt;(&lt;/span&gt;k,5&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e11.1.py
What is the temperature today in Clearwater, Florida in Fahrenheit? &amp;gt; 80
So a temperature of &lt;span class="m"&gt;80&lt;/span&gt; Fahrenheit converts to 26.67 Celsius and 299.82 Kelvin.
Or, to be more precise, a temperature of &lt;span class="m"&gt;80&lt;/span&gt; Fahrenheit converts to 26.66667 Celsius and 299.81667 Kelvin.
$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Mon, 16 Nov 2015 13:21:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-16:lpthw-e11-12.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 10: What Was That?</title><link>http://www.circuidipity.com/lpthw-e10.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Playing with escape sequences:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;cars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&amp;#39;self-driving cars&lt;/span&gt;
&lt;span class="s1"&gt;... armoured cars&lt;/span&gt;
&lt;span class="s1"&gt;... \t\t\t\tgetaway cars&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{1} {0}\n\t{2} {0}\t\t{3} {0}\n{4} {4} {3} bumper {0}\n\a&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; * &lt;span class="m"&gt;40&lt;/span&gt; + cars&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;car&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Red&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;really&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Red car
        blue car                green car
really really green bumper car
........................................self-driving cars
armoured cars
                                getaway cars
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 15 Nov 2015 15:46:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-15:lpthw-e10.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 9: Printing, Printing, Printing</title><link>http://www.circuidipity.com/lpthw-e9.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Escape sequences and block quotes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;countdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0\n\n\n&amp;quot;&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;countdown&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;Liftoff!&lt;/span&gt;
&lt;span class="s2"&gt;Tower clear...&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e09.1.py

10
9
8
7
6
5
4
3
2
1
0




Liftoff!
Tower clear...

$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 15 Nov 2015 15:43:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-15:lpthw-e9.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 8: Printing, Printing</title><link>http://www.circuidipity.com/lpthw-e8.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; More printing using the newer &lt;strong&gt;format()&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{} {} {} {}&amp;quot;&lt;/span&gt;

print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;1, 2, 3, 4&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;one&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;two&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;three&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;four&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;True, False, False, True&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;formatter, formatter, formatter, formatter&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;formatter&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;I had this thing.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;That you could type up right.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;But it didn&amp;#39;t sing.&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;So I said goodnight.&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e08.1.py
&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt; 4
one two three four
True False False True
&lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
I had this thing. That you could &lt;span class="nb"&gt;type&lt;/span&gt; up right. But it didn&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t sing. So I said goodnight.
$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 15 Nov 2015 14:45:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-15:lpthw-e8.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 7: More Printing</title><link>http://www.circuidipity.com/lpthw-e7.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am practising printing in Python 2 using the &lt;strong&gt;print()&lt;/strong&gt; and &lt;strong&gt;format()&lt;/strong&gt; functions inherited from Python 3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;poem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;The Wreck of the Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;poet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Longfellow&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;poem + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + poet&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + poet&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;poem&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot; by &amp;quot;&lt;/span&gt; + &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;poem, poet&lt;span class="o"&gt;)&lt;/span&gt;
The Wreck of the Hesperus by Longfellow
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 15 Nov 2015 14:38:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-15:lpthw-e7.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 6: Strings and Text</title><link>http://www.circuidipity.com/lpthw-e6.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am not entirely clear about the difference between &lt;strong&gt;%r&lt;/strong&gt; vs &lt;strong&gt;%s&lt;/strong&gt; in string formatting. I &lt;strong&gt;do&lt;/strong&gt; understand they call different functions (&lt;strong&gt;repr&lt;/strong&gt; and &lt;strong&gt;str&lt;/strong&gt;) and produce different output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="nv"&gt;vessel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;The Wreck of the %r&amp;quot;&lt;/span&gt; % vessel
The Wreck of the &lt;span class="s1"&gt;&amp;#39;Hesperus&amp;#39;&lt;/span&gt;
&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;The Wreck of the %s&amp;quot;&lt;/span&gt; % vessel
The Wreck of the Hesperus
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As the book states, the first example is &amp;quot;raw output&amp;quot; and the second is the content more cleanly formatted for printing. Why using &lt;strong&gt;repr&lt;/strong&gt; would be desirable under certain circumstances will probably become more clear later on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 15 Nov 2015 12:59:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-15:lpthw-e6.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 5: More Variables and Printing</title><link>http://www.circuidipity.com/lpthw-e5.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; The old way of printing format strings using &lt;strong&gt;%&lt;/strong&gt; and the new way using &lt;strong&gt;.format()&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;astronaut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yuri Gagarin&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;astronaut_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alan Shepard&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Baikonur&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;launch_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Cape Canaveral&amp;#39;&lt;/span&gt;
&lt;span class="nv"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 1961

print &lt;span class="s2"&gt;&amp;quot;%s blasted off from %s and became the first %s to reach space in %d.&amp;quot;&lt;/span&gt; % &lt;span class="o"&gt;(&lt;/span&gt;astronaut, launch, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{} blasted off from {} and became the first {} to reach space in {}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;astronaut, launch, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{1} blasted off from {3} and became the first {5} to reach space in {6}.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;.format&lt;span class="o"&gt;(&lt;/span&gt;astronaut, astronaut_1, launch, launch_1, &lt;span class="s1"&gt;&amp;#39;human&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;American&amp;#39;&lt;/span&gt;, date&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python e05.2.py
Yuri Gagarin blasted off from Baikonur and became the first human to reach space in 1961.
Yuri Gagarin blasted off from Baikonur and became the first human to reach space in 1961.
Alan Shepard blasted off from Cape Canaveral and became the first American to reach space in 1961.
$
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sat, 14 Nov 2015 17:25:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-14:lpthw-e5.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 4: Variables and Names</title><link>http://www.circuidipity.com/lpthw-e4.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Equal sign assigns whatever is on the right to the variable on the left. Double equal signs perform a comparison. Same as shell scripting.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sat, 14 Nov 2015 16:18:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-14:lpthw-e4.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 3: Numbers and Math</title><link>http://www.circuidipity.com/lpthw-e3.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Order of math operations is PEMDAS: &lt;em&gt;Parentheses Exponents Multiplication Division Addition Subtraction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So long as at least one of the numbers in a calculation is a floating point number the answer returned will also be floating point. Otherwise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; &lt;span class="m"&gt;5&lt;/span&gt; / 2
2
&amp;gt;&amp;gt;&amp;gt; 5.0 / 2
2.5
&amp;gt;&amp;gt;&amp;gt; 5.0 % 2
1.0
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sat, 14 Nov 2015 16:04:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-14:lpthw-e3.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 2: Comments and Pound Characters</title><link>http://www.circuidipity.com/lpthw-e2.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; Using the pound character (#) to add comments or disable a line of code works the same in Python as in Bash shell scripting.&lt;/p&gt;
&lt;p&gt;Different languages &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comment_%28computer_programming%29#Examples"&gt;do things differently ...&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sat, 14 Nov 2015 15:43:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-14:lpthw-e2.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 1: A Good First Program</title><link>http://www.circuidipity.com/lpthw-e1.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; The traditional &lt;em&gt;Hello World&lt;/em&gt; program. &lt;strong&gt;Print&lt;/strong&gt; in Python 2 encloses the statement in quotes while Python 3 adds brackets (and brackets format is backward-compatible to Python 2 but not vice-versa):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; print &lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;
Hello World!
&amp;gt;&amp;gt;&amp;gt; print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
Hello World!
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Fri, 13 Nov 2015 21:49:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-11-13:lpthw-e1.html</guid><category>python</category><category>programming</category></item><item><title>LPTHW Exercise 0: The Setup</title><link>http://www.circuidipity.com/lpthw-e0.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way by Zed Shaw .:&lt;/a&gt; I am doing the Python exercises on a computer running &lt;a class="reference external" href="http://www.circuidipity.com/tag-ubuntu.html"&gt;Ubuntu&lt;/a&gt; bundled with Python 2.7.&lt;/p&gt;
&lt;p&gt;Zed recommends &lt;tt class="docutils literal"&gt;gedit&lt;/tt&gt; as the text editor to begin writing code. Let's give it a shot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install gedit
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Upon launching the editor I immediately run into a problem of thick transparent borders being drawn around its windows. &lt;strong&gt;Fix...&lt;/strong&gt; Create &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.config/gtk-3.0/gtk.css&lt;/span&gt;&lt;/tt&gt; with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;.window-frame, .window-frame:backdrop &lt;span class="o"&gt;{&lt;/span&gt;
box-shadow: &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; black&lt;span class="p"&gt;;&lt;/span&gt;
border-style: none&lt;span class="p"&gt;;&lt;/span&gt;
margin: 0&lt;span class="p"&gt;;&lt;/span&gt;
border-radius: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

.titlebar &lt;span class="o"&gt;{&lt;/span&gt;
border-radius: 0&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Source: &lt;a class="reference external" href="https://bbs.archlinux.org/viewtopic.php?pid=1469360#p1469360"&gt;Evince (GTK3?) doesn't actually run fullscreen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My terminal is &lt;tt class="docutils literal"&gt;urxvt&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install rxvt-unicode
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Terminal settings (fonts, colours, tabs) are modified in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.Xresources&lt;/span&gt;&lt;/tt&gt;. &lt;a class="reference external" href="https://github.com/vonbrownie/dotfiles/blob/master/.Xresources"&gt;This is mine.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Launching Python in interactive mode I see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ python
Python 2.7.10 &lt;span class="o"&gt;(&lt;/span&gt;default, Oct &lt;span class="m"&gt;14&lt;/span&gt; 2015, 16:09:02&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;GCC 5.2.1 20151010&lt;span class="o"&gt;]&lt;/span&gt; on linux2
Type &lt;span class="s2"&gt;&amp;quot;help&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;copyright&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;credits&amp;quot;&lt;/span&gt; or &lt;span class="s2"&gt;&amp;quot;license&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; more information.
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sat, 28 May 2016 14:13:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-11-12:lpthw-e0.html</guid><category>python</category><category>programming</category><category>linux</category></item><item><title>Learn Python the Hard Way with the DUDE</title><link>http://www.circuidipity.com/lpthw-dude.html</link><description>&lt;img alt="LPTHW" class="align-right" src="images/lpthw-begin-1.png" style="width: 250px; height: 479px;" /&gt;
&lt;p&gt;Using Linux and writing &lt;a class="reference external" href="https://github.com/vonbrownie/homebin"&gt;simple shell scripts&lt;/a&gt; has been an enjoyable peek at programming. But now I want to go farther and learning &lt;a class="reference external" href="http://www.circuidipity.com/tag-python.html"&gt;Python&lt;/a&gt; strikes me as a useful next step. Starting with the free HTML version of the book &lt;a class="reference external" href="http://learnpythonthehardway.org/book/"&gt;Learn Python the Hard Way&lt;/a&gt; by &lt;strong&gt;Zed Shaw&lt;/strong&gt;, who states right off the bat:&lt;/p&gt;
&lt;blockquote&gt;
It's only the &amp;quot;hard&amp;quot; way because it uses a technique called &lt;em&gt;instruction&lt;/em&gt;. Instruction is where I tell you to do a sequence of controlled exercises designed to build a skill through repetition. This technique works very well with beginners who know nothing and need to acquire basic skills before they can understand more complex topics. It's used in everything from martial arts to music to even basic math and reading skills.&lt;/blockquote&gt;
&lt;p&gt;Zed is a (probably very cool) dude but the DUDE is a &lt;strong&gt;Daily Undertaking of Deliberate Effort&lt;/strong&gt;. Which translates as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set aside a block of time free of distractions to focus on improving a skill&lt;/li&gt;
&lt;li&gt;push ahead with tasks of increasing complexity&lt;/li&gt;
&lt;li&gt;do a bit every day&lt;/li&gt;
&lt;li&gt;cultivate feedback&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For LPTHW I will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;set a timer for a &lt;strong&gt;50 minute session&lt;/strong&gt; to focus on the coding exercises (a double &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pomodoro_Technique"&gt;pomodoro&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;work methodically through each exercise&lt;/li&gt;
&lt;li&gt;do the work (minimum 1 session) every day&lt;/li&gt;
&lt;li&gt;send a &lt;tt class="docutils literal"&gt;Done!&lt;/tt&gt; email to a friend marking the daily effort&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e0.html"&gt;Exercise 0: The Setup&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e1.html"&gt;Exercise 1: A Good First Program&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e2.html"&gt;Exercise 2: Comments and Pound Characters&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e3.html"&gt;Exercise 3: Numbers and Math&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e4.html"&gt;Exercise 4: Variables and Names&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e5.html"&gt;Exercise 5: More Variables and Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e6.html"&gt;Exercise 6: Strings and Text&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e7.html"&gt;Exercise 7: More Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e8.html"&gt;Exercise 8: Printing, Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id10"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e9.html"&gt;Exercise 9: Printing, Printing, Printing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id11"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e10.html"&gt;Exercise 10: What Was That?&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id12"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e11-12.html"&gt;Exercise 11: Asking Questions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id13"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e11-12.html"&gt;Exercise 12: Prompting People&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id14"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e13-14.html"&gt;Exercise 13: Parameters, Unpacking, Variables&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id15"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e13-14.html"&gt;Exercise 14: Prompting and Passing&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id16"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 15: Reading Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id17"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 16: Reading and Writing Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id18"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e15-17.html"&gt;Exercise 17: More Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id19"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 18: Names, Variables, Code, Functions&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id20"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 19: Functions and Variables&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id21"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 20: Functions and Files&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id22"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e18-21.html"&gt;Exercise 21: Functions Can Return Something&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;div class="section" id="id23"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.circuidipity.com/lpthw-e22.html"&gt;Exercise 22: What Do You Know So Far?&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 05 Jun 2016 14:28:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-11-11:lpthw-dude.html</guid><category>python</category><category>programming</category></item><item><title>Create a self-signed SSL certificate</title><link>http://www.circuidipity.com/self-signed-ssl-certificate.html</link><description>&lt;p&gt;Secure web access to services hosted on a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;home server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I am running &lt;a class="reference external" href="http://www.circuidipity.com/ttrss.html"&gt;Tiny Tiny RSS&lt;/a&gt; (ttrss) and &lt;a class="reference external" href="http://www.circuidipity.com/php-nginx-postgresql.html"&gt;Nginx&lt;/a&gt; on my server and want to divert HTTP traffic from port 80 to HTTPS login and access news feeds on port 443. Rather than obtain an SSL certificate from a certificate authority (CA) its a simple matter to create one for personal use.&lt;/p&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;openssl&lt;/tt&gt; and generate a certificate for Nginx ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt install openssl
$ sudo mkdir /etc/nginx/ssl
$ sudo openssl req -x509 -nodes -days &lt;span class="m"&gt;365&lt;/span&gt; -newkey rsa:2048 -keyout /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new server block in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-available&lt;/span&gt;&lt;/tt&gt; ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;server &lt;span class="o"&gt;{&lt;/span&gt;
    listen 80&lt;span class="p"&gt;;&lt;/span&gt;
    listen &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:80&lt;span class="p"&gt;;&lt;/span&gt;
    server_name www.foo.ca&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;301&lt;/span&gt; https://$host$request_uri&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;## redirect all non-https traffic to https&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

server &lt;span class="o"&gt;{&lt;/span&gt;
    listen &lt;span class="m"&gt;443&lt;/span&gt; ssl&lt;span class="p"&gt;;&lt;/span&gt;
    root /var/www/foo&lt;span class="p"&gt;;&lt;/span&gt;
    index index.html index.php&lt;span class="p"&gt;;&lt;/span&gt;

    access_log /var/log/nginx/foo_access.log&lt;span class="p"&gt;;&lt;/span&gt;
    error_log /var/log/nginx/foo_error.log info&lt;span class="p"&gt;;&lt;/span&gt;

    server_name www.foo.ca&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate /etc/nginx/ssl/server.crt&lt;span class="p"&gt;;&lt;/span&gt;
    ssl_certificate_key /etc/nginx/ssl/server.key&lt;span class="p"&gt;;&lt;/span&gt;

    location / &lt;span class="o"&gt;{&lt;/span&gt;
            index           index.php&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Activate the block by creating a symlink in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/nginx/sites-enabled&lt;/span&gt;&lt;/tt&gt; and restart nginx ...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl restart nginx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Configure &lt;a class="reference external" href="http://www.circuidipity.com/20141006.html"&gt;port forwarding on the router&lt;/a&gt; and (optional) &lt;a class="reference external" href="https://wiki.gandi.net/en/dns/zone/subdomain"&gt;setup a subdomain&lt;/a&gt; with a hosting/domain provider.&lt;/p&gt;
&lt;p&gt;Note the first time navigating to the new HTTPS address the web browser warns &lt;em&gt;This Connection is Untrusted&lt;/em&gt; (which is to be expected since its a self-signed certificate vs CA verification).&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;p&gt;Sources: &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-create-an-ssl-certificate-on-nginx-for-ubuntu-14-04"&gt;Create an SSL certificate on Nginx for Ubuntu&lt;/a&gt;; &lt;a class="reference external" href="https://serverfault.com/questions/67316/in-nginx-how-can-i-rewrite-all-http-requests-to-https-while-maintaining-sub-dom"&gt;Rewrite HTTP requests to HTTPS&lt;/a&gt;; &lt;a class="reference external" href="http://nginx.org/en/docs/http/server_names.html"&gt;Nginx server_names&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Sun, 21 Aug 2016 18:33:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-08-27:self-signed-ssl-certificate.html</guid><category>server</category><category>network</category><category>linux</category></item><item><title>Install CyanogenMod on Nexus 4</title><link>http://www.circuidipity.com/install-cyanogenmod-nexus-4.html</link><description>&lt;p&gt;Replace stock Android with CyanogenMod on the Nexus 4 using Linux.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;Thanks to a &lt;strong&gt;very generous friend&lt;/strong&gt; who upgraded to a new smartphone I now have her old Google Nexus 4. I have dabbled with alternative Android firmwares in the past, and was inspired to give CyaonogenMod a go on this phone after reading &lt;a class="reference external" href="https://lwn.net/Articles/602521/"&gt;Android without the mothership [LWN.net]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="download"&gt;
&lt;h2&gt;0. Download&lt;/h2&gt;
&lt;p&gt;I install CyanogenMod from a host running Debian. Download &lt;tt class="docutils literal"&gt;adb&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;fastboot&lt;/tt&gt; install tools:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install android-tools-adb android-tools-fastboot
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nexus 4 device is code-named &lt;tt class="docutils literal"&gt;mako&lt;/tt&gt;. Download:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a recovery image (TWRP) - &lt;a class="reference external" href="https://twrp.me/devices/lgnexus4.html"&gt;https://twrp.me/devices/lgnexus4.html&lt;/a&gt; (&lt;a class="reference external" href="https://dl.twrp.me/mako/"&gt;latest is 2.8.7.0&lt;/a&gt; as of 7/29)&lt;/li&gt;
&lt;li&gt;the Cyanogenmod ROM nightly build &lt;a class="reference external" href="https://download.cyanogenmod.org/?device=mako&amp;amp;type="&gt;specific to this device&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="developer-options"&gt;
&lt;h2&gt;1. Developer Options&lt;/h2&gt;
&lt;p&gt;On the Nexus I enable developer options by navigating to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Settings-&amp;gt;About&lt;/span&gt; phone&lt;/tt&gt;, click to open and make +7 taps on &lt;strong&gt;Build&lt;/strong&gt; number. Displays &lt;tt class="docutils literal"&gt;You are now a developer&lt;/tt&gt;. Return to settings and &lt;tt class="docutils literal"&gt;Developer Options&lt;/tt&gt; is now visible. Click to open and activate &lt;tt class="docutils literal"&gt;USB debugging&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-device"&gt;
&lt;h2&gt;2. Connect device&lt;/h2&gt;
&lt;p&gt;Connect phone to host via USB:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ lsusb &lt;span class="p"&gt;|&lt;/span&gt; grep -i nexus
Bus &lt;span class="m"&gt;001&lt;/span&gt; Device 003: ID 18d1:4ee2 Google Inc. Nexus &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;debug&lt;span class="o"&gt;)&lt;/span&gt;
$ adb devices -l
* daemon not running. starting it now on port &lt;span class="m"&gt;5037&lt;/span&gt; *
* daemon started successfully *
List of devices attached
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       offline usb:1-12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Confirm &lt;tt class="docutils literal"&gt;Allow usb debugging&lt;/tt&gt; in pop-up on the phone. Re-run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb devices -l
List of devices attached
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       device usb:1-12 product:occam model:Nexus_4 device:mako
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="unlock-bootloader"&gt;
&lt;h2&gt;3. Unlock bootloader&lt;/h2&gt;
&lt;p&gt;Boot the device into &lt;strong&gt;fastboot&lt;/strong&gt; mode:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb reboot bootloader
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once device is in fastboot mode, verify host sees device and unlock:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot devices -l
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;       fastboot usb:1-12
$ fastboot oem unlock
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="install-twrp"&gt;
&lt;h2&gt;4. Install TWRP&lt;/h2&gt;
&lt;p&gt;While in fastboot mode flash the TWRP recovery image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot flash recovery twrp-VERSION-mako.img
sending &lt;span class="s1"&gt;&amp;#39;recovery&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9028&lt;/span&gt; KB&lt;span class="o"&gt;)&lt;/span&gt;...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.287s&lt;span class="o"&gt;]&lt;/span&gt;
writing &lt;span class="s1"&gt;&amp;#39;recovery&amp;#39;&lt;/span&gt;...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.501s&lt;span class="o"&gt;]&lt;/span&gt;
finished. total time: 0.787s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reboot the bootloader:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ fastboot reboot-bootloader
rebooting into bootloader...
OKAY &lt;span class="o"&gt;[&lt;/span&gt;  0.001s&lt;span class="o"&gt;]&lt;/span&gt;
finished. total time: 0.001s
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Use the device volume keys to navigate to &lt;strong&gt;Recovery&lt;/strong&gt; mode and power key to select. TWRP recovery starts. Tap &lt;strong&gt;Wipe&lt;/strong&gt; and swipe to start &lt;strong&gt;Factory Reset&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-cyanogenmod"&gt;
&lt;h2&gt;5. Install CyanogenMod&lt;/h2&gt;
&lt;p&gt;Copy the CyanogenMod distribution zip file into device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb push cm-12.1-VERSION-NIGHTLY-mako.zip /sdcard
&lt;span class="m"&gt;3753&lt;/span&gt; KB/s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;263171832&lt;/span&gt; bytes in 68.465s&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Return to TWRP main menu and tap &lt;strong&gt;Install&lt;/strong&gt;. Search in file system for the freshly-installed zip and tap to select. Tap checkbox Zip file signature verification and swipe to confirm flash. The message &lt;tt class="docutils literal"&gt;Successfull&lt;/tt&gt; should appear. Tap &lt;tt class="docutils literal"&gt;Reboot System&lt;/tt&gt; and device boots into CyanogenMod. Yes!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="f-droid"&gt;
&lt;h2&gt;6. F-Droid&lt;/h2&gt;
&lt;p&gt;As a replacement for the non-free Google Play Store app I use the &lt;a class="reference external" href="https://f-droid.org/about/"&gt;F-Droid&lt;/a&gt; free software app repository:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;on the phone navigate to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Settings-&amp;gt;Security-&amp;gt;Unknown&lt;/span&gt; sources&lt;/tt&gt; and tap to allow&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://f-droid.org/FDroid.apk"&gt;download the F-Droid app&lt;/a&gt; to host and install the &lt;tt class="docutils literal"&gt;apk&lt;/tt&gt; to phone using &lt;a class="reference external" href="https://developer.android.com/tools/help/adb.html#move"&gt;adb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ adb install /path/to/FDroid.apk
&lt;span class="m"&gt;4373&lt;/span&gt; KB/s &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3942326&lt;/span&gt; bytes in 0.880s&lt;span class="o"&gt;)&lt;/span&gt;
        pkg: /data/local/tmp/FDroid.apk
Success
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Two apps I like and use daily are &lt;a class="reference external" href="https://f-droid.org/repository/browse/?fdfilter=fbreader&amp;amp;fdid=org.geometerplus.zlibrary.ui.android"&gt;fbreader&lt;/a&gt; for ebooks and &lt;a class="reference external" href="https://f-droid.org/repository/browse/?fdfilter=podcast&amp;amp;fdid=de.danoeh.antennapod"&gt;AntennaPod&lt;/a&gt; for downloading and listening to podcasts.&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Fri, 21 Aug 2015 12:26:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-08-19:install-cyanogenmod-nexus-4.html</guid><category>android</category><category>linux</category></item><item><title>I would rather be ashes than dust</title><link>http://www.circuidipity.com/rather-ashes-than-dust.html</link><description>&lt;img alt="Soyuz night launch" class="align-right" src="images/soyuz-at-night-2.png" /&gt;
&lt;p&gt;&lt;strong&gt;Jack London (1876-1916):&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I would rather be ashes than dust;&lt;/div&gt;
&lt;div class="line"&gt;I would rather that my spark should&lt;/div&gt;
&lt;div class="line"&gt;burn out in a brilliant blaze than it&lt;/div&gt;
&lt;div class="line"&gt;should be stifled by dry-rot; I would&lt;/div&gt;
&lt;div class="line"&gt;rather be in a superb meteor; every&lt;/div&gt;
&lt;div class="line"&gt;atom of me in a magnificent glow&lt;/div&gt;
&lt;div class="line"&gt;than in a sleepy and permanent&lt;/div&gt;
&lt;div class="line"&gt;planet; the proper function of man is&lt;/div&gt;
&lt;div class="line"&gt;to live, not to exist; I shall not waste&lt;/div&gt;
&lt;div class="line"&gt;my days in trying to prolong them;&lt;/div&gt;
&lt;div class="line"&gt;I shall USE my time.&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Thu, 13 Aug 2015 15:12:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-08-13:rather-ashes-than-dust.html</guid><category>quotes</category></item><item><title>Incremental backups</title><link>http://www.circuidipity.com/incremental-backups-rsnapshot.html</link><description>&lt;p&gt;&lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Home Server Project #3 .:&lt;/a&gt; Make incremental and automatic backups of a home folder using &lt;strong&gt;rsnapshot + cron&lt;/strong&gt; (and manual backups via &lt;strong&gt;public transit&lt;/strong&gt;).&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;Backup strategy &lt;strong&gt;Version 0&lt;/strong&gt; for my home folder was &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;. That is, I would simply make a periodic, manual sync of files using &lt;strong&gt;rsync&lt;/strong&gt; from my primary computer to a &lt;strong&gt;portable&lt;/strong&gt; encrypted &lt;a class="reference external" href="http://www.circuidipity.com/encrypt-external-drive.html"&gt;USB hard drive&lt;/a&gt;. Then ride the &lt;strong&gt;subway&lt;/strong&gt; to a family/friend's place and swap drives (offsite backup).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version 1&lt;/strong&gt; expanded to &lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;Raspberry Pi&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;. One of the advantages of setting up a &lt;a class="reference external" href="http://www.circuidipity.com/raspberry-pi-home-server.html"&gt;Raspberry Pi home server&lt;/a&gt; is providing a 24/7 uptime location to automatically (using &lt;strong&gt;cron&lt;/strong&gt;) mirror my laptop's home folder over the local area network (LAN).&lt;/p&gt;
&lt;p&gt;These backups are &lt;strong&gt;snapshots&lt;/strong&gt; of home at a particular date. Pi server has a backup of 24 hours or less, the USB drive has another snapshot a few weeks old, the offsite another snapshot from a month ago. But there is no ordered progression of backups from Day 2 to Day 3, Week 4, Month 5, etc. One alternative is to every day stash an entire backup of my home folder but its a sub-optimal use of resources and would quickly fill a hard drive.&lt;/p&gt;
&lt;p&gt;A much better solution is to use &lt;a class="reference external" href="http://rsnapshot.org/"&gt;rsnapshot&lt;/a&gt;  to make &lt;strong&gt;incremental backups&lt;/strong&gt; and my backup strategy &lt;strong&gt;Version 2&lt;/strong&gt; now incorporates:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsnapshot&lt;/strong&gt; + &lt;strong&gt;cron&lt;/strong&gt; + &lt;strong&gt;rsync&lt;/strong&gt; + &lt;strong&gt;Raspberry Pi&lt;/strong&gt; + &lt;strong&gt;portable&lt;/strong&gt; + &lt;strong&gt;subway&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;nightly a cron job runs &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; to sync &lt;tt class="docutils literal"&gt;/home/&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/etc/&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;/my/backup/location/daily.0/&lt;/tt&gt;;&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;daily.0&lt;/tt&gt; increments to &lt;tt class="docutils literal"&gt;daily.1&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;daily.1&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;daily.2&lt;/tt&gt;, etc. (retention set to 7 days)&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--hard-links&lt;/span&gt;&lt;/tt&gt; is how &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; performs its minimal-storage-magic... if a file remains unchanged in the next backup a hard link is created so subsequent backups only contain modified files and links;&lt;/li&gt;
&lt;li&gt;in the wee morning hours another cron job syncs &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; to Pi server;&lt;/li&gt;
&lt;li&gt;every Saturday &lt;tt class="docutils literal"&gt;daily.6&lt;/tt&gt; rotates to &lt;tt class="docutils literal"&gt;weekly.0&lt;/tt&gt; (and &lt;tt class="docutils literal"&gt;weekly.0&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;weekly.1&lt;/tt&gt; ... with 4 week retention);&lt;/li&gt;
&lt;li&gt;on the 1st of the month &lt;tt class="docutils literal"&gt;weekly.3&lt;/tt&gt; rotates to &lt;tt class="docutils literal"&gt;month.0&lt;/tt&gt; (12 month retention);&lt;/li&gt;
&lt;li&gt;every week or so I sync &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; to the USB drive;&lt;/li&gt;
&lt;li&gt;every month or so I ride the subway to offsite storage and swap drives&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;0. Rsnapshot&lt;/h3&gt;
&lt;p&gt;Install &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt;, make a directory to store backups, and make a copy of the default config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo apt-get install rsnapshot
$ mkdir /my/backup/location
$ sudo cp /etc/rsnapshot.conf /etc/rsnapshot.conf.default
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;tt class="docutils literal"&gt;/etc/rsnapshot.conf&lt;/tt&gt; (important to separate fields with &lt;strong&gt;TABS&lt;/strong&gt; not spaces). Example of a few tweaks:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;snapshot_root   /my/backup/location

cmd_cp          /bin/cp
cmd_rm          /bin/rm
cmd_rsync       /usr/bin/rsync
cmd_du          /usr/bin/du
cmd_rsnapshot_diff      /usr/bin/rsnapshot-diff

retain  daily   7
retain  weekly  4
retain  monthly 12

exclude_file    /home/USER/.rsyncExclude  &lt;span class="c1"&gt;# ...and create this file with list of things to exclude from backup&lt;/span&gt;

link_dest       1

sync_first      &lt;span class="m"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# allows better recovery in the event that rsnapshot is interrupted (see: ``man rsnapshot``)&lt;/span&gt;

&lt;span class="c1"&gt;# LOCALHOST&lt;/span&gt;
backup  /home/          localhost/
backup  /etc/           localhost/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check config syntax and run backup test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo rsnapshot configtest
$ sudo rsnapshot -t sync
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything checks out OK go ahead and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo rsnapshot sync &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo rsnapshot daily &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo rsnapshot du
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Automate backups by modifying the sample cron file provided in &lt;tt class="docutils literal"&gt;/etc/cron.d/rsnapshot&lt;/tt&gt; and running jobs as root. Example config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# m h  dom mon dow   command&lt;/span&gt;
&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="m"&gt;23&lt;/span&gt; * * *     root    /usr/bin/rsnapshot sync &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; /usr/bin/rsnapshot daily
&lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; * * &lt;span class="m"&gt;6&lt;/span&gt;     root    /usr/bin/rsnapshot weekly
&lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; * *     root    /usr/bin/rsnapshot monthly
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="backup-the-backup"&gt;
&lt;h3&gt;1. Backup the backup&lt;/h3&gt;
&lt;p&gt;Rsnapshot operates as a &lt;strong&gt;pull&lt;/strong&gt; program: it pulls in backups from local and remote devices. Instead of juggling access permissions to allow the rsnapshot server to talk with other devices I decided to limit &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; to making backups on &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; and use &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;my already-configured SSH key setup&lt;/a&gt; to &lt;strong&gt;push&lt;/strong&gt; a snapshot of the backup to my Raspberry Pi for remote storage.&lt;/p&gt;
&lt;div class="section" id="on-the-pi"&gt;
&lt;h4&gt;1.1 On the Pi&lt;/h4&gt;
&lt;p&gt;Create a directory to store the backup:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ mkdir /path/to/backup
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-localhost"&gt;
&lt;h4&gt;1.2 On localhost&lt;/h4&gt;
&lt;p&gt;Set the ip address and hostname of the Pi server in &lt;tt class="docutils literal"&gt;/etc/hosts&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;192.168.1.88    raspberry.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Test synching &lt;tt class="docutils literal"&gt;/my/backup/location/&lt;/tt&gt; on &lt;tt class="docutils literal"&gt;localhost&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspberry.server:/path/to/backup/&lt;/span&gt;&lt;/tt&gt; with the &lt;tt class="docutils literal"&gt;rsync &lt;span class="pre"&gt;--dry-run&lt;/span&gt;&lt;/tt&gt; option (I exclude &lt;tt class="docutils literal"&gt;/etc/&lt;/tt&gt; from the backup):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;rsync --dry-run --archive --hard-links --numeric-ids --delete --exclude&lt;span class="o"&gt;=&lt;/span&gt;etc/ --verbose /my/backup/location/ raspberry.server:/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything checks out OK drop &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--dry-run&lt;/span&gt;&lt;/tt&gt; and re-run the command to make a proper backup.&lt;/p&gt;
&lt;p&gt;I use &lt;tt class="docutils literal"&gt;keychain&lt;/tt&gt; to manage &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;SSH keys for password-less logins to the Pi&lt;/a&gt;. Create a &lt;tt class="docutils literal"&gt;backupSnap.sh&lt;/tt&gt; shell script and place in &lt;tt class="docutils literal"&gt;~/bin&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
. &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/.keychain/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;HOSTNAME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;-sh
rsync --archive --hard-links --numeric-ids --delete --exclude&lt;span class="o"&gt;=&lt;/span&gt;etc/ /my/backup/location/ &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Automate the backups by creating a cron job (example that runs daily at 04:50):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# m h  dom mon dow   command&lt;/span&gt;
&lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; * * *  /home/USERNAME/bin/backupSnap.sh raspberry.server:/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="external-drive-and-offsite-storage"&gt;
&lt;h3&gt;2. External drive and offsite storage&lt;/h3&gt;
&lt;p&gt;I connect my USB drive and sync the backup to the device:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ /home/USERNAME/bin/backupSnap.sh /media/USB/path/to/backup/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and take my hard drive for &lt;a class="reference external" href="http://ttc.ca/Routes/General_Information/Maps/index.jsp"&gt;a ride on the subway&lt;/a&gt; to say hello to my offsite storage!&lt;/p&gt;
&lt;p&gt;Happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Fri, 12 Feb 2016 23:13:00 -0500</pubDate><guid>tag:www.circuidipity.com,2015-08-12:incremental-backups-rsnapshot.html</guid><category>server</category><category>network</category><category>linux</category></item><item><title>Run remote X applications on a local display</title><link>http://www.circuidipity.com/x11-forwarding-ssh.html</link><description>&lt;p&gt;Run remote X applications on a local display with X11 forwarding over SSH.&lt;/p&gt;
&lt;div class="section" id="let-s-go"&gt;
&lt;h2&gt;Let's go!&lt;/h2&gt;
&lt;p&gt;I give my &lt;a class="reference external" href="http://www.circuidipity.com/c720-chromebook-to-jessiebook.html"&gt;Jessiebook's smallish amount of RAM&lt;/a&gt; a bit of a break by enlisting other machines on my home network to run X apps. Once &lt;a class="reference external" href="http://www.circuidipity.com/secure-remote-access-using-ssh-keys.html"&gt;SSH is properly configured&lt;/a&gt; it is easy to use X11 forwarding to have apps running on the server show up on the client's local display.&lt;/p&gt;
&lt;div class="section" id="on-the-server"&gt;
&lt;h3&gt;On the server&lt;/h3&gt;
&lt;p&gt;Activate X11 forwarding on the OpenSSH server by modifying &lt;tt class="docutils literal"&gt;/etc/ssh/sshd_config&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;X11Forwarding yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;... and restart the server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ sudo systemctl restart sshd.service
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="on-the-client"&gt;
&lt;h3&gt;On the client&lt;/h3&gt;
&lt;p&gt;X11 forwarding options can be configured system-wide in &lt;tt class="docutils literal"&gt;/etc/ssh/ssh_config&lt;/tt&gt; or per-user in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.ssh/config&lt;/span&gt;&lt;/tt&gt; or simply forward X on a connection-by-connection basis at login with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-X&lt;/span&gt;&lt;/tt&gt; option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -X remote.host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some apps might require the &lt;tt class="docutils literal"&gt;ForwardX11Trusted&lt;/tt&gt; option to allow the full set of X functions from a &lt;strong&gt;trusted&lt;/strong&gt; remote server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -Y remote.host
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="warning"&gt;WARNING!&lt;/span&gt; An intruder on the SSH server will be able to capture everything on the local screen and every keystroke with &lt;tt class="docutils literal"&gt;ForwardX11Trusted&lt;/tt&gt; enabled.&lt;/p&gt;
&lt;p&gt;If SSH has properly configured X11 forwarding it sets &lt;tt class="docutils literal"&gt;$DISPLAY&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$D&lt;/span&gt;ISPLAY
localhost:10.0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Launch an X app on the server and it opens on the local display:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ urxvt &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logging into a remote host just to run a single app can be overkill. Run one-off commands with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/tt&gt; option which backgrounds the SSH client before running the app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;$ ssh -fX remote.host urxvt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One interesting use I discovered for X11 forwarding is running the &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; music player. A limitation of X11 forwarding is that sound is not transmitted to the client's audio hardware. Turns out that is a &lt;strong&gt;feature&lt;/strong&gt; on my home network setup because my speakers are connected to the server. I launch &lt;tt class="docutils literal"&gt;rhythmbox&lt;/tt&gt; on the server, display and &lt;a class="reference external" href="http://www.circuidipity.com/thinkpad-usb-keyboard-trackpoint.html"&gt;control the player&lt;/a&gt; on the client, and the &lt;a class="reference external" href="https://www.youtube.com/watch?v=mZDYJYqcYK4"&gt;good and funky sounds&lt;/a&gt; issue forth from the server!&lt;/p&gt;
&lt;p&gt;I create the &lt;tt class="docutils literal"&gt;Jukebox&lt;/tt&gt; alias in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bash_aliases&lt;/span&gt;&lt;/tt&gt; to X11 forward the player as a one-off command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;Jukebox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ssh -fX remote.host rhythmbox&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Happy Hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Wayne Armstrong</dc:creator><pubDate>Tue, 11 Aug 2015 15:43:00 -0400</pubDate><guid>tag:www.circuidipity.com,2015-08-11:x11-forwarding-ssh.html</guid><category>ssh</category><category>network</category><category>linux</category></item></channel></rss>